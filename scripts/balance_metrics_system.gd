# balance_metrics_system.gd - –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –±–∞–ª–∞–Ω—Å–∞
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞

class_name BalanceMetricsSystem
extends Node

signal metrics_updated(metrics_data: Dictionary)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞
var battle_metrics = {
	"unit_usage": {},           # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —é–Ω–∏—Ç–æ–≤
	"unit_effectiveness": {},   # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —é–Ω–∏—Ç–æ–≤
	"resource_efficiency": {},  # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤
	"win_conditions": {},       # –£—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
	"battle_duration": [],      # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∏—Ç–≤
	"territory_control": {},    # –ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
	"ability_usage": {},        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	"balance_issues": []        # –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–∞–ª–∞–Ω—Å–∞
}

# –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —é–Ω–∏—Ç–æ–≤
var unit_detailed_metrics = {
	"spawn_count": {},          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö
	"kill_count": {},           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–±–∏–π—Å—Ç–≤
	"death_count": {},          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ—Ä—Ç–µ–π
	"damage_dealt": {},         # –ù–∞–Ω–µ—Å—ë–Ω–Ω—ã–π —É—Ä–æ–Ω
	"damage_taken": {},         # –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
	"cost_efficiency": {},      # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
	"lifetime": {},             # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏
	"target_priority": {}       # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–ª–µ–π
}

# –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
var resource_metrics = {
	"energy_generation": {},    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏
	"crystal_generation": {},   # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
	"resource_spending": {},    # –¢—Ä–∞—Ç—ã —Ä–µ—Å—É—Ä—Å–æ–≤
	"resource_efficiency": {}   # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
}

# –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
var territory_metrics = {
	"capture_speed": {},        # –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–∞
	"control_time": {},         # –í—Ä–µ–º—è –∫–æ–Ω—Ç—Ä–æ–ª—è
	"strategic_value": {},      # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
	"defense_effectiveness": {} # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã
}

func _ready():
	print("üìä –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –±–∞–ª–∞–Ω—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —é–Ω–∏—Ç–∞
func register_unit_spawn(team: String, unit_type: String, cost: int):
	if not battle_metrics.unit_usage.has(unit_type):
		battle_metrics.unit_usage[unit_type] = {"player": 0, "enemy": 0}
	
	battle_metrics.unit_usage[unit_type][team] += 1
	
	# –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
	if not unit_detailed_metrics.spawn_count.has(unit_type):
		unit_detailed_metrics.spawn_count[unit_type] = {"player": 0, "enemy": 0}
	unit_detailed_metrics.spawn_count[unit_type][team] += 1
	
	print("üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–ø–∞–≤–Ω: ", team, " ", unit_type)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–±–∏–π—Å—Ç–≤–∞ —é–Ω–∏—Ç–∞
func register_unit_kill(attacker_team: String, attacker_type: String, victim_team: String, victim_type: String, damage: int):
	# –ú–µ—Ç—Ä–∏–∫–∏ —É–±–∏–π—Å—Ç–≤
	if not unit_detailed_metrics.kill_count.has(attacker_type):
		unit_detailed_metrics.kill_count[attacker_type] = {"player": 0, "enemy": 0}
	unit_detailed_metrics.kill_count[attacker_type][attacker_team] += 1
	
	# –ú–µ—Ç—Ä–∏–∫–∏ —Å–º–µ—Ä—Ç–µ–π
	if not unit_detailed_metrics.death_count.has(victim_type):
		unit_detailed_metrics.death_count[victim_type] = {"player": 0, "enemy": 0}
	unit_detailed_metrics.death_count[victim_type][victim_team] += 1
	
	# –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
	var effectiveness_key = attacker_type + "_vs_" + victim_type
	if not battle_metrics.unit_effectiveness.has(effectiveness_key):
		battle_metrics.unit_effectiveness[effectiveness_key] = {"kills": 0, "damage": 0}
	
	battle_metrics.unit_effectiveness[effectiveness_key].kills += 1
	battle_metrics.unit_effectiveness[effectiveness_key].damage += damage
	
	print("üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É–±–∏–π—Å—Ç–≤–æ: ", attacker_type, " —É–±–∏–ª ", victim_type)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Ä–æ–Ω–∞
func register_damage(attacker_team: String, attacker_type: String, victim_team: String, victim_type: String, damage: int):
	# –ù–∞–Ω–µ—Å—ë–Ω–Ω—ã–π —É—Ä–æ–Ω
	if not unit_detailed_metrics.damage_dealt.has(attacker_type):
		unit_detailed_metrics.damage_dealt[attacker_type] = {"player": 0, "enemy": 0}
	unit_detailed_metrics.damage_dealt[attacker_type][attacker_team] += damage
	
	# –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
	if not unit_detailed_metrics.damage_taken.has(victim_type):
		unit_detailed_metrics.damage_taken[victim_type] = {"player": 0, "enemy": 0}
	unit_detailed_metrics.damage_taken[victim_type][victim_team] += damage

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
func register_territory_capture(team: String, territory_type: String, capture_time: float):
	if not territory_metrics.capture_speed.has(territory_type):
		territory_metrics.capture_speed[territory_type] = []
	
	territory_metrics.capture_speed[territory_type].append(capture_time)
	
	print("üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞—Ö–≤–∞—Ç: ", team, " –∑–∞—Ö–≤–∞—Ç–∏–ª ", territory_type, " –∑–∞ ", capture_time, " —Å–µ–∫")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
func register_ability_use(team: String, ability_name: String, cost: int, effectiveness: float):
	if not battle_metrics.ability_usage.has(ability_name):
		battle_metrics.ability_usage[ability_name] = {"uses": 0, "total_cost": 0, "effectiveness": []}
	
	battle_metrics.ability_usage[ability_name].uses += 1
	battle_metrics.ability_usage[ability_name].total_cost += cost
	battle_metrics.ability_usage[ability_name].effectiveness.append(effectiveness)
	
	print("üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: ", team, " ", ability_name)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–∏—Ç–≤—ã
func register_battle_end(winner: String, duration: float, player_units_remaining: int, enemy_units_remaining: int):
	battle_metrics.battle_duration.append(duration)
	
	if not battle_metrics.win_conditions.has(winner):
		battle_metrics.win_conditions[winner] = 0
	battle_metrics.win_conditions[winner] += 1
	
	# –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
	analyze_balance_issues()
	
	print("üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–∏—Ç–≤—ã: ", winner, " –ø–æ–±–µ–¥–∏–ª –∑–∞ ", duration, " —Å–µ–∫")

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –±–∞–ª–∞–Ω—Å–∞
func analyze_balance_issues():
	var issues = []
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —é–Ω–∏—Ç–æ–≤
	for unit_type in battle_metrics.unit_usage:
		var player_usage = battle_metrics.unit_usage[unit_type].get("player", 0)
		var enemy_usage = battle_metrics.unit_usage[unit_type].get("enemy", 0)
		var total_usage = player_usage + enemy_usage
		
		if total_usage > 0:
			var usage_ratio = float(total_usage) / get_total_units_spawned()
			if usage_ratio > 0.4:  # –ï—Å–ª–∏ —é–Ω–∏—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ 40% –≤—Ä–µ–º–µ–Ω–∏
				issues.append("–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —é–Ω–∏—Ç–∞: " + unit_type + " (" + str(usage_ratio * 100) + "%)")
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —é–Ω–∏—Ç–æ–≤
	for effectiveness_key in battle_metrics.unit_effectiveness:
		var data = battle_metrics.unit_effectiveness[effectiveness_key]
		if data.kills > 10:  # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
			var avg_damage = float(data.damage) / data.kills
			if avg_damage > 100:  # –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫
				issues.append("–í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + effectiveness_key + " (—É—Ä–æ–Ω: " + str(avg_damage) + ")")
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∏—Ç–≤
	if battle_metrics.battle_duration.size() > 0:
		var avg_duration = get_average_battle_duration()
		if avg_duration < 60:  # –ï—Å–ª–∏ –±–∏—Ç–≤—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
			issues.append("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –±–∏—Ç–≤—ã: " + str(avg_duration) + " —Å–µ–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º")
		elif avg_duration > 600:  # –ï—Å–ª–∏ –±–∏—Ç–≤—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
			issues.append("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –±–∏—Ç–≤—ã: " + str(avg_duration) + " —Å–µ–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º")
	
	battle_metrics.balance_issues = issues
	metrics_updated.emit(battle_metrics)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤
func get_total_units_spawned() -> int:
	var total = 0
	for unit_type in battle_metrics.unit_usage:
		total += battle_metrics.unit_usage[unit_type].get("player", 0)
		total += battle_metrics.unit_usage[unit_type].get("enemy", 0)
	return total

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∏—Ç–≤
func get_average_battle_duration() -> float:
	if battle_metrics.battle_duration.size() == 0:
		return 0.0
	
	var total = 0.0
	for duration in battle_metrics.battle_duration:
		total += duration
	return total / battle_metrics.battle_duration.size()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É
func get_balance_report() -> Dictionary:
	return {
		"unit_usage": battle_metrics.unit_usage,
		"unit_effectiveness": battle_metrics.unit_effectiveness,
		"win_conditions": battle_metrics.win_conditions,
		"average_battle_duration": get_average_battle_duration(),
		"total_units_spawned": get_total_units_spawned(),
		"balance_issues": battle_metrics.balance_issues
	}

# –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ (–¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏)
func reset_metrics():
	battle_metrics = {
		"unit_usage": {},
		"unit_effectiveness": {},
		"resource_efficiency": {},
		"win_conditions": {},
		"battle_duration": [],
		"territory_control": {},
		"ability_usage": {},
		"balance_issues": []
	}
	
	unit_detailed_metrics = {
		"spawn_count": {},
		"kill_count": {},
		"death_count": {},
		"damage_dealt": {},
		"damage_taken": {},
		"cost_efficiency": {},
		"lifetime": {},
		"target_priority": {}
	}
	
	print("ÔøΩÔøΩ –ú–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã") 