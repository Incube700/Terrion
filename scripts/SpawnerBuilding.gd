extends Node3D
class_name SpawnerBuilding

# –°–∏—Å—Ç–µ–º–∞ —Å–ø–∞–≤–Ω–µ—Ä–∞ –∑–¥–∞–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø —é–Ω–∏—Ç–æ–≤
# –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ —Å–ø–∞–≤–Ω–∏—Ç –≥—Ä—É–ø–ø—É –∏–∑ 4 —é–Ω–∏—Ç–æ–≤

signal group_spawned(group_unit)
signal building_destroyed

@export var team: String = "player"
@export var spawner_type: String = "spawner"

var config = SPAWNER_CONFIG.get(spawner_type, {})
var build_progress: float = 0.0
var is_built: bool = false
var active_groups: Array = []
var spawn_timer: Timer
var build_timer: Timer

# –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
var building_mesh: MeshInstance3D
var progress_bar: ProgressBar
var spawn_effect: GPUParticles3D

func _ready():
	setup_timers()
	setup_visuals()
	start_building_process()

func setup_timers():
	# –¢–∞–π–º–µ—Ä –ø–æ—Å—Ç—Ä–æ–π–∫–∏
	build_timer = Timer.new()
	build_timer.wait_time = config.get("build_time", 3.0)
	build_timer.one_shot = true
	build_timer.timeout.connect(_on_building_complete)
	add_child(build_timer)
	
	# –¢–∞–π–º–µ—Ä —Å–ø–∞–≤–Ω–∞ –≥—Ä—É–ø–ø
	spawn_timer = Timer.new()
	spawn_timer.wait_time = config.get("group_spawn_interval", 5.0)
	spawn_timer.timeout.connect(_on_spawn_timer_timeout)
	add_child(spawn_timer)

func setup_visuals():
	# –°–æ–∑–¥–∞–µ–º –º–µ—à –∑–¥–∞–Ω–∏—è
	building_mesh = MeshInstance3D.new()
	var box_mesh = BoxMesh.new()
	box_mesh.size = Vector3(3, 2, 3)
	building_mesh.mesh = box_mesh
	
	# –ú–∞—Ç–µ—Ä–∏–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
	var material = StandardMaterial3D.new()
	if team == "player":
		material.albedo_color = Color(0.2, 0.6, 1.0, 0.8)
	else:
		material.albedo_color = Color(1.0, 0.2, 0.2, 0.8)
	building_mesh.set_surface_override_material(0, material)
	add_child(building_mesh)
	
	# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ—Å—Ç—Ä–æ–π–∫–∏
	progress_bar = ProgressBar.new()
	progress_bar.max_value = 100
	progress_bar.value = 0
	progress_bar.position = Vector2(50, 50)
	progress_bar.size = Vector2(200, 20)
	# –î–æ–±–∞–≤–ª—è–µ–º –≤ UI —Å–ª–æ–π
	get_tree().current_scene.get_node("UI").add_child(progress_bar)

func start_building_process():
	print("üèóÔ∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∞–≤–Ω–µ—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ", team)
	build_timer.start()
	
	# –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏
	var tween = create_tween()
	tween.tween_method(update_build_progress, 0.0, 100.0, config.get("build_time", 3.0))

func update_build_progress(progress: float):
	build_progress = progress
	if progress_bar:
		progress_bar.value = progress

func _on_building_complete():
	is_built = true
	build_progress = 100.0
	if progress_bar:
		progress_bar.queue_free()
	
	print("‚úÖ –°–ø–∞–≤–Ω–µ—Ä –ø–æ—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ", team)
	
	# –ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∞–≤–Ω –≥—Ä—É–ø–ø
	spawn_timer.start()
	spawn_group()  # –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ —Å—Ä–∞–∑—É

func _on_spawn_timer_timeout():
	if is_built and can_spawn_group():
		spawn_group()

func can_spawn_group() -> bool:
	var max_groups = config.get("max_active_groups", 5)
	
	# –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ –≥—Ä—É–ø–ø—ã
	active_groups = active_groups.filter(func(group): return is_instance_valid(group))
	
	return active_groups.size() < max_groups

func spawn_group():
	if not is_built:
		return
	
	var group_size = config.get("group_size", 4)
	var spawn_position = global_position + Vector3(randf_range(-2, 2), 0, randf_range(-2, 2))
	
	# –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —é–Ω–∏—Ç–æ–≤
	var group_unit = preload("res://scripts/GroupUnit.gd").new()
	group_unit.team = team
	group_unit.spawner = self
	group_unit.global_position = spawn_position
	
	# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
	get_tree().current_scene.add_child(group_unit)
	active_groups.append(group_unit)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å–º–µ—Ä—Ç–∏ –≥—Ä—É–ø–ø—ã
	group_unit.group_died.connect(_on_group_died)
	
	# –≠—Ñ—Ñ–µ–∫—Ç —Å–ø–∞–≤–Ω–∞
	create_spawn_effect(spawn_position)
	
	print("‚öîÔ∏è –ì—Ä—É–ø–ø–∞ —é–Ω–∏—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ", team, " (–≤—Å–µ–≥–æ –≥—Ä—É–ø–ø: ", active_groups.size(), ")")
	group_spawned.emit(group_unit)

func _on_group_died(group_unit):
	active_groups.erase(group_unit)
	print("üíÄ –ì—Ä—É–ø–ø–∞ —é–Ω–∏—Ç–æ–≤ –ø–æ–≥–∏–±–ª–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ", team, " (–æ—Å—Ç–∞–ª–æ—Å—å –≥—Ä—É–ø–ø: ", active_groups.size(), ")")

func create_spawn_effect(position: Vector3):
	# –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–ø–∞–≤–Ω–∞
	if spawn_effect:
		spawn_effect.global_position = position
		spawn_effect.emitting = true

func take_damage(damage: int):
	if not is_built:
		return
	
	# –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
	config["hp"] -= damage
	
	if config["hp"] <= 0:
		destroy_building()

func destroy_building():
	print("üí• –°–ø–∞–≤–Ω–µ—Ä —É–Ω–∏—á—Ç–æ–∂–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ", team)
	
	# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∞–≤–Ω
	spawn_timer.stop()
	
	# –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
	for group in active_groups:
		if is_instance_valid(group):
			group.destroy_group()
	
	# –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
	create_destruction_effect()
	
	building_destroyed.emit()
	queue_free()

func create_destruction_effect():
	# –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è
	var explosion = GPUParticles3D.new()
	explosion.global_position = global_position
	explosion.emitting = true
	get_tree().current_scene.add_child(explosion)
	
	# –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
	var timer = Timer.new()
	timer.wait_time = 2.0
	timer.one_shot = true
	timer.timeout.connect(func(): explosion.queue_free())
	explosion.add_child(timer)
	timer.start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –ø—É—Å—Ç–æ—Ç—ã
func apply_efficiency_bonus(multiplier: float):
	if spawn_timer:
		spawn_timer.wait_time = config.get("group_spawn_interval", 5.0) / multiplier
		print("üíú –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–ø–∞–≤–Ω–µ—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –≤ ", multiplier, " —Ä–∞–∑")

func get_spawner_info() -> Dictionary:
	return {
		"team": team,
		"type": spawner_type,
		"is_built": is_built,
		"active_groups": active_groups.size(),
		"max_groups": config.get("max_active_groups", 5),
		"hp": config.get("hp", 500)
	} 