extends Node

# BattleManager ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –±–æ—è, —Ä–µ—Å—É—Ä—Å–∞–º–∏, –ø–æ–±–µ–¥–æ–π/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ–º

var player_energy = 100  # –ù–∞—á–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –∏–≥—Ä–æ–∫–∞
var enemy_energy = 100   # –ù–∞—á–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –≤—Ä–∞–≥–∞
var player_crystals = 0  # –ù–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å - –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
var enemy_crystals = 0   # –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –≤—Ä–∞–≥–∞
var energy_gain_per_tick = 10  # –ü—Ä–∏—Ä–æ—Å—Ç —ç–Ω–µ—Ä–≥–∏–∏ –∑–∞ —Ç–∏–∫
var energy_tick_time = 1.0     # –í—Ä–µ–º—è –º–µ–∂–¥—É —Ç–∏–∫–∞–º–∏ —ç–Ω–µ—Ä–≥–∏–∏

var player_base_hp = 100
var enemy_base_hp = 100

var lanes = []
var player_spawners = []
var enemy_spawners = []

signal battle_finished(winner)

var unit_scene = preload("res://scenes/Unit.tscn")
var spawner_scene = preload("res://scenes/Spawner.tscn")
var battle_ui = null
var battle_started = false

var is_building_mode = false
var building_preview = null
var can_build_here = false
var building_cost = 30

# AI —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤—Ä–∞–≥–∞
var enemy_ai_timer: Timer
var enemy_decision_timer: Timer
var energy_timer: Timer
var enemy_max_soldiers = 3
var enemy_max_tanks = 2
var enemy_max_drones = 2
var enemy_current_soldiers = 0
var enemy_current_tanks = 0
var enemy_current_drones = 0

var enemy_ai: EnemyAI = null
var ai_difficulty: String = "normal"

# –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
var territory_system: TerritorySystem = null

func _ready():
	print("üéÆ BattleManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
	
	# –ü–æ–ª—É—á–∞–µ–º UI
	battle_ui = get_node_or_null("BattleUI")
	if battle_ui:
		print("‚úÖ BattleUI –Ω–∞–π–¥–µ–Ω")
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)
		battle_ui.start_battle.connect(_on_start_battle)
		battle_ui.spawn_unit_drag.connect(_on_spawn_unit_drag)
		battle_ui.build_structure_drag.connect(_on_build_structure_drag)
		battle_ui.spawn_soldier.connect(_on_spawn_soldier)
		battle_ui.build_tower.connect(_on_build_tower)
		battle_ui.spawn_elite_soldier.connect(_on_spawn_elite_soldier)
		battle_ui.spawn_crystal_mage.connect(_on_spawn_crystal_mage)
		print("üîó UI —Å–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
	else:
		print("‚ùå BattleUI –Ω–µ –Ω–∞–π–¥–µ–Ω!")

	# –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ (—Ç—Ä–∞–≤–∞)
	var field = MeshInstance3D.new()
	var plane = PlaneMesh.new()
	plane.size = Vector2(30, 50)
	field.mesh = plane
	field.position = Vector3(0, 0, 0)
	var field_mat = StandardMaterial3D.new()
	field_mat.albedo_color = Color(0.2, 0.7, 0.2, 1.0)
	field.set_surface_override_material(0, field_mat)
	add_child(field)

	# –ë–µ–ª–∞—è –ª–∏–Ω–∏—è (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
	var line = MeshInstance3D.new()
	var box = BoxMesh.new()
	box.size = Vector3(30, 0.1, 0.2)
	line.mesh = box
	line.position = Vector3(0, 0.05, 0)
	var line_mat = StandardMaterial3D.new()
	line_mat.albedo_color = Color(1, 1, 1, 1)
	line.set_surface_override_material(0, line_mat)
	add_child(line)

	# –Ø–¥—Ä–æ –∏–≥—Ä–æ–∫–∞ (—Å–∏–Ω–µ–µ)
	var player_core = MeshInstance3D.new()
	player_core.mesh = SphereMesh.new()
	player_core.position = Vector3(0, 0.5, -20)
	var player_mat = StandardMaterial3D.new()
	player_mat.albedo_color = Color(0.2, 0.6, 1, 1)
	player_core.set_surface_override_material(0, player_mat)
	add_child(player_core)

	# –Ø–¥—Ä–æ –≤—Ä–∞–≥–∞ (–∫—Ä–∞—Å–Ω–æ–µ)
	var enemy_core = MeshInstance3D.new()
	enemy_core.mesh = SphereMesh.new()
	enemy_core.position = Vector3(0, 0.5, 20)
	var enemy_mat = StandardMaterial3D.new()
	enemy_mat.albedo_color = Color(1, 0.2, 0.2, 1)
	enemy_core.set_surface_override_material(0, enemy_mat)
	add_child(enemy_core)

	# –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–ø–∞–≤–Ω–µ—Ä—ã –∏–≥—Ä–æ–∫–∞ –∏ –≤—Ä–∞–≥–∞
	create_start_spawner("player", Vector3(-4, 0, -15))
	create_start_spawner("enemy", Vector3(4, 0, 15))

	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –≤—Ä–∞–≥–∞ –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
	init_enemy_ai()
	init_energy_timer()
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
	init_territory_system()

	# –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ–π —Å—Ä–∞–∑—É ‚Äî –∂–¥—ë–º –Ω–∞–∂–∞—Ç–∏—è Start Battle
	battle_started = false
	update_ui()
	
	print("üèÅ BattleManager –≥–æ—Ç–æ–≤! –ù–∞–∂–º–∏—Ç–µ Start Battle –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")

func init_energy_timer():
	# –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
	energy_timer = Timer.new()
	energy_timer.wait_time = energy_tick_time
	energy_timer.autostart = true
	energy_timer.timeout.connect(_on_energy_timer)
	add_child(energy_timer)

func init_territory_system():
	# –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
	territory_system = TerritorySystem.new()
	territory_system.battle_manager = self
	add_child(territory_system)
	print("üè∞ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

func create_cores_and_spawners():
	# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —è–¥—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
	for node in get_children():
		if node.name == "PlayerCore" or node.name == "EnemyCore":
			node.queue_free()

	# –°–æ–∑–¥–∞—ë–º —è–¥—Ä–æ –∏–≥—Ä–æ–∫–∞ (—Å–∏–Ω–µ–µ)
	var player_core_scene = preload("res://scenes/Core.tscn")
	var player_core = player_core_scene.instantiate()
	player_core.name = "PlayerCore"
	player_core.position = Vector3(0, 0.5, -20)
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å MeshInstance3D
	if not player_core.has_node("MeshInstance3D"):
		var mesh = MeshInstance3D.new()
		mesh.mesh = SphereMesh.new()
		var mat = StandardMaterial3D.new()
		mat.albedo_color = Color(0.2, 0.6, 1, 1)
		mesh.set_surface_override_material(0, mat)
		player_core.add_child(mesh)
	add_child(player_core)

	# –°–æ–∑–¥–∞—ë–º —è–¥—Ä–æ –≤—Ä–∞–≥–∞ (–∫—Ä–∞—Å–Ω–æ–µ)
	var enemy_core_scene = preload("res://scenes/Core.tscn")
	var enemy_core = enemy_core_scene.instantiate()
	enemy_core.name = "EnemyCore"
	enemy_core.position = Vector3(0, 0.5, 20)
	if not enemy_core.has_node("MeshInstance3D"):
		var mesh = MeshInstance3D.new()
		mesh.mesh = SphereMesh.new()
		var mat = StandardMaterial3D.new()
		mat.albedo_color = Color(1, 0.2, 0.2, 1)
		mesh.set_surface_override_material(0, mat)
		enemy_core.add_child(mesh)
	add_child(enemy_core)

	# –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–ø–∞–≤–Ω–µ—Ä—ã –∏–≥—Ä–æ–∫–∞ –∏ –≤—Ä–∞–≥–∞
	create_start_spawner("player", Vector3(-4, 0, -15))
	create_start_spawner("enemy", Vector3(4, 0, 15))

func create_start_spawner(team: String, position: Vector3):
	var spawner = spawner_scene.instantiate()
	spawner.position = position
	spawner.name = team.capitalize() + "StartSpawner"
	spawner.set("team", team)
	add_child(spawner)
	spawner.add_to_group("spawners")

func _on_start_battle():
	print("üöÄ –ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
	battle_started = true
	
	# –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
	if battle_ui and battle_ui.has_node("Panel/StartButton"):
		battle_ui.get_node("Panel/StartButton").hide()
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ Start —Å–∫—Ä—ã—Ç–∞")
	else:
		print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Start –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	
	# –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã —Å–ø–∞–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—è
	var spawners = get_tree().get_nodes_in_group("spawners")
	print("üìç –ù–∞–π–¥–µ–Ω–æ —Å–ø–∞–≤–Ω–µ—Ä–æ–≤: ", spawners.size())
	for spawner in spawners:
		if spawner.has_node("SpawnTimer"):
			spawner.get_node("SpawnTimer").autostart = true
			spawner.get_node("SpawnTimer").start()
			print("‚è∞ –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä —Å–ø–∞–≤–Ω–µ—Ä–∞: ", spawner.name)
		else:
			print("‚ùå –°–ø–∞–≤–Ω–µ—Ä –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞: ", spawner.name)
	
	# –ó–∞–ø—É—Å–∫–∞–µ–º AI –≤—Ä–∞–≥–∞
	if enemy_decision_timer:
		enemy_decision_timer.start()
		print("ü§ñ AI —Ç–∞–π–º–µ—Ä —Ä–µ—à–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
	if enemy_ai_timer:
		enemy_ai_timer.start()
		print("ü§ñ AI —Ç–∞–π–º–µ—Ä —Å–ø–∞–≤–Ω–∞ –∑–∞–ø—É—â–µ–Ω")
	
	# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —é–Ω–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	print("üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —é–Ω–∏—Ç–æ–≤...")
	spawn_unit_at_pos("player", Vector3(-2, 0, -12), "soldier")
	spawn_unit_at_pos("enemy", Vector3(2, 0, 12), "soldier")

func _on_energy_timer():
	if not battle_started:
		return
	player_energy += energy_gain_per_tick
	enemy_energy += energy_gain_per_tick
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
func finish_battle(winner):
	battle_finished.emit(winner)
	print("–ë–∏—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ", winner)
	# TODO: –ø–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è

# –°–ø–∞–≤–Ω —é–Ω–∏—Ç–∞ –Ω–∞ –ª–∏–Ω–∏–∏
func spawn_unit(team, lane_idx):
	if not battle_started:
		return
	if lane_idx < 0 or lane_idx >= lanes.size():
		return
	var lane = lanes[lane_idx]
	var start_pos = lane.get_node("Start").global_position
	var end_pos = lane.get_node("End").global_position
	var unit = unit_scene.instantiate()
	unit.team = team
	unit.global_position = start_pos
	unit.target_pos = end_pos
	unit.battle_manager = self
	get_parent().add_child(unit)

func unit_reached_base(unit):
	if unit.team == "player":
		enemy_base_hp -= unit.damage
		if enemy_base_hp <= 0:
			finish_battle("player")
	elif unit.team == "enemy":
		player_base_hp -= unit.damage
		if player_base_hp <= 0:
			finish_battle("enemy")

# TODO: –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É UI, –ø–æ–±–µ–¥—ã, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ –º–µ—Ä–µ —Ä–∞–∑–≤–∏—Ç–∏—è 

func _on_build_pressed():
	if player_energy >= building_cost:
		is_building_mode = true
		create_building_preview()

func create_building_preview():
	if building_preview:
		building_preview.queue_free()
	var preview = unit_scene.instantiate()
	preview.modulate = Color(0.5, 1, 0.5, 0.5) # –∑–µ–ª—ë–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	preview.name = "BuildingPreview"
	preview.set_physics_process(false)
	add_child(preview)
	building_preview = preview

func _unhandled_input(event):
	if is_building_mode:
		if event is InputEventMouseMotion or event is InputEventScreenDrag:
			var pos = get_mouse_map_position(event.position)
			if building_preview:
				building_preview.global_position = pos
				can_build_here = is_valid_build_position(pos)
				building_preview.modulate = Color(0.5, 1, 0.5, 0.5) if can_build_here else Color(1, 0.3, 0.3, 0.5)
		elif event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
			if event.pressed:
				# –ù–∞—á–∞–ª–æ drag ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
				pass
			else:
				# –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å
				if can_build_here and player_energy >= building_cost:
					place_spawner("player", "spawner", building_preview.global_position)
					player_energy -= building_cost
					update_ui()
					building_preview.queue_free()
					building_preview = null
					is_building_mode = false
				else:
					# –ù–µ–ª—å–∑—è —Å—Ç—Ä–æ–∏—Ç—å ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫/—ç—Ñ—Ñ–µ–∫—Ç
					pass
	else:
		# –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–ø–∞–≤–Ω–µ—Ä–æ–≤ –ø–æ –∫–ª–∏–∫—É
		if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
			if battle_started and player_energy >= 30:
				var pos = get_mouse_map_position(event.position)
				if is_valid_build_position(pos):
					place_spawner("player", "spawner", pos)
					player_energy -= 30
					update_ui()
	
	# –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø–æ –∫–ª–∞–≤–∏—à–µ SPACE, –µ—Å–ª–∏ UI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
	if event is InputEventKey and event.pressed:
		if event.keycode == KEY_SPACE and not battle_started:
			print("üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø–æ –∫–ª–∞–≤–∏—à–µ SPACE")
			_on_start_battle()

func get_mouse_map_position(screen_pos):
	var camera = get_viewport().get_camera_3d()
	var from = camera.project_ray_origin(screen_pos)
	var to = from + camera.project_ray_normal(screen_pos) * 1000
	var space_state = get_viewport().get_world_3d().direct_space_state
	var query = PhysicsRayQueryParameters3D.new()
	query.from = from
	query.to = to
	var result = space_state.intersect_ray(query)
	if result and result.has("position"):
		return result.position
	return Vector3.ZERO

func is_valid_build_position(pos: Vector3) -> bool:
	var map_width = 30.0
	var map_height = 50.0
	if pos.z > 0:
		return false
	if pos.x < -map_width/2 or pos.x > map_width/2:
		return false
	if pos.z < -map_height/2 or pos.z > 0:
		return false
	var spawners = get_tree().get_nodes_in_group("spawners")
	for s in spawners:
		if s.global_position.distance_to(pos) < 1.5:
			return false
	return true

func is_valid_enemy_build_position(pos: Vector3) -> bool:
	var map_width = 30.0
	var map_height = 50.0
	if pos.z < 0:
		return false
	if pos.x < -map_width/2 or pos.x > map_width/2:
		return false
	if pos.z < 0 or pos.z > map_height/2:
		return false
	var spawners = get_tree().get_nodes_in_group("spawners")
	for s in spawners:
		if s.global_position.distance_to(pos) < 2.0:
			return false
	return true

# Drag&drop: —Å–ø–∞–≤–Ω —é–Ω–∏—Ç–∞
func _on_spawn_unit_drag(unit_type, screen_pos):
	if not battle_started or player_energy < 20:
		return
	var pos = get_mouse_map_position(screen_pos)
	if is_valid_unit_position(pos):
		spawn_unit_at_pos("player", pos, unit_type)
		player_energy -= 20
		update_ui()

# Drag&drop: —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∑–¥–∞–Ω–∏—è
func _on_build_structure_drag(screen_pos):
	if not battle_started or player_energy < 60:
		return
	var pos = get_mouse_map_position(screen_pos)
	if is_valid_build_position(pos):
		place_spawner("player", "tower", pos)
		player_energy -= 60
		update_ui()

func is_valid_unit_position(pos: Vector3) -> bool:
	var map_width = 30.0
	var map_height = 50.0
	if pos.z > 0:
		return false
	if pos.x < -map_width/2 or pos.x > map_width/2:
		return false
	if pos.z < -map_height/2 or pos.z > 0:
		return false
	var spawners = get_tree().get_nodes_in_group("spawners")
	for s in spawners:
		if s.global_position.distance_to(pos) < 2.5:
			return false
	return true

func spawn_unit_at_pos(team, pos, unit_type="soldier"):
	if not can_spawn_unit(team, unit_type):
		print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!")
		return
	
	var energy_cost = get_unit_cost(unit_type)
	var crystal_cost = get_unit_crystal_cost(unit_type)
	
	print("üî® –°–æ–∑–¥–∞–µ–º —é–Ω–∏—Ç–∞: ", team, " ", unit_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", pos)
	var unit = unit_scene.instantiate()
	add_child(unit)
	unit.team = team
	unit.unit_type = unit_type
	unit.global_position = pos
	if team == "player":
		unit.target_pos = Vector3(0, 0, 20)
		player_energy -= energy_cost
		player_crystals -= crystal_cost
	else:
		unit.target_pos = Vector3(0, 0, -20)
		enemy_energy -= energy_cost
		enemy_crystals -= crystal_cost
	unit.battle_manager = self
	unit.add_to_group("units")
	print("‚úÖ –Æ–Ω–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ", unit.name, " –∫–æ–º–∞–Ω–¥–∞: ", unit.team)
	print("üéØ –¶–µ–ª—å —é–Ω–∏—Ç–∞: ", unit.target_pos)
	var units_in_group = get_tree().get_nodes_in_group("units")
	print("üìä –í—Å–µ–≥–æ —é–Ω–∏—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: ", units_in_group.size())

# –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é update_ui, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
func update_ui():
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy, player_crystals, enemy_crystals)

# –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é place_spawner, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
func place_spawner(team: String, spawner_type: String, position: Vector3):
	if not can_build_structure(team, spawner_type):
		print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")
		return
	var spawner = spawner_scene.instantiate()
	add_child(spawner)
	spawner.team = team
	spawner.spawner_type = spawner_type
	spawner.global_position = position
	spawner.name = team.capitalize() + spawner_type.capitalize() + str(randi())
	spawner.add_to_group("spawners")
	print("–ü–æ—Å—Ç—Ä–æ–µ–Ω —Å–ø–∞–≤–Ω–µ—Ä: ", team, " ", spawner_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", position)

func init_enemy_ai():
	# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI
	enemy_ai = EnemyAI.new(self, ai_difficulty)
	add_child(enemy_ai)
	
	# –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π AI
	enemy_decision_timer = Timer.new()
	enemy_decision_timer.wait_time = 2.0  # –†–µ—à–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
	enemy_decision_timer.autostart = false  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—è
	enemy_decision_timer.timeout.connect(_on_enemy_ai_decision)
	add_child(enemy_decision_timer)
	
	# –¢–∞–π–º–µ—Ä –¥–ª—è —Å–ø–∞–≤–Ω–∞ —é–Ω–∏—Ç–æ–≤ –≤—Ä–∞–≥–∞
	enemy_ai_timer = Timer.new()
	enemy_ai_timer.wait_time = 4.0  # –°–ø–∞–≤–Ω –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã
	enemy_ai_timer.autostart = false  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—è
	enemy_ai_timer.timeout.connect(_on_enemy_ai_spawn)
	add_child(enemy_ai_timer)

func _on_enemy_ai_decision():
	if not battle_started or not enemy_ai:
		return
	
	print("AI –≤—Ä–∞–≥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ...")
	
	# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏—Ö —é–Ω–∏—Ç–æ–≤ –≤—Ä–∞–≥–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	count_enemy_units()
	
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
	var decision = enemy_ai.make_decision(enemy_decision_timer.wait_time)
	execute_advanced_ai_decision(decision)

func count_enemy_units():
	enemy_current_soldiers = 0
	enemy_current_tanks = 0
	enemy_current_drones = 0
	
	var units = get_tree().get_nodes_in_group("units")
	for unit in units:
		if unit.team == "enemy":
			match unit.unit_type:
				"soldier":
					enemy_current_soldiers += 1
				"tank":
					enemy_current_tanks += 1
				"drone":
					enemy_current_drones += 1
	
	print("–í—Ä–∞–∂–µ—Å–∫–∏–µ —é–Ω–∏—Ç—ã: —Å–æ–ª–¥–∞—Ç—ã=", enemy_current_soldiers, 
		  ", —Ç–∞–Ω–∫–∏=", enemy_current_tanks, 
		  ", –¥—Ä–æ–Ω—ã=", enemy_current_drones)

func make_enemy_decision() -> Dictionary:
	var decision = {
		"action": "none",
		"unit_type": "",
		"position": Vector3.ZERO
	}
	
	# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ –ø–æ–ª–µ –±–æ—è
	var _player_units = get_player_unit_count()  # –î–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	var enemy_spawners_count = get_enemy_spawner_count()
	
	# –ï—Å–ª–∏ –º–∞–ª–æ —Å–æ–ª–¥–∞—Ç - —Å–æ–∑–¥–∞–µ–º —Å–æ–ª–¥–∞—Ç
	if enemy_current_soldiers < enemy_max_soldiers and enemy_energy >= 20:
		decision.action = "spawn"
		decision.unit_type = "soldier"
		return decision
	
	# –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–ª–¥–∞—Ç—ã, –Ω–æ –º–∞–ª–æ —Ç–∞–Ω–∫–æ–≤ - —Å–æ–∑–¥–∞–µ–º —Ç–∞–Ω–∫
	if enemy_current_soldiers > 0 and enemy_current_tanks < enemy_max_tanks and enemy_energy >= 50:
		decision.action = "spawn"
		decision.unit_type = "tank"
		return decision
	
	# –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–Ω–∫–∏, –Ω–æ –º–∞–ª–æ –¥—Ä–æ–Ω–æ–≤ - —Å–æ–∑–¥–∞–µ–º –¥—Ä–æ–Ω
	if enemy_current_tanks > 0 and enemy_current_drones < enemy_max_drones and enemy_energy >= 35:
		decision.action = "spawn"
		decision.unit_type = "drone"
		return decision
	
	# –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –º–∞–ª–æ —Å–ø–∞–≤–Ω–µ—Ä–æ–≤ - —Å—Ç—Ä–æ–∏–º —Å–ø–∞–≤–Ω–µ—Ä
	if enemy_energy >= 60 and enemy_spawners_count < 3:
		decision.action = "build"
		decision.unit_type = "spawner"
		return decision
	
	# –ï—Å–ª–∏ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ - —Å—Ç—Ä–æ–∏–º –±–∞—à–Ω—é
	if enemy_energy >= 80:
		decision.action = "build"
		decision.unit_type = "tower"
		return decision
	
	return decision

func get_player_unit_count() -> int:
	var count = 0
	var units = get_tree().get_nodes_in_group("units")
	for unit in units:
		if unit.team == "player":
			count += 1
	return count

func get_enemy_spawner_count() -> int:
	var count = 0
	var spawners = get_tree().get_nodes_in_group("spawners")
	for spawner in spawners:
		if spawner.team == "enemy":
			count += 1
	return count

func execute_enemy_decision(decision: Dictionary):
	match decision.action:
		"spawn":
			spawn_enemy_unit(decision.unit_type)
		"build":
			build_enemy_structure(decision.unit_type)
		"none":
			print("AI –≤—Ä–∞–≥–∞: –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π")

func execute_advanced_ai_decision(decision: Dictionary):
	match decision.action:
		"spawn":
			spawn_enemy_unit_at_position(decision.unit_type, decision.position)
		"build":
			build_enemy_structure_at_position(decision.structure_type, decision.position)
		"none":
			print("AI –≤—Ä–∞–≥–∞: –Ω–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ", decision.priority, ")")

func spawn_enemy_unit(unit_type: String):
	var cost = get_unit_cost(unit_type)
	if enemy_energy < cost:
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è ", unit_type)
		return
	
	# –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
	var spawn_pos = get_random_enemy_spawn_position()
	
	spawn_unit_at_pos("enemy", spawn_pos, unit_type)
	enemy_energy -= cost
	
	print("AI –≤—Ä–∞–≥–∞ —Å–æ–∑–¥–∞–ª ", unit_type, " –∑–∞ ", cost, " —ç–Ω–µ—Ä–≥–∏–∏")
	
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)

func build_enemy_structure(structure_type: String):
	var cost = get_structure_cost(structure_type)
	if enemy_energy < cost:
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ ", structure_type)
		return
	
	# –í—ã–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
	var build_pos = get_random_enemy_build_position()
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
	if not is_valid_enemy_build_position(build_pos):
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ –º–æ–∂–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤ –ø–æ–∑–∏—Ü–∏–∏ ", build_pos)
		return
	
	place_spawner("enemy", structure_type, build_pos)
	enemy_energy -= cost
	
	print("AI –≤—Ä–∞–≥–∞ –ø–æ—Å—Ç—Ä–æ–∏–ª ", structure_type, " –∑–∞ ", cost, " —ç–Ω–µ—Ä–≥–∏–∏")
	
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)

func spawn_enemy_unit_at_position(unit_type: String, position: Vector3):
	var cost = get_unit_cost(unit_type)
	if enemy_energy < cost:
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è ", unit_type)
		return
	
	spawn_unit_at_pos("enemy", position, unit_type)
	enemy_energy -= cost
	
	print("AI –≤—Ä–∞–≥–∞ —Å–æ–∑–¥–∞–ª ", unit_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", position, " –∑–∞ ", cost, " —ç–Ω–µ—Ä–≥–∏–∏")
	
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)

func build_enemy_structure_at_position(structure_type: String, position: Vector3):
	var cost = get_structure_cost(structure_type)
	if enemy_energy < cost:
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ ", structure_type)
		return
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
	if not is_valid_enemy_build_position(position):
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ –º–æ–∂–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å ", structure_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", position)
		return
	
	place_spawner("enemy", structure_type, position)
	enemy_energy -= cost
	
	print("AI –≤—Ä–∞–≥–∞ –ø–æ—Å—Ç—Ä–æ–∏–ª ", structure_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", position, " –∑–∞ ", cost, " —ç–Ω–µ—Ä–≥–∏–∏")
	
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)

func get_unit_cost(unit_type: String) -> int:
	match unit_type:
		"soldier":
			return 20
		"tank":
			return 50
		"drone":
			return 35
		"elite_soldier":
			return 30  # –¢—Ä–µ–±—É–µ—Ç —ç–Ω–µ—Ä–≥–∏—é
		"crystal_mage":
			return 25  # –¢—Ä–µ–±—É–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
		"heavy_tank":
			return 80  # –¢—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–∏–∏
		_:
			return 20

func get_unit_crystal_cost(unit_type: String) -> int:
	match unit_type:
		"crystal_mage":
			return 15  # –¢—Ä–µ–±—É–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
		"elite_soldier":
			return 10  # –¢—Ä–µ–±—É–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
		"heavy_tank":
			return 20  # –¢—Ä–µ–±—É–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
		_:
			return 0

func get_structure_cost(structure_type: String) -> int:
	match structure_type:
		"tower":
			return 60
		"spawner":
			return 30
		"barracks":
			return 80
		_:
			return 60

func get_random_enemy_spawn_position() -> Vector3:
	# –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (z > 0)
	var x = randf_range(-8.0, 8.0)
	var z = randf_range(8.0, 18.0)
	return Vector3(x, 0, z)

func get_random_enemy_build_position() -> Vector3:
	# –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
	var attempts = 0
	var max_attempts = 10
	
	while attempts < max_attempts:
		var x = randf_range(-6.0, 6.0)
		var z = randf_range(5.0, 18.0)
		var pos = Vector3(x, 0, z)
		
		if is_valid_enemy_build_position(pos):
			return pos
		
		attempts += 1
	
	# –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–∑–∏—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é
	return Vector3(randf_range(-4.0, 4.0), 0, 12.0)

func _on_enemy_ai_spawn():
	if not battle_started:
		return
	
	# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∞–≤–Ω –±–∞–∑–æ–≤—ã—Ö —é–Ω–∏—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
	if enemy_energy >= 20 and enemy_current_soldiers < 2:
		spawn_enemy_unit("soldier")

func _on_spawn_soldier():
	print("–ö–Ω–æ–ø–∫–∞ —Å–ø–∞–≤–Ω–∞ —Å–æ–ª–¥–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and player_energy >= 20:
		# –°–ø–∞–≤–Ω —é–Ω–∏—Ç–∞-—Å–æ–ª–¥–∞—Ç–∞ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º
		var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, -12.0)
		spawn_unit_at_pos("player", spawn_pos, "soldier")
		player_energy -= 20
		update_ui()

func _on_build_tower():
	print("–ö–Ω–æ–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –±–∞—à–Ω–∏ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and player_energy >= 60:
		# –°—Ç—Ä–æ–∏–º –±–∞—à–Ω—é —Ä—è–¥–æ–º —Å –±–∞–∑–æ–π –∏–≥—Ä–æ–∫–∞
		var build_pos = Vector3(randf_range(-6.0, 6.0), 0, -15.0)
		if is_valid_build_position(build_pos):
			place_spawner("player", "tower", build_pos)
			player_energy -= 60
			update_ui()

func _on_spawn_elite_soldier():
	print("–ö–Ω–æ–ø–∫–∞ —Å–ø–∞–≤–Ω–∞ —ç–ª–∏—Ç–Ω–æ–≥–æ —Å–æ–ª–¥–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and can_spawn_unit("player", "elite_soldier"):
		var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, -12.0)
		spawn_unit_at_pos("player", spawn_pos, "elite_soldier")
		update_ui()

func _on_spawn_crystal_mage():
	print("–ö–Ω–æ–ø–∫–∞ —Å–ø–∞–≤–Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞–≥–∞ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and can_spawn_unit("player", "crystal_mage"):
		var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, -12.0)
		spawn_unit_at_pos("player", spawn_pos, "crystal_mage")
		update_ui()



func can_spawn_unit(team, unit_type):
	var energy_cost = get_unit_cost(unit_type)
	var crystal_cost = get_unit_crystal_cost(unit_type)
	
	if team == "player":
		return player_energy >= energy_cost and player_crystals >= crystal_cost
	else:
		return enemy_energy >= energy_cost and enemy_crystals >= crystal_cost

func can_build_structure(team, structure_type):
	var cost = get_structure_cost(structure_type)
	if team == "player":
		return player_energy >= cost
	else:
		return enemy_energy >= cost

func on_spawner_drop(spawner_type, global_pos):
	if not battle_started:
		print("[DragDrop] –ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞, –Ω–µ–ª—å–∑—è —Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∞–≤–Ω–µ—Ä—ã!")
		return
	
	var cost = get_structure_cost(spawner_type)
	if player_energy < cost:
		print("[DragDrop] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ ", spawner_type)
		return
	
	# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ 3D-–ø–æ–∑–∏—Ü–∏—é –Ω–∞ –ø–æ–ª–µ
	var pos = get_mouse_map_position(global_pos)
	print("[DragDrop] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∞–≤–Ω–µ—Ä '", spawner_type, "' –≤ —Ç–æ—á–∫–µ ", pos)
	if is_valid_build_position(pos):
		place_spawner("player", spawner_type, pos)
		player_energy -= cost
		update_ui()
		print("[DragDrop] –°–ø–∞–≤–Ω–µ—Ä '", spawner_type, "' —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω!")
	else:
		print("[DragDrop] –ù–µ–ª—å–∑—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∞–≤–Ω–µ—Ä –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏!")
 
 
