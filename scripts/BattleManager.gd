class_name BattleManager
extends Node

# BattleManager ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å—Ä–∞–∂–µ–Ω–∏–π –º–µ–∂–¥—É —Ä–∞—Å–∞–º–∏
# –í –º–∏—Ä–µ TERRION –∫–æ–º–∞–Ω–¥–∏—Ä—ã —Ñ—Ä–∞–∫—Ü–∏–π —Å—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º–∏

var player_energy = 100  # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∫–æ–º–∞–Ω–¥–∏—Ä–∞
var enemy_energy = 100   # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
var player_crystals = 0  # –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
var enemy_crystals = 0   # –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –≤—Ä–∞–≥–∞
var energy_gain_per_tick = 10  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏
var energy_tick_time = 1.0     # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤

var player_base_hp = 100  # –ü—Ä–æ—á–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –∏–≥—Ä–æ–∫–∞
var enemy_base_hp = 100   # –ü—Ä–æ—á–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤—Ä–∞–≥–∞

var lanes = []
var player_spawners = []  # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–≥—Ä–æ–∫–∞
var enemy_spawners = []   # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤—Ä–∞–≥–∞

signal battle_finished(winner)

var unit_scene = preload("res://scenes/Unit.tscn")
var spawner_scene = preload("res://scenes/Spawner.tscn")
var battle_ui = null
var battle_started = false

var battle_start_time: float = 0.0  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–∏—Ç–≤—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫

var is_building_mode = false
var building_preview = null
var can_build_here = false
var building_cost = 30  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è

# –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è)
var territory_system = null

# –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
var ability_system: AbilitySystem = null

# –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å –∏ —Ñ—Ä–∞–∫—Ü–∏–π
var race_system: RaceSystem = null

# –°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
var effect_system = null

# –°–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤
var audio_system = null

# –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
var notification_system = null

# –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
var statistics_system = null

# –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
var race_ability_system = null

# –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –±–∞–ª–∞–Ω—Å–∞
var balance_metrics_system = null

# –°–∏—Å—Ç–µ–º–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
var ability_fatigue_system = null

# –°–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —é–Ω–∏—Ç–æ–≤
var unit_effectiveness_matrix = null

# –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
var system_manager = null

var battle_camera: Camera3D
var camera_speed = 20.0
var zoom_speed = 5.0
var is_mouse_dragging = false
var last_mouse_position = Vector2.ZERO

# –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–Ω–∏—Ç–∞–º–∏ –º—ã—à—å—é
var selected_units = []  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–º —é–Ω–∏—Ç—ã
var selection_indicator = null  # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±–æ—Ä–∞

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è drag&drop —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
var current_drag_building_type = ""
var is_dragging_building = false

# –°–∏—Å—Ç–µ–º–∞ –∞–ª—Ç–∞—Ä—è –≥–µ—Ä–æ—è
var hero_altar_active = false
var hero_summoned = false
var hero_summon_timer: Timer
var side_territories_captured = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –±–æ–∫–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π

var energy_timer = null
var enemy_decision_timer = null
var enemy_ai_timer = null
var enemy_current_soldiers = 0

# –§–ª–∞–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–∞–≤–Ω–∞ —é–Ω–∏—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–∏—Ç–≤—ã
var debug_spawn_test_units := false

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π (–ø–æ enum –≤ TerritorySystem.gd)
const ENERGY_MINE_TYPE = 0
const CRYSTAL_MINE_TYPE = 1
const VOID_CRYSTAL_TYPE = 2
const CENTER_TRIGGER_1_TYPE = 3
const CENTER_TRIGGER_2_TYPE = 4
const ANCIENT_TOWER_TYPE = 5
const ANCIENT_ALTAR_TYPE = 6

# –°–∏—Å—Ç–µ–º–∞ –∑–∞—Ä—è–¥–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
var collector_charges = {
	"player": 3,
	"enemy": 3
}
var collector_charge_cooldown = 120.0  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—á–∫–∏
var collector_charge_timers = {
	"player": 0.0,
	"enemy": 0.0
}

func _ready():
	Engine.time_scale = 0.5 # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤—Å–µ–π –∏–≥—Ä—ã –≤ 2 —Ä–∞–∑–∞
	print("‚è≥ –í—Å—è –∏–≥—Ä–∞ –∑–∞–º–µ–¥–ª–µ–Ω–∞ –≤ 2 —Ä–∞–∑–∞ (Engine.time_scale = 0.5)")
	print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BattleManager...")
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã
	setup_battle_systems()
	setup_ui_connections()
	setup_timers()
	
	# –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∞–≤–Ω - –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–∏—Ç–≤—ã
	
	print("‚úÖ BattleManager –≥–æ—Ç–æ–≤ –∫ –±–æ—é!")

func _process(delta):
	if not battle_started:
		return
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞—Ä—è–¥–æ–≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
	update_collector_charges(delta)

func setup_ui_connections():
	"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ UI"""
	print("üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ UI...")
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å drag&drop
	battle_ui = get_node_or_null("BattleUI")
	if battle_ui:
		print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å drag&drop –∞–∫—Ç–∏–≤–µ–Ω")
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)
		battle_ui.start_battle.connect(_on_start_battle)
		battle_ui.build_structure_drag.connect(_on_build_structure_drag)
		battle_ui.use_ability.connect(_on_use_ability)
		battle_ui.summon_hero.connect(_on_summon_altar_hero)
		
		# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
		if race_system:
			pass  # —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è use_race_ability —É–¥–∞–ª–µ–Ω–∞, —Å–∏–≥–Ω–∞–ª –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		
		print("üîó Drag&drop —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
	else:
		print("‚ùå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")

func setup_timers():
	"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤"""
	print("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤...")
	
	# –¢–∞–π–º–µ—Ä —ç–Ω–µ—Ä–≥–∏–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ init_energy_timer()
	# –¢–∞–π–º–µ—Ä AI —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ init_enemy_ai()
	
	# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
	print("‚úÖ –í—Å–µ —Ç–∞–π–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

func _input(event):
	if not battle_camera:
		return
		
	# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π –º—ã—à–∫–æ–π
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_RIGHT:
			is_mouse_dragging = event.pressed
			last_mouse_position = event.position
			
		# –ó—É–º –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏ - –ë–õ–ò–ñ–ï –¥–ª—è –ª—É—á—à–µ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
		elif event.button_index == MOUSE_BUTTON_WHEEL_UP:
			var new_pos = battle_camera.position
			new_pos.y = max(20, new_pos.y - zoom_speed)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
			new_pos.z = max(15, new_pos.z - zoom_speed * 0.8)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
			battle_camera.position = new_pos
			
		elif event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			var new_pos = battle_camera.position
			new_pos.y = min(80, new_pos.y + zoom_speed)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞—Ä—Ç—ã
			new_pos.z = min(50, new_pos.z + zoom_speed * 0.8)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞—Ä—Ç—ã
			battle_camera.position = new_pos
			
	elif event is InputEventMouseMotion and is_mouse_dragging:
		# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
		var delta = (event.position - last_mouse_position) * 0.1
		var new_pos = battle_camera.position
		new_pos.x -= delta.x * 0.1
		new_pos.z += delta.y * 0.1
		# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª—è
		new_pos.x = clamp(new_pos.x, -25, 25)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞—Ä—Ç—ã (40 —à–∏—Ä–∏–Ω–∞)
		new_pos.z = clamp(new_pos.z, -35, 35)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞—Ä—Ç—ã (60 –¥–ª–∏–Ω–∞)
		battle_camera.position = new_pos
		last_mouse_position = event.position

func setup_battle_systems():
	print("üöÄ –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä TERRION –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
	init_system_manager()  # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º
	init_enemy_ai()
	init_energy_timer()
	init_territory_system()  # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
	init_ability_system()
	init_race_system()
	# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ SystemManager
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	if race_system:
		print("[DEBUG] –§—Ä–∞–∫—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", race_system.player_race, " (", race_system.get_race_name(race_system.player_race), ")")
		print("[DEBUG] –§—Ä–∞–∫—Ü–∏—è –≤—Ä–∞–≥–∞:", race_system.enemy_race, " (", race_system.get_race_name(race_system.enemy_race), ")")

	# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è –±–æ—è (—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞)
	create_battlefield()

	# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ —Ñ—Ä–∞–∫—Ü–∏–π
	create_command_centers()

	# –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
	battle_started = false
	update_ui()
	
	print("‚ö° –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä –≥–æ—Ç–æ–≤! –ù–∞—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–æ–π—Å–∫.")

func create_battlefield():
	# –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–µ –±–æ—è - —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É —Ñ—Ä–∞–∫—Ü–∏—è–º–∏
	# –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–µ—Ç—ã (–∑–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞) - –£–í–ï–õ–ò–ß–ï–ù–ê –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
	var field = MeshInstance3D.new()
	var plane = PlaneMesh.new()
	plane.size = Vector2(40, 60)  # –£–≤–µ–ª–∏—á–∏–ª —Å 30x50 –¥–æ 40x60
	field.mesh = plane
	field.position = Vector3(0, 0, 0)
	var field_mat = StandardMaterial3D.new()
	field_mat.albedo_color = Color(0.3, 0.5, 0.3, 1.0)  # –ë–æ–ª–µ–µ —Ç–µ–º–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
	field_mat.roughness = 0.8
	field_mat.metallic = 0.1
	# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Å–µ—Ç–∫–∏
	field_mat.detail_enabled = true
	field_mat.detail_uv_layer = BaseMaterial3D.DETAIL_UV_1
	field.set_surface_override_material(0, field_mat)
	add_child(field)
	
	# –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
	create_grid_lines()

	# –ó–æ–Ω–∞ –∏–≥—Ä–æ–∫–∞ (—Å–∏–Ω—è—è, –≤–Ω–∏–∑—É –∫–∞—Ä—Ç—ã) - –£–í–ï–õ–ò–ß–ï–ù–ê
	var player_zone = MeshInstance3D.new()
	var player_plane = PlaneMesh.new()
	player_plane.size = Vector2(40, 25)  # –£–≤–µ–ª–∏—á–∏–ª —Å 30x20 –¥–æ 40x25
	player_zone.mesh = player_plane
	player_zone.position = Vector3(0, 0.01, 17.5)  # –°–º–µ—â–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É
	var player_zone_mat = StandardMaterial3D.new()
	player_zone_mat.albedo_color = Color(0.2, 0.6, 1.0, 0.5)  # –ë–æ–ª–µ–µ –≤–∏–¥–∏–º–∞—è —Å–∏–Ω—è—è –∑–æ–Ω–∞
	player_zone_mat.flags_transparent = true
	player_zone.set_surface_override_material(0, player_zone_mat)
	add_child(player_zone)

	# –ó–æ–Ω–∞ –≤—Ä–∞–≥–∞ (–∫—Ä–∞—Å–Ω–∞—è, –≤–≤–µ—Ä—Ö—É –∫–∞—Ä—Ç—ã) - –£–í–ï–õ–ò–ß–ï–ù–ê
	var enemy_zone = MeshInstance3D.new()
	var enemy_plane = PlaneMesh.new()
	enemy_plane.size = Vector2(40, 25)  # –£–≤–µ–ª–∏—á–∏–ª —Å 30x20 –¥–æ 40x25
	enemy_zone.mesh = enemy_plane
	enemy_zone.position = Vector3(0, 0.01, -17.5)  # –°–º–µ—â–µ–Ω–∏–µ –∫ –≤—Ä–∞–≥—É
	var enemy_zone_mat = StandardMaterial3D.new()
	enemy_zone_mat.albedo_color = Color(1.0, 0.2, 0.2, 0.5)  # –ë–æ–ª–µ–µ –≤–∏–¥–∏–º–∞—è –∫—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞
	enemy_zone_mat.flags_transparent = true
	enemy_zone.set_surface_override_material(0, enemy_zone_mat)
	add_child(enemy_zone)

	# –î–µ–º–∞—Ä–∫–∞—Ü–∏–æ–Ω–Ω–∞—è –ª–∏–Ω–∏—è (–≥—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π) - –£–í–ï–õ–ò–ß–ï–ù–ê
	var line = MeshInstance3D.new()
	var box = BoxMesh.new()
	box.size = Vector3(40, 0.2, 0.5)  # –£–≤–µ–ª–∏—á–∏–ª —à–∏—Ä–∏–Ω—É —Å 30 –¥–æ 40
	line.mesh = box
	line.position = Vector3(0, 0.1, 0)
	var line_mat = StandardMaterial3D.new()
	line_mat.albedo_color = Color(1, 1, 1, 1)  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
	line_mat.emission_enabled = true
	line_mat.emission = Color(0.5, 0.5, 0.5)  # –ë–æ–ª–µ–µ —è—Ä–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
	line_mat.emission_energy = 1.5
	line.set_surface_override_material(0, line_mat)
	add_child(line)

	# –ü–æ–¥–ø–∏—Å–∏ –∑–æ–Ω - –ë–û–õ–¨–®–ï –û–¢–î–ê–õ–ï–ù–´
	var player_zone_label = Label3D.new()
	player_zone_label.text = "–ó–û–ù–ê –ò–ì–†–û–ö–ê (–°–ò–ù–Ø–Ø)\n–Æ–Ω–∏—Ç—ã –∞—Ç–∞–∫—É—é—Ç –í–í–ï–†–• ‚Üë"
	player_zone_label.position = Vector3(0, 1.0, 27)  # –£–≤–µ–ª–∏—á–∏–ª —Å 22 –¥–æ 27
	player_zone_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	player_zone_label.font_size = 64  # –£–≤–µ–ª–∏—á–∏–ª —Å 48 –¥–æ 64
	player_zone_label.modulate = Color(0.2, 0.6, 1, 1)
	player_zone_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
	player_zone_label.outline_size = 8
	player_zone_label.outline_modulate = Color.BLACK
	add_child(player_zone_label)

	var enemy_zone_label = Label3D.new()
	enemy_zone_label.text = "–ó–û–ù–ê –í–†–ê–ì–ê (–ö–†–ê–°–ù–ê–Ø)\n–Æ–Ω–∏—Ç—ã –∞—Ç–∞–∫—É—é—Ç –í–ù–ò–ó ‚Üì"
	enemy_zone_label.position = Vector3(0, 1.0, -27)  # –£–≤–µ–ª–∏—á–∏–ª —Å -22 –¥–æ -27
	enemy_zone_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	enemy_zone_label.font_size = 64  # –£–≤–µ–ª–∏—á–∏–ª —Å 48 –¥–æ 64
	enemy_zone_label.modulate = Color(1, 0.2, 0.2, 1)
	enemy_zone_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
	enemy_zone_label.outline_size = 8
	enemy_zone_label.outline_modulate = Color.BLACK
	add_child(enemy_zone_label)

func create_grid_lines():
	# –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—è
	var grid_container = Node3D.new()
	grid_container.name = "GridLines"
	add_child(grid_container)
	
	var grid_material = StandardMaterial3D.new()
	grid_material.albedo_color = Color(0.6, 0.6, 0.6, 0.5)
	grid_material.flags_transparent = true
	
	# –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
	for x in range(-20, 21, 5):
		var line = MeshInstance3D.new()
		var box = BoxMesh.new()
		box.size = Vector3(0.1, 0.05, 60)
		line.mesh = box
		line.position = Vector3(x, 0.02, 0)
		line.material_override = grid_material
		grid_container.add_child(line)
	
	# –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
	for z in range(-30, 31, 5):
		var line = MeshInstance3D.new()
		var box = BoxMesh.new()
		box.size = Vector3(40, 0.05, 0.1)
		line.mesh = box
		line.position = Vector3(0, 0.02, z)
		line.material_override = grid_material
		grid_container.add_child(line)

func create_command_centers():
	# –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã —Ñ—Ä–∞–∫—Ü–∏–π
	# –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∏–≥—Ä–æ–∫–∞ (—Å–∏–Ω—è—è —Ñ—Ä–∞–∫—Ü–∏—è) - –í–ù–ò–ó–£ –∫–∞—Ä—Ç—ã - –£–ú–ï–ù–¨–®–ï–ù–ù–´–ô
	var player_core = MeshInstance3D.new()
	var player_sphere = SphereMesh.new()
	player_sphere.radius = 2.0  # –£–í–ï–õ–ò–ß–ï–ù–û —Å 0.8 –¥–æ 2.0
	player_sphere.height = 4.0  # –£–í–ï–õ–ò–ß–ï–ù–û —Å 1.6 –¥–æ 4.0
	player_core.mesh = player_sphere
	player_core.position = Vector3(0, 2.0, 28)  # –ü–æ–¥–Ω—è–ª –≤—ã—à–µ
	player_core.name = "PlayerCoreVisual"
	var player_mat = StandardMaterial3D.new()
	player_mat.albedo_color = Color(0.2, 0.6, 1, 1)  # –°–ò–ù–ò–ô = –ò–ì–†–û–ö
	player_mat.emission_enabled = true
	player_mat.emission = Color(0.1, 0.3, 0.5)  # –°–∏–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ
	player_core.set_surface_override_material(0, player_mat)
	add_child(player_core)

	# –ü–æ–¥–ø–∏—Å—å –¥–ª—è —è–¥—Ä–∞ –∏–≥—Ä–æ–∫–∞ - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø
	var player_label = Label3D.new()
	player_label.text = "–ò–ì–†–û–ö"
	player_label.position = Vector3(0, 4.5, 28)  # –ü–æ–¥–Ω—è–ª –≤—ã—à–µ
	player_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	player_label.font_size = 64  # –£–í–ï–õ–ò–ß–ï–ù–û —Å 48 –¥–æ 64
	player_label.modulate = Color(0.2, 0.6, 1, 1)
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
	player_label.outline_size = 10  # –£–í–ï–õ–ò–ß–ï–ù–û —Å 6 –¥–æ 10
	player_label.outline_modulate = Color.BLACK
	add_child(player_label)

	# –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–∫—Ä–∞—Å–Ω–∞—è —Ñ—Ä–∞–∫—Ü–∏—è) - –í–í–ï–†–•–£ –∫–∞—Ä—Ç—ã - –£–ú–ï–ù–¨–®–ï–ù–ù–´–ô
	var enemy_core = MeshInstance3D.new()
	var enemy_sphere = SphereMesh.new()
	enemy_sphere.radius = 2.0  # –£–í–ï–õ–ò–ß–ï–ù–û —Å 0.8 –¥–æ 2.0
	enemy_sphere.height = 4.0  # –£–í–ï–õ–ò–ß–ï–ù–û —Å 1.6 –¥–æ 4.0
	enemy_core.mesh = enemy_sphere
	enemy_core.position = Vector3(0, 2.0, -28)  # –ü–æ–¥–Ω—è–ª –≤—ã—à–µ
	enemy_core.name = "EnemyCoreVisual"
	var enemy_mat = StandardMaterial3D.new()
	enemy_mat.albedo_color = Color(1, 0.2, 0.2, 1)  # –ö–†–ê–°–ù–´–ô = –í–†–ê–ì
	enemy_mat.emission_enabled = true
	enemy_mat.emission = Color(0.5, 0.1, 0.1)  # –ö—Ä–∞—Å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
	enemy_core.set_surface_override_material(0, enemy_mat)
	add_child(enemy_core)

	# –ü–æ–¥–ø–∏—Å—å –¥–ª—è —è–¥—Ä–∞ –≤—Ä–∞–≥–∞ - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø
	var enemy_label = Label3D.new()
	enemy_label.text = "–í–†–ê–ì"
	enemy_label.position = Vector3(0, 4.5, -28)  # –ü–æ–¥–Ω—è–ª –≤—ã—à–µ
	enemy_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	enemy_label.font_size = 64  # –£–í–ï–õ–ò–ß–ï–ù–û —Å 48 –¥–æ 64
	enemy_label.modulate = Color(1, 0.2, 0.2, 1)
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
	enemy_label.outline_size = 10  # –£–í–ï–õ–ò–ß–ï–ù–û —Å 6 –¥–æ 10
	enemy_label.outline_modulate = Color.BLACK
	add_child(enemy_label)

	# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π - –û–ë–ù–û–í–õ–ï–ù–´ –ü–û–ó–ò–¶–ò–ò
	create_start_spawner("player", Vector3(-5, 0, 23))   # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–ª–∏–∂–µ –∫ —è–¥—Ä—É –∏–≥—Ä–æ–∫–∞
	create_start_spawner("enemy", Vector3(5, 0, -23))    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–ª–∏–∂–µ –∫ —è–¥—Ä—É –≤—Ä–∞–≥–∞

func init_energy_timer():
	# –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
	energy_timer = Timer.new()
	energy_timer.wait_time = energy_tick_time
	energy_timer.autostart = true
	energy_timer.timeout.connect(_on_energy_timer)
	add_child(energy_timer)

func init_territory_system():
	# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ load()
	var TerritorySystemClass = load("res://scripts/TerritorySystem.gd")
	territory_system = TerritorySystemClass.new()
	territory_system.battle_manager = self
	add_child(territory_system)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
	# –£–¥–∞–ª–µ–Ω–æ: territory_system.territory_captured.connect(_on_territory_captured)
	# –£–¥–∞–ª–µ–Ω–æ: territory_system.territory_depleted.connect(_on_territory_depleted)
	# –£–±–∏—Ä–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–∏–≥–Ω–∞–ª—É territory_regenerated
	
	print("üè∞ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

func init_ability_system():
	# –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	ability_system = AbilitySystem.new()
	ability_system.battle_manager = self
	add_child(ability_system)
	print("‚ú® –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

func init_race_system():
	# –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å
	race_system = RaceSystem.new()
	race_system.battle_manager = self
	add_child(race_system)
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	race_system.set_player_race(RaceSystem.Race.HUMANS)
	race_system.set_enemy_race(RaceSystem.Race.HUMANS)  # –¢–µ–ø–µ—Ä—å –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî –ª—é–¥–∏
	
	print("üèõÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

func init_system_manager():
	# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	print("üîß SystemManager –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
	init_systems_directly()

func init_systems_directly():
	# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –±–µ–∑ SystemManager
	print("üîß –ü—Ä—è–º–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º...")
	
	# EffectSystem
	var effect_script = load("res://scripts/EffectSystem.gd")
	if effect_script:
		effect_system = effect_script.new()
		effect_system.name = "EffectSystem"
		effect_system.battle_manager = self
		add_child(effect_system)
		print("‚úÖ EffectSystem –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	# AudioSystem  
	var audio_script = load("res://scripts/AudioSystem.gd")
	if audio_script:
		audio_system = audio_script.new()
		audio_system.name = "AudioSystem"
		audio_system.battle_manager = self
		add_child(audio_system)
		print("‚úÖ AudioSystem –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	# NotificationSystem
	var notification_script = load("res://scripts/NotificationSystem.gd")
	if notification_script:
		notification_system = notification_script.new()
		notification_system.name = "NotificationSystem"
		notification_system.battle_manager = self
		add_child(notification_system)
		print("‚úÖ NotificationSystem –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	# StatisticsSystem
	var statistics_script = load("res://scripts/StatisticsSystem.gd")
	if statistics_script:
		statistics_system = statistics_script.new()
		statistics_system.name = "StatisticsSystem"
		statistics_system.battle_manager = self
		add_child(statistics_system)
		print("‚úÖ StatisticsSystem –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	# RaceAbilitySystem
	var race_ability_script = load("res://scripts/RaceAbilitySystem.gd")
	if race_ability_script:
		race_ability_system = race_ability_script.new()
		race_ability_system.name = "RaceAbilitySystem"
		race_ability_system.set_battle_manager(self)
		add_child(race_ability_system)
		print("‚úÖ RaceAbilitySystem –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	# BalanceMetricsSystem
	var balance_metrics_script = load("res://scripts/balance_metrics_system.gd")
	if balance_metrics_script:
		balance_metrics_system = balance_metrics_script.new()
		balance_metrics_system.name = "BalanceMetricsSystem"
		add_child(balance_metrics_system)
		print("‚úÖ BalanceMetricsSystem –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	# AbilityFatigueSystem
	var ability_fatigue_script = load("res://scripts/ability_fatigue_system.gd")
	if ability_fatigue_script:
		ability_fatigue_system = ability_fatigue_script.new()
		ability_fatigue_system.name = "AbilityFatigueSystem"
		add_child(ability_fatigue_system)
		print("‚úÖ AbilityFatigueSystem –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	# UnitEffectivenessMatrix
	var unit_effectiveness_script = load("res://scripts/unit_effectiveness_matrix.gd")
	if unit_effectiveness_script:
		unit_effectiveness_matrix = unit_effectiveness_script.new()
		unit_effectiveness_matrix.name = "UnitEffectivenessMatrix"
		add_child(unit_effectiveness_matrix)
		print("‚úÖ UnitEffectivenessMatrix –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	print("üîß –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é")

func init_effect_system():
	# –°–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ SystemManager
	print("‚ú® EffectSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ SystemManager")

func init_audio_system():
	# –ê—É–¥–∏–æ—Å–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ SystemManager
	print("üîä AudioSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ SystemManager")

func init_notification_system():
	# –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ SystemManager
	print("üì¢ NotificationSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ SystemManager")

func init_statistics_system():
	# –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ SystemManager
	print("üìä StatisticsSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ SystemManager")

func create_cores_and_spawners():
	# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —è–¥—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
	for node in get_children():
		if node.name == "PlayerCore" or node.name == "EnemyCore":
			node.queue_free()

	# –°–æ–∑–¥–∞—ë–º —è–¥—Ä–æ –∏–≥—Ä–æ–∫–∞ (—Å–∏–Ω–µ–µ) - –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
	var player_core_scene = preload("res://scenes/Core.tscn")
	var player_core = player_core_scene.instantiate()
	player_core.name = "PlayerCore"
	player_core.position = Vector3(0, 0.5, 20)  # –ò–≥—Ä–æ–∫ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å MeshInstance3D
	if not player_core.has_node("MeshInstance3D"):
		var mesh = MeshInstance3D.new()
		mesh.mesh = SphereMesh.new()
		var mat = StandardMaterial3D.new()
		mat.albedo_color = Color(0.2, 0.6, 1, 1)
		mesh.set_surface_override_material(0, mat)
		player_core.add_child(mesh)
	add_child(player_core)

	# –°–æ–∑–¥–∞—ë–º —è–¥—Ä–æ –≤—Ä–∞–≥–∞ (–∫—Ä–∞—Å–Ω–æ–µ) - –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
	var enemy_core_scene = preload("res://scenes/Core.tscn")
	var enemy_core = enemy_core_scene.instantiate()
	enemy_core.name = "EnemyCore"
	enemy_core.position = Vector3(0, 0.5, -20)  # –í—Ä–∞–≥ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
	if not enemy_core.has_node("MeshInstance3D"):
		var mesh = MeshInstance3D.new()
		mesh.mesh = SphereMesh.new()
		var mat = StandardMaterial3D.new()
		mat.albedo_color = Color(1, 0.2, 0.2, 1)
		mesh.set_surface_override_material(0, mat)
		enemy_core.add_child(mesh)
	add_child(enemy_core)

	# –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–ø–∞–≤–Ω–µ—Ä—ã –∏–≥—Ä–æ–∫–∞ –∏ –≤—Ä–∞–≥–∞
	create_start_spawner("player", Vector3(-4, 0, 15))   # –ò–≥—Ä–æ–∫ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
	create_start_spawner("enemy", Vector3(4, 0, -15))    # –í—Ä–∞–≥ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞

func create_start_spawner(team: String, position: Vector3):
	var spawner = spawner_scene.instantiate()
	spawner.position = position
	spawner.name = team.capitalize() + "StartSpawner"
	spawner.set("team", team)
	add_child(spawner)
	spawner.add_to_group("spawners")

func _on_start_battle():
	print("üöÄ === BattleManager –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª start_battle ===")
	print("1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º battle_started = true")
	battle_started = true
	battle_start_time = Time.get_unix_time_from_system()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±–∏—Ç–≤—ã
	
	print("2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –±–∏—Ç–≤—ã...")
	# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –±–∏—Ç–≤—ã
	if notification_system:
		notification_system.show_battle_start()
	
	print("3. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
	# –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	if statistics_system:
		statistics_system.start_battle()
	
	print("4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã —Å–ø–∞–≤–Ω–µ—Ä–æ–≤...")
	# –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã —Å–ø–∞–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—è
	var spawners = get_tree().get_nodes_in_group("spawners")
	print("üìç –ù–∞–π–¥–µ–Ω–æ —Å–ø–∞–≤–Ω–µ—Ä–æ–≤: ", spawners.size())
	for spawner in spawners:
		if spawner.has_node("SpawnTimer"):
			spawner.get_node("SpawnTimer").autostart = true
			spawner.get_node("SpawnTimer").start()
			print("‚è∞ –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä —Å–ø–∞–≤–Ω–µ—Ä–∞: ", spawner.name)
		else:
			print("‚ùå –°–ø–∞–≤–Ω–µ—Ä –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞: ", spawner.name)
	
	print("5. –ó–∞–ø—É—Å–∫–∞–µ–º AI –≤—Ä–∞–≥–∞...")
	# –ó–∞–ø—É—Å–∫–∞–µ–º AI –≤—Ä–∞–≥–∞
	if enemy_decision_timer:
		enemy_decision_timer.start()
		print("ü§ñ AI —Ç–∞–π–º–µ—Ä —Ä–µ—à–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
	if enemy_ai_timer:
		enemy_ai_timer.start()
		print("ü§ñ AI —Ç–∞–π–º–µ—Ä —Å–ø–∞–≤–Ω–∞ –∑–∞–ø—É—â–µ–Ω")
	
	if debug_spawn_test_units:
		print("6. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —é–Ω–∏—Ç–æ–≤...")
		# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —é–Ω–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
		spawn_unit_at_pos("player", Vector3(-2, 0, 12), "soldier")  # –ò–≥—Ä–æ–∫ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
		spawn_unit_at_pos("enemy", Vector3(2, 0, -12), "soldier")   # –í—Ä–∞–≥ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
	else:
		print("6. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–∞–≤–Ω —é–Ω–∏—Ç–æ–≤ (debug_spawn_test_units = false)")
	
	print("7. –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤...")
	# –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–∏—Ç–≤—ã
	spawn_initial_collectors()
	
	print("üéÆ === –ë–ò–¢–í–ê –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–ê! ===")

func _on_energy_timer():
	if not battle_started:
		return
	player_energy += energy_gain_per_tick
	enemy_energy += energy_gain_per_tick
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)
	
	# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
	check_victory_conditions()

func add_resources(team: String, energy_amount: int, crystal_amount: int):
	"""–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∫–æ–º–∞–Ω–¥–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞—Ö)"""
	if team == "player":
		player_energy += energy_amount
		player_crystals += crystal_amount
		print("‚ö° –ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª —Ä–µ—Å—É—Ä—Å—ã: +", energy_amount, " —ç–Ω–µ—Ä–≥–∏–∏, +", crystal_amount, " –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤")
	elif team == "enemy":
		enemy_energy += energy_amount
		enemy_crystals += crystal_amount
		print("‚ö° –í—Ä–∞–≥ –ø–æ–ª—É—á–∏–ª —Ä–µ—Å—É—Ä—Å—ã: +", energy_amount, " —ç–Ω–µ—Ä–≥–∏–∏, +", crystal_amount, " –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤")
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	update_ui()

# –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ü–û–ë–ï–î–´
func check_victory_conditions():
	if not battle_started:
		return
		
	# –£—Å–ª–æ–≤–∏–µ 1: –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Ä–∞–∂–µ—Å–∫–æ–≥–æ —è–¥—Ä–∞ (HP = 0)
	if enemy_base_hp <= 0:
		finish_battle("player")
		return
	elif player_base_hp <= 0:
		finish_battle("enemy")
		return
	
	# –£—Å–ª–æ–≤–∏–µ 2: –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
	var player_spawner_count = get_team_spawner_count("player")
	var enemy_spawner_count = get_team_spawner_count("enemy")
	
	# –ò–≥—Ä–æ–∫ –ø–æ–±–µ–∂–¥–∞–µ—Ç –µ—Å–ª–∏ —É –≤—Ä–∞–≥–∞ –Ω–µ—Ç —è–¥—Ä–∞ –∏–ª–∏ –∑–¥–∞–Ω–∏–π
	if enemy_base_hp <= 0 or (enemy_spawner_count == 0 and player_spawner_count > 0):
		finish_battle("player")
		return
	
	# –í—Ä–∞–≥ –ø–æ–±–µ–∂–¥–∞–µ—Ç –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç —è–¥—Ä–∞ –∏–ª–∏ –∑–¥–∞–Ω–∏–π
	if player_base_hp <= 0 or (player_spawner_count == 0 and enemy_spawner_count > 0):
		finish_battle("enemy")
		return

func get_team_unit_count(team: String) -> int:
	var count = 0
	var units = get_tree().get_nodes_in_group("units")
	for unit in units:
		if unit.team == team and unit.health > 0:
			count += 1  # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∂–∏–≤—ã—Ö —é–Ω–∏—Ç–æ–≤
	return count

func get_team_spawner_count(team: String) -> int:
	var count = 0
	var all_spawners = get_tree().get_nodes_in_group("spawners")
	for spawner in all_spawners:
		if spawner.team == team and spawner.health > 0:
			count += 1  # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
	return count

# –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è spawn_unit_at_pos()

# –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –õ–û–ì–ò–ö–£ –ê–¢–ê–ö–ò –Ø–î–†–ê
func unit_reached_base(unit):
	# –Æ–Ω–∏—Ç—ã –Ω–∞–Ω–æ—Å—è—Ç —É—Ä–æ–Ω –≤—Ä–∞–∂–µ—Å–∫–æ–º—É —è–¥—Ä—É –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
	if unit.team == "player":
		enemy_base_hp -= unit.damage
		print("üí• ", unit.unit_type, " –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–∂–µ—Å–∫–æ–µ —è–¥—Ä–æ! –£—Ä–æ–Ω: ", unit.damage, " HP —è–¥—Ä–∞: ", enemy_base_hp)
		if enemy_base_hp <= 0:
			print("üèÜ –í—Ä–∞–∂–µ—Å–∫–æ–µ —è–¥—Ä–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ!")
	elif unit.team == "enemy":
		player_base_hp -= unit.damage
		print("üí• –í—Ä–∞–∂–µ—Å–∫–∏–π ", unit.unit_type, " –∞—Ç–∞–∫—É–µ—Ç –≤–∞—à–µ —è–¥—Ä–æ! –£—Ä–æ–Ω: ", unit.damage, " HP —è–¥—Ä–∞: ", player_base_hp)
		if player_base_hp <= 0:
			print("üíÄ –í–∞—à–µ —è–¥—Ä–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ!")
	
	# –û–±–Ω–æ–≤–ª—è–µ–º UI
	update_ui()
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏ —è–¥—Ä–∞
	call_deferred("check_victory_conditions")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
func finish_battle(winner):
	battle_finished.emit(winner)
	print("–ë–∏—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ", winner)
	
	# –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∏—Ç–≤—ã
	if statistics_system:
		statistics_system.end_battle(winner)
	
	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–∏—Ç–≤—ã –≤ —Å–∏—Å—Ç–µ–º–µ –º–µ—Ç—Ä–∏–∫ –±–∞–ª–∞–Ω—Å–∞
	if balance_metrics_system:
		var battle_duration = Time.get_unix_time_from_system() - battle_start_time if battle_started else 0.0
		var player_units_remaining = get_team_unit_count("player")
		var enemy_units_remaining = get_team_unit_count("enemy")
		balance_metrics_system.register_battle_end(winner, battle_duration, player_units_remaining, enemy_units_remaining)
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ/–ø–æ—Ä–∞–∂–µ–Ω–∏–∏
	if notification_system:
		notification_system.show_victory(winner)
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
	show_game_over_screen(winner)

# –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
func show_game_over_screen(winner: String):
	print("üéÆ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã...")
	
	# –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
	var game_over_scene = preload("res://scenes/GameOver.tscn")
	if game_over_scene:
		var game_over_instance = game_over_scene.instantiate()
		add_child(game_over_instance)
		
		# –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
		game_over_instance.set_winner(winner)
		
		# –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–∏—Å—Ç–µ–º
		if statistics_system:
			game_over_instance.set_battle_stats(statistics_system.battle_stats)
		
		if balance_metrics_system:
			game_over_instance.set_balance_report(balance_metrics_system.get_balance_report())
		
		print("‚úÖ –≠–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω")
	else:
		print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω—É GameOver.tscn")

# TODO: –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É UI, –ø–æ–±–µ–¥—ã, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ –º–µ—Ä–µ —Ä–∞–∑–≤–∏—Ç–∏—è 

func _on_build_pressed():
	if player_energy >= building_cost:
		is_building_mode = true
		create_building_preview()

func create_building_preview():
	if building_preview:
		building_preview.queue_free()
	var preview = unit_scene.instantiate()
	preview.modulate = Color(0.5, 1, 0.5, 0.5) # –∑–µ–ª—ë–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	preview.name = "BuildingPreview"
	preview.set_physics_process(false)
	add_child(preview)
	building_preview = preview

func _unhandled_input(event):
	if is_building_mode:
		if event is InputEventMouseMotion or event is InputEventScreenDrag:
			var pos = get_mouse_map_position(event.position)
			if building_preview:
				building_preview.global_position = pos
				can_build_here = is_valid_build_position(pos)
				building_preview.modulate = Color(0.5, 1, 0.5, 0.5) if can_build_here else Color(1, 0.3, 0.3, 0.5)
		elif event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
			if event.pressed:
				pass
			else:
				if can_build_here and player_energy >= building_cost:
					place_spawner("player", "spawner", building_preview.global_position)
					player_energy -= building_cost
					update_ui()
					building_preview.queue_free()
					building_preview = null
					is_building_mode = false
				else:
					pass
	else:
		if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
			if battle_started and player_energy >= 30:
				var pos = get_mouse_map_position(event.position)
				if is_valid_build_position(pos):
					place_spawner("player", "spawner", pos)
					player_energy -= 30
					update_ui()
	
	# –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è —Ä–∞—Å–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_RIGHT and event.pressed:
		if battle_started and race_ability_system:
			var pos = get_mouse_map_position(event.position)
			# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≠–ú–ò-–∏–º–ø—É–ª—å—Å –∫–∞–∫ –±–∞–∑–æ–≤—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ–∂–∏—Ç–∏
			if race_ability_system.can_use_ability("player", "emp_pulse"):
				race_ability_system.use_ability("player", "emp_pulse", pos)
				update_ui()
			else:
				print("‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≠–ú–ò-–∏–º–ø—É–ª—å—Å")

func get_mouse_map_position(screen_pos):
	var camera_to_use = battle_camera if battle_camera else get_viewport().get_camera_3d()
	if not camera_to_use:
		print("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
		return Vector3.ZERO

	var from = camera_to_use.project_ray_origin(screen_pos)
	var direction = camera_to_use.project_ray_normal(screen_pos)
	var plane_y = 0.0
	if direction.y == 0:
		return Vector3.ZERO  # –õ—É—á –ø–∞—Ä–∞–ª–ª–µ–ª–µ–Ω –ø–ª–æ—Å–∫–æ—Å—Ç–∏
	var t = (plane_y - from.y) / direction.y
	if t < 0:
		return Vector3.ZERO  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–∑–∞–¥–∏ –∫–∞–º–µ—Ä—ã
	var pos = from + direction * t
	print("[DEBUG] get_mouse_map_position: screen_pos=", screen_pos, " ‚Üí pos=", pos)
	return pos

func get_mouse_world_position() -> Vector3:
	var mouse_pos = get_viewport().get_mouse_position()
	return get_mouse_map_position(mouse_pos)

func is_valid_build_position(pos: Vector3) -> bool:
	var map_width = 40.0
	var map_height = 60.0
	var map_half_height = map_height / 2.0  # 30 –µ–¥–∏–Ω–∏—Ü –∫–∞–∂–¥–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞
	
	if pos.z < 0:
		print("[DEBUG] –û–¢–ö–ê–ó: pos.z < 0 (", pos.z, ") ‚Äî –Ω–µ–ª—å–∑—è —Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ")
		return false
	if pos.x < -map_width/2 or pos.x > map_width/2:
		print("[DEBUG] –û–¢–ö–ê–ó: pos.x –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü (", pos.x, ")")
		return false
	if pos.z > map_half_height or pos.z < 0:
		print("[DEBUG] –û–¢–ö–ê–ó: pos.z –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü (", pos.z, ")")
		return false
	if territory_system:
		var territories = territory_system.get_territory_info()
		for territory in territories:
			var distance = pos.distance_to(territory.position)
			if distance <= territory.control_radius:
				if territory.type == VOID_CRYSTAL_TYPE:
					continue
				else:
					print("[DEBUG] –û–¢–ö–ê–ó: –ø–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ (", territory.type, ")")
					return false
	var all_spawners = get_tree().get_nodes_in_group("spawners")
	for s in all_spawners:
		if s.global_position.distance_to(pos) < 1.5:
			print("[DEBUG] –û–¢–ö–ê–ó: —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –¥—Ä—É–≥–æ–º—É –∑–¥–∞–Ω–∏—é (", s.global_position, ")")
			return false
	print("[DEBUG] –ü–û–ó–ò–¶–ò–Ø –í–ê–õ–ò–î–ù–ê –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:", pos)
	return true

func is_valid_enemy_build_position(pos: Vector3) -> bool:
	# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Ä–∞–≥–∞
	# –í—Ä–∞–≥ –º–æ–∂–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–µ –∫–∞—Ä—Ç—ã (z < 0)
	if pos.z > -5.0:
		return false
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –¥—Ä—É–≥–∏—Ö –∑–¥–∞–Ω–∏–π
	var min_distance = 3.0
	var spawners = get_tree().get_nodes_in_group("spawners")
	for spawner in spawners:
		if spawner.global_position.distance_to(pos) < min_distance:
			return false
	
	return true

# –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∞–≤–Ω —é–Ω–∏—Ç–∞ - –±–µ–∑ drag&drop
func _on_spawn_unit_simple(unit_type: String):
	print("‚öîÔ∏è === –ü–†–û–°–¢–û–ô –°–ü–ê–í–ù –Æ–ù–ò–¢–ê ===")
	print("1. –¢–∏–ø —é–Ω–∏—Ç–∞: ", unit_type)
	print("2. –ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å: ", battle_started)
	
	if not battle_started:
		print("‚ùå –ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!")
		return
	
	var energy_cost = get_unit_cost(unit_type)
	var crystal_cost = get_unit_crystal_cost(unit_type)
	
	print("3. –°—Ç–æ–∏–º–æ—Å—Ç—å: ", energy_cost, " —ç–Ω–µ—Ä–≥–∏–∏, ", crystal_cost, " –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤")
	print("4. –†–µ—Å—É—Ä—Å—ã –∏–≥—Ä–æ–∫–∞: ", player_energy, " —ç–Ω–µ—Ä–≥–∏–∏, ", player_crystals, " –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤")
	
	if player_energy < energy_cost or player_crystals < crystal_cost:
		print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è ", unit_type, "!")
		return
	
	# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –∫–∞—Ä—Ç—ã
	var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, randf_range(10.0, 18.0))
	
	# –°–æ–∑–¥–∞–µ–º —é–Ω–∏—Ç–∞
	spawn_unit_at_pos("player", spawn_pos, unit_type)
	
	# –°–Ω–∏–º–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
	player_energy -= energy_cost
	player_crystals -= crystal_cost
	
	print("‚úÖ ", unit_type, " —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ", spawn_pos)
	print("üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ", energy_cost, "‚ö° + ", crystal_cost, "üíé")
	print("üí∞ –û—Å—Ç–∞–ª–æ—Å—å: ", player_energy, "‚ö° + ", player_crystals, "üíé")
	update_ui()

# Drag&drop: —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∑–¥–∞–Ω–∏—è (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ drag_type –∏–∑ UI)
func _on_build_structure_drag(screen_pos):
	print("[DEBUG] DRAG & DROP –ó–î–ê–ù–ò–Ø: drag_type=", battle_ui.drag_type, " screen_pos=", screen_pos)
	print("üèóÔ∏è === DRAG & DROP –ó–î–ê–ù–ò–Ø ===")
	print("1. –ü–æ–∑–∏—Ü–∏—è —ç–∫—Ä–∞–Ω–∞: ", screen_pos)
	print("2. –ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å: ", battle_started)
	if not battle_started:
		print("‚ùå –ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!")
		return
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–¥–∞–Ω–∏—è –ø–æ drag_type –∏–∑ BattleUI
	var building_type = "tower"
	if battle_ui and battle_ui.drag_type != "":
		building_type = battle_ui.drag_type
	print("[DEBUG] building_type=", building_type)
	# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
	var building_cost_local = get_structure_cost(building_type)
	var crystal_cost = get_structure_crystal_cost(building_type)
	print("3. –¢–∏–ø –∑–¥–∞–Ω–∏—è: ", building_type)
	print("4. –°—Ç–æ–∏–º–æ—Å—Ç—å: ", building_cost_local, " —ç–Ω–µ—Ä–≥–∏–∏, ", crystal_cost, " –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤")
	print("5. –£ –∏–≥—Ä–æ–∫–∞: ", player_energy, " —ç–Ω–µ—Ä–≥–∏–∏, ", player_crystals, " –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤")
	if player_energy < building_cost_local or player_crystals < crystal_cost:
		print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ ", building_type, "!")
		return
	var pos = get_mouse_map_position(screen_pos)
	print("6. 3D –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ: ", pos)
	if pos == Vector3.ZERO:
		print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –∫–∞—Ä—Ç–µ!")
		return
	if is_valid_build_position(pos):
		print("‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞, —Å—Ç—Ä–æ–∏–º ", building_type, "...")
		place_spawner("player", building_type, pos)
		player_energy -= building_cost_local
		player_crystals -= crystal_cost
		update_ui()
		print("‚úÖ ", building_type, " –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
		if notification_system:
			notification_system.show_notification("–ü–æ—Å—Ç—Ä–æ–µ–Ω–æ: " + building_type, "build_success")
	else:
		print("‚ùå –ù–µ–ª—å–∑—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å ", building_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", pos)
		print("   –ü—Ä–∏—á–∏–Ω–∞: –≤–Ω–µ –∏–≥—Ä–æ–≤–æ–π –∑–æ–Ω—ã –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –¥—Ä—É–≥–æ–º—É –∑–¥–∞–Ω–∏—é")

func is_valid_unit_position(pos: Vector3) -> bool:
	var map_width = 40.0
	var map_height = 60.0
	var map_half_height = map_height / 2.0  # 30 –µ–¥–∏–Ω–∏—Ü –∫–∞–∂–¥–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞
	
	# –ò–≥—Ä–æ–∫ —Ä–∞–∑–º–µ—â–∞–µ—Ç —é–Ω–∏—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ Z)
	if pos.z < 0:
		return false
	if pos.x < -map_width/2 or pos.x > map_width/2:
		return false
	if pos.z > map_half_height or pos.z < 0:
		return false
	var all_spawners = get_tree().get_nodes_in_group("spawners")
	for s in all_spawners:
		if s.global_position.distance_to(pos) < 2.5:
			return false
	return true

func spawn_unit_at_pos(team, pos, unit_type="warrior"):
	if not can_spawn_unit(team, unit_type):
		print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!")
		return
	
	var energy_cost = get_unit_cost(unit_type)
	var crystal_cost = get_unit_crystal_cost(unit_type)
	
	print("üî® –°–æ–∑–¥–∞–µ–º —é–Ω–∏—Ç–∞: ", team, " ", unit_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", pos)
	var unit = unit_scene.instantiate()
	add_child(unit)
	unit.team = team
	unit.unit_type = unit_type
	unit.global_position = pos
	# –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –Æ–Ω–∏—Ç—ã –∏–¥—É—Ç –∫ –≤—Ä–∞–∂–µ—Å–∫–æ–º—É —è–¥—Ä—É
	if team == "player":
		unit.target_pos = Vector3(0, 0, -28)  # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–∂–µ—Å–∫–æ–µ —è–¥—Ä–æ (—Å–µ–≤–µ—Ä)
		player_energy -= energy_cost
		player_crystals -= crystal_cost
	else:
		unit.target_pos = Vector3(0, 0, 28)   # –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç —è–¥—Ä–æ –∏–≥—Ä–æ–∫–∞ (—é–≥)
		enemy_energy -= energy_cost
		enemy_crystals -= crystal_cost
	unit.battle_manager = self
	unit.add_to_group("units")
	
	# –≠—Ñ—Ñ–µ–∫—Ç —Å–ø–∞–≤–Ω–∞ —é–Ω–∏—Ç–∞
	if effect_system:
		effect_system.create_spawn_effect(pos, team)
	
	# –ó–≤—É–∫ —Å–ø–∞–≤–Ω–∞ —é–Ω–∏—Ç–∞
	if audio_system:
		audio_system.play_unit_spawn_sound(pos)
	
	# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —é–Ω–∏—Ç–∞
	if notification_system:
		notification_system.show_unit_spawned(unit_type, team)
	
	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
	if statistics_system:
		statistics_system.register_unit_spawned(team, unit_type)
	
	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —é–Ω–∏—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –º–µ—Ç—Ä–∏–∫ –±–∞–ª–∞–Ω—Å–∞
	if balance_metrics_system:
		balance_metrics_system.register_unit_spawn(team, unit_type, energy_cost)
	
	print("‚úÖ –Æ–Ω–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ", unit.name, " –∫–æ–º–∞–Ω–¥–∞: ", unit.team)
	print("üéØ –¶–µ–ª—å —é–Ω–∏—Ç–∞: ", unit.target_pos)
	var units_in_group = get_tree().get_nodes_in_group("units")
	print("üìä –í—Å–µ–≥–æ —é–Ω–∏—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: ", units_in_group.size())
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —é–Ω–∏—Ç–∞
	call_deferred("check_victory_conditions")

# –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é update_ui, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
func update_ui():
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy, player_crystals, enemy_crystals)

# –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é place_spawner, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
func place_spawner(team: String, spawner_type: String, position: Vector3):
	if not can_build_structure(team, spawner_type):
		print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")
		return
	var spawner = spawner_scene.instantiate()
	add_child(spawner)
	spawner.team = team
	spawner.spawner_type = spawner_type
	spawner.global_position = position
	spawner.name = team.capitalize() + spawner_type.capitalize() + str(randi())
	spawner.add_to_group("spawners")
	
	# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–¥–∞–Ω–∏–π
	match spawner_type:
		"barracks":
			spawner.unit_type = "warrior"
		"mech_factory":
			spawner.unit_type = "heavy"
		"recon_center":
			spawner.unit_type = "fast"
		"shooting_range":
			spawner.unit_type = "sniper"
		"tower":
			spawner.unit_type = ""  # –ë–∞—à–Ω—è –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —é–Ω–∏—Ç–æ–≤
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–¥–∞–Ω–∏—è
	set_building_visual(spawner, spawner_type, team)
	
	# –ó–≤—É–∫ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–∞–Ω–∏—è
	if audio_system:
		audio_system.play_building_place_sound(position)
	
	# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç—Ä–æ–π–∫–µ
	if notification_system:
		notification_system.show_building_constructed(spawner_type, team)
	
	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
	if statistics_system:
		statistics_system.register_building_built(team, spawner_type)
	
	print("–ü–æ—Å—Ç—Ä–æ–µ–Ω —Å–ø–∞–≤–Ω–µ—Ä: ", team, " ", spawner_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", position)

func set_building_visual(spawner, spawner_type: String, team: String):
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∑–¥–∞–Ω–∏–π
	var mesh_node = spawner.get_node_or_null("MeshInstance3D")
	if not mesh_node:
		mesh_node = MeshInstance3D.new()
		spawner.add_child(mesh_node)
	
	# –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
	match spawner_type:
		"barracks":
			var box_mesh = BoxMesh.new()
			box_mesh.size = Vector3(2, 1.5, 2)
			mesh_node.mesh = box_mesh
		"tower":
			var cylinder_mesh = CylinderMesh.new()
			cylinder_mesh.height = 3
			cylinder_mesh.top_radius = 0.5
			cylinder_mesh.bottom_radius = 0.8
			mesh_node.mesh = cylinder_mesh
		"training_camp":
			var box_mesh = BoxMesh.new()
			box_mesh.size = Vector3(2.5, 1.2, 2.5)
			mesh_node.mesh = box_mesh
		"magic_academy":
			var sphere_mesh = SphereMesh.new()
			sphere_mesh.radius = 1.2
			mesh_node.mesh = sphere_mesh
		"mech_factory":
			var box_mesh = BoxMesh.new()
			box_mesh.size = Vector3(3, 2, 2)
			mesh_node.mesh = box_mesh
		"drone_factory":
			var cylinder_mesh = CylinderMesh.new()
			cylinder_mesh.height = 2.5
			cylinder_mesh.top_radius = 1.5
			cylinder_mesh.bottom_radius = 1.2
			mesh_node.mesh = cylinder_mesh
		_:
			var box_mesh = BoxMesh.new()
			box_mesh.size = Vector3(1.5, 1.5, 1.5)
			mesh_node.mesh = box_mesh
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏ —Ç–∏–ø—É –∑–¥–∞–Ω–∏—è
	var material = StandardMaterial3D.new()
	if team == "player":
		material.albedo_color = get_building_color(spawner_type, Color.BLUE)
	else:
		material.albedo_color = get_building_color(spawner_type, Color.RED)
	
	material.emission_enabled = true
	material.emission = material.albedo_color * 0.3
	mesh_node.material_override = material

func get_building_color(building_type: String, base_color: Color) -> Color:
	match building_type:
		"barracks": return base_color.lerp(Color.CYAN, 0.5)
		"tower": return base_color.lerp(Color.ORANGE, 0.5)
		"training_camp": return base_color.lerp(Color.GOLD, 0.5)
		"magic_academy": return base_color.lerp(Color.MAGENTA, 0.5)
		"mech_factory": return base_color.lerp(Color.STEEL_BLUE, 0.5)
		"drone_factory": return base_color.lerp(Color.LIGHT_BLUE, 0.5)
		_: return base_color

func get_unit_cost(unit_type: String) -> int:
	match unit_type:
		"warrior":
			return 25        # –ë–∞–∑–æ–≤—ã–π —é–Ω–∏—Ç - –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞
		"heavy":
			return 60        # –¢—è–∂—ë–ª—ã–µ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ä–æ–±–æ—Ç—ã –¥–æ—Ä–æ–∂–µ
		"fast":
			return 30        # –ë—ã—Å—Ç—Ä—ã–µ —é–Ω–∏—Ç—ã - —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
		"sniper":
			return 45        # –°–Ω–∞–π–ø–µ—Ä—ã - –ø—Ä–µ–º–∏—É–º —é–Ω–∏—Ç
		"collector":
			return 40        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —é–Ω–∏—Ç
		"hero":
			return 0         # –ì–µ—Ä–æ–π –ø—Ä–∏–∑—ã–≤–∞–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –∞–ª—Ç–∞—Ä—å
		_:
			return 25

func get_unit_crystal_cost(unit_type: String) -> int:
	match unit_type:
		"sniper":
			return 15        # –°–Ω–∞–π–ø–µ—Ä—ã —Ç—Ä–µ–±—É—é—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
		"collector":
			return 5         # –ù–µ–±–æ–ª—å—à–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
		"hero":
			return 0         # –ì–µ—Ä–æ–π –ø—Ä–∏–∑—ã–≤–∞–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ
		_:
			return 0

func get_structure_cost(structure_type: String) -> int:
	match structure_type:
		"tower":
			return 60
		"barracks":
			return 80
		"mech_factory":
			return 150  # –ú–µ—Ö-–∑–∞–≤–æ–¥ –¥–ª—è —Ä–æ–±–æ—Ç–æ–≤
		"recon_center":
			return 100  # –¶–µ–Ω—Ç—Ä —Ä–∞–∑–≤–µ–¥–∫–∏
		"shooting_range":
			return 120  # –°—Ç—Ä–µ–ª—å–±–∏—â–µ –¥–ª—è —Å–Ω–∞–π–ø–µ—Ä–æ–≤
		"orbital_drop":
			return 100
		"energy_generator":
			return 70
		"shield_generator":
			return 90
		"tech_lab":
			return 120
		_:
			return 60

func get_structure_crystal_cost(structure_type: String) -> int:
	match structure_type:
		"mech_factory":
			return 25  # –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –¥–ª—è –º–µ—Ö –∑–∞–≤–æ–¥–∞
		"recon_center":
			return 15  # –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ —Ä–∞–∑–≤–µ–¥–∫–∏
		"shooting_range":
			return 20  # –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –¥–ª—è —Å—Ç—Ä–µ–ª—å–±–∏—â–∞
		_:
			return 0

func get_random_enemy_spawn_position() -> Vector3:
	# –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (z < 0, –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞)
	var x = randf_range(-8.0, 8.0)
	var z = randf_range(-18.0, -8.0)
	return Vector3(x, 0, z)

func get_random_enemy_build_position() -> Vector3:
	# –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (–≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞)
	var attempts = 0
	var max_attempts = 10
	
	while attempts < max_attempts:
		var x = randf_range(-6.0, 6.0)
		var z = randf_range(-18.0, -5.0)
		var pos = Vector3(x, 0, z)
		
		if is_valid_enemy_build_position(pos):
			return pos
		
		attempts += 1
	
	# –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–∑–∏—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é
	return Vector3(randf_range(-4.0, 4.0), 0, -12.0)

func _on_enemy_ai_spawn():
	if not battle_started:
		return
	
	# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∞–≤–Ω –±–∞–∑–æ–≤—ã—Ö —é–Ω–∏—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
	if enemy_energy >= 20 and enemy_current_soldiers < 2:
		spawn_enemy_unit("soldier")

func _on_spawn_soldier():
	print("–ö–Ω–æ–ø–∫–∞ —Å–ø–∞–≤–Ω–∞ —Å–æ–ª–¥–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and can_spawn_unit("player", "soldier"):
		# –°–ø–∞–≤–Ω —é–Ω–∏—Ç–∞-—Å–æ–ª–¥–∞—Ç–∞ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º (–≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞)
		var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, 12.0)
		spawn_unit_at_pos("player", spawn_pos, "soldier")
		update_ui()

func _on_build_tower():
	print("–ö–Ω–æ–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –±–∞—à–Ω–∏ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and can_build_structure("player", "tower"):
		# –°—Ç—Ä–æ–∏–º –±–∞—à–Ω—é —Ä—è–¥–æ–º —Å –±–∞–∑–æ–π –∏–≥—Ä–æ–∫–∞ (–≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞)
		var build_pos = Vector3(randf_range(-6.0, 6.0), 0, 15.0)
		if is_valid_build_position(build_pos):
			place_spawner("player", "tower", build_pos)
			player_energy -= get_structure_cost("tower")
			update_ui()

func _on_spawn_elite_soldier():
	print("–ö–Ω–æ–ø–∫–∞ —Å–ø–∞–≤–Ω–∞ —ç–ª–∏—Ç–Ω–æ–≥–æ —Å–æ–ª–¥–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and can_spawn_unit("player", "elite_soldier"):
		var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, 12.0)
		spawn_unit_at_pos("player", spawn_pos, "elite_soldier")
		update_ui()

func _on_spawn_crystal_mage():
	print("–ö–Ω–æ–ø–∫–∞ —Å–ø–∞–≤–Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞–≥–∞ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and can_spawn_unit("player", "crystal_mage"):
		var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, 12.0)
		spawn_unit_at_pos("player", spawn_pos, "crystal_mage")
		update_ui()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
func _on_use_ability(ability_name, _position):
	print("[DEBUG] –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ", ability_name)
	
	match ability_name:
		"spawn_collector":
			_on_spawn_collector()
		_:
			print("[DEBUG] –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ", ability_name, " –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.")
			return

func can_spawn_unit(team, unit_type):
	var energy_cost = get_unit_cost(unit_type)
	var crystal_cost = get_unit_crystal_cost(unit_type)
	
	if team == "player":
		return player_energy >= energy_cost and player_crystals >= crystal_cost
	else:
		return enemy_energy >= energy_cost and enemy_crystals >= crystal_cost

func can_build_structure(team, structure_type):
	var cost = get_structure_cost(structure_type)
	if team == "player":
		return player_energy >= cost
	else:
		return enemy_energy >= cost

func on_spawner_drop(spawner_type, global_pos):
	if not battle_started:
		print("[DragDrop] –ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞, –Ω–µ–ª—å–∑—è —Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∞–≤–Ω–µ—Ä—ã!")
		return
	
	var cost = get_structure_cost(spawner_type)
	if player_energy < cost:
		print("[DragDrop] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ ", spawner_type, " (–Ω—É–∂–Ω–æ: ", cost, ", –µ—Å—Ç—å: ", player_energy, ")")
		return
	
	# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ 3D-–ø–æ–∑–∏—Ü–∏—é –Ω–∞ –ø–æ–ª–µ
	var pos = get_mouse_map_position(global_pos)
	print("[DragDrop] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∞–≤–Ω–µ—Ä '", spawner_type, "' –≤ —Ç–æ—á–∫–µ ", pos)
	if is_valid_build_position(pos):
		place_spawner("player", spawner_type, pos)
		player_energy -= cost
		update_ui()
		print("[DragDrop] –°–ø–∞–≤–Ω–µ—Ä '", spawner_type, "' —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω –∑–∞ ", cost, " —ç–Ω–µ—Ä–≥–∏–∏!")
	else:
		print("[DragDrop] –ù–µ–ª—å–∑—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∞–≤–Ω–µ—Ä –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å
func _on_summon_hero(position: Vector3):
	print("ü¶∏ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∑—ã–≤–∞ –≥–µ—Ä–æ—è –Ω–∞–∂–∞—Ç–∞!")
	if not race_system or not battle_started:
		return
		
	var player_race_value = race_system.player_race
	if race_system.can_summon_hero(player_race_value, player_energy, player_crystals):
		if race_system.summon_hero(player_race_value, position, "player"):
			update_ui()
			print("‚úÖ –ì–µ—Ä–æ–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∑–≤–∞–Ω!")
	else:
		print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞ –≥–µ—Ä–æ—è")

func _on_use_race_ability(ability_name: String, position: Vector3):
	print("üé≠ –†–∞—Å–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ", ability_name, " –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!")
	if not race_system or not battle_started:
		return
		
	var player_race_value = race_system.player_race
	if race_system.use_race_ability(player_race_value, ability_name, position, "player"):
		update_ui()
		print("‚úÖ –†–∞—Å–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!")
	else:
		print("‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å–æ–≤—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")

func _on_spawn_collector():
	print("üèÉ –ö–Ω–æ–ø–∫–∞ —Å–ø–∞–≤–Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –Ω–∞–∂–∞—Ç–∞!")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—Ä—è–¥–æ–≤
	if not can_spawn_collector("player"):
		var time_left = get_collector_charge_cooldown("player")
		print("‚è∞ –ù–µ—Ç –∑–∞—Ä—è–¥–æ–≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ", int(time_left), " —Å–µ–∫")
		return
	
	if battle_started and can_spawn_unit("player", "collector"):
		var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, 13.0)
		spawn_unit_at_pos("player", spawn_pos, "collector")
		
		# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä—è–¥
		use_collector_charge("player")
		
		update_ui()
		print("‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π! –û—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä—è–¥–æ–≤: ", collector_charges["player"])

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ (–µ—Å—Ç—å –ª–∏ –∑–∞—Ä—è–¥—ã)
func can_spawn_collector(team: String) -> bool:
	return collector_charges[team] > 0

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ä—è–¥–æ–≤
func get_collector_charges(team: String) -> int:
	return collector_charges[team]

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –∫—É–ª–¥–∞—É–Ω–∞ –∑–∞—Ä—è–¥–æ–≤
func get_collector_charge_cooldown(team: String) -> float:
	return max(0.0, collector_charge_timers[team])

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞—Ä—è–¥–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
func use_collector_charge(team: String):
	collector_charges[team] -= 1
	print("‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–∞—Ä—è–¥ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è ", team, ". –û—Å—Ç–∞–ª–æ—Å—å: ", collector_charges[team])
	
	# –ï—Å–ª–∏ –∑–∞—Ä—è–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
	if collector_charges[team] <= 0:
		collector_charge_timers[team] = collector_charge_cooldown
		print("‚è∞ –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—Ä—è–¥–æ–≤ –¥–ª—è ", team, " (", collector_charge_cooldown, " —Å–µ–∫)")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞—Ä—è–¥–æ–≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
func update_collector_charges(delta: float):
	for team in collector_charge_timers:
		if collector_charges[team] <= 0 and collector_charge_timers[team] > 0:
			collector_charge_timers[team] -= delta
			if collector_charge_timers[team] <= 0:
				collector_charges[team] = 3  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –ø–∞—á–∫—É
				collector_charge_timers[team] = 0.0
				print("‚úÖ –ó–∞—Ä—è–¥—ã –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ", team, " (3/3)")

func ai_consider_collector_strategy():
	# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
	if not can_spawn_collector("enemy"):
		return # AI –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –±–µ–∑ –∑–∞—Ä—è–¥–æ–≤
	
	if enemy_energy >= get_unit_cost("collector") and enemy_crystals >= get_unit_crystal_cost("collector"):
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
		if territory_system:
			var available_crystals = territory_system.get_territory_info()
			var neutral_crystals = 0
			for crystal in available_crystals:
				if crystal.owner == "neutral" or crystal.owner != "enemy":
					neutral_crystals += 1
			
			if neutral_crystals > 0:
				# 30% —à–∞–Ω—Å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
				if randf() < 0.3:
					var spawn_pos = get_random_enemy_spawn_position()
					spawn_unit_at_pos("enemy", spawn_pos, "collector")
					enemy_energy -= get_unit_cost("collector")
					enemy_crystals -= get_unit_crystal_cost("collector")
					
					# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä—è–¥ –¥–ª—è AI
					use_collector_charge("enemy")
					
					print("ü§ñ AI —Å–æ–∑–¥–∞–ª –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä—è–¥–æ–≤: ", collector_charges["enemy"])
					update_ui()

# –°–∏—Å—Ç–µ–º–∞ –∞–ª—Ç–∞—Ä—è –≥–µ—Ä–æ—è - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –±–æ–∫–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
func _on_territory_captured(territory_id: int, team: String, territory_type: int):
	print("üè∞ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –∑–∞—Ö–≤–∞—á–µ–Ω–∞: ID=", territory_id, " —Ç–∏–ø–∞=", territory_type, " –∫–æ–º–∞–Ω–¥–æ–π ", team)
	
	# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
	if territory_system:
		var territories = territory_system.get_territory_info()
		if territory_id < territories.size():
			var territory = territories[territory_id]
			var territory_name = territory.get("name", "")
			
			print("üîç –ò–º—è –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏: '", territory_name, "'")
			
			# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
			if team == "player":
				match territory_type:
					ENERGY_MINE_TYPE:
						player_crystals += 15
						print("‚ö° –ó–∞—Ö–≤–∞—á–µ–Ω —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä—É–¥–Ω–∏–∫! +15 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤")
					CRYSTAL_MINE_TYPE:
						player_crystals += 25
						print("üíé –ó–∞—Ö–≤–∞—á–µ–Ω –∫—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π —Ä—É–¥–Ω–∏–∫! +25 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤")
					VOID_CRYSTAL_TYPE:
						player_crystals += 50
						print("üíú –ó–∞—Ö–≤–∞—á–µ–Ω –∫—Ä–∏—Å—Ç–∞–ª–ª –ø—É—Å—Ç–æ—Ç—ã! +50 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤")
					ANCIENT_ALTAR_TYPE:
						player_crystals += 100
						print("‚ú® –ó–∞—Ö–≤–∞—á–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∞–ª—Ç–∞—Ä—å! +100 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤")
						# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
						check_victory_conditions()
					CENTER_TRIGGER_1_TYPE, CENTER_TRIGGER_2_TYPE:
						side_territories_captured += 1
						print("ü¶∏ –ó–∞—Ö–≤–∞—á–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä! –í—Å–µ–≥–æ: ", side_territories_captured, "/2")
						
						# –ï—Å–ª–∏ –∑–∞—Ö–≤–∞—á–µ–Ω—ã –æ–±–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–ª—Ç–∞—Ä—å
						if side_territories_captured >= 2 and not hero_altar_active:
							activate_hero_altar()
	
	# –û–±–Ω–æ–≤–ª—è–µ–º UI
	update_ui()
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if notification_system:
		notification_system.show_notification("üè∞ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –∑–∞—Ö–≤–∞—á–µ–Ω–∞!", "territory_captured")

func _on_summon_altar_hero():
	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑—ã–≤–∞ –≥–µ—Ä–æ—è —á–µ—Ä–µ–∑ –∞–ª—Ç–∞—Ä—å
	if not hero_altar_active:
		print("‚ùå –ê–ª—Ç–∞—Ä—å –≥–µ—Ä–æ—è –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!")
		return
	
	if hero_summoned:
		print("‚ùå –ì–µ—Ä–æ–π —É–∂–µ –ø—Ä–∏–∑–≤–∞–Ω!")
		return
	
	print("ÔøΩÔøΩ === –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –ü–†–ò–ó–´–í –ì–ï–†–û–Ø ===")
	print("‚è∞ –ì–µ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–∑–≤–∞–Ω —á–µ—Ä–µ–∑ 45 —Å–µ–∫—É–Ω–¥...")
	
	# –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏–∑—ã–≤–∞ –≥–µ—Ä–æ—è
	hero_summon_timer = Timer.new()
	hero_summon_timer.wait_time = 45.0  # 45 —Å–µ–∫—É–Ω–¥
	hero_summon_timer.one_shot = true
	hero_summon_timer.timeout.connect(_on_hero_summoned)
	add_child(hero_summon_timer)
	hero_summon_timer.start()
	
	# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–∏–∑—ã–≤–∞
	if notification_system:
		notification_system.show_notification("ü¶∏ –ü–†–ò–ó–´–í –ì–ï–†–û–Ø –ù–ê–ß–ê–¢!\n‚è∞ –ì–µ—Ä–æ–π –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 45 —Å–µ–∫—É–Ω–¥", "hero_summon")
	
	# –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∑—ã–≤–∞
	if battle_ui:
		var hero_button = battle_ui.get_node_or_null("AbilityPanel/AbilityContainer/HeroSummonButton")
		if hero_button:
			hero_button.disabled = true
			hero_button.text = "ü¶∏ –ü–†–ò–ó–´–í –ì–ï–†–û–Ø\n‚è∞ 45 —Å–µ–∫—É–Ω–¥..."

func _on_hero_summoned():
	# –ì–µ—Ä–æ–π –ø—Ä–∏–∑–≤–∞–Ω —á–µ—Ä–µ–∑ 45 —Å–µ–∫—É–Ω–¥
	hero_summoned = true
	print("ü¶∏ === –ì–ï–†–û–ô –ü–†–ò–ó–í–ê–ù! ===")
	
	# –°–æ–∑–¥–∞–µ–º –≥–µ—Ä–æ—è –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã
	var hero_pos = Vector3(0, 0, 0)  # –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
	spawn_unit_at_pos("player", hero_pos, "hero")
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≥–µ—Ä–æ—è –≤ UI
	if battle_ui:
		battle_ui.add_hero_ability_buttons()
	
	# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–∑—ã–≤–µ
	if notification_system:
		notification_system.show_notification("ü¶∏ –ì–ï–†–û–ô –ü–†–ò–ó–í–ê–ù!\n‚öîÔ∏è –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≥–µ—Ä–æ—è –¥–æ—Å—Ç—É–ø–Ω—ã!", "hero_ready")
	
	# –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä
	if hero_summon_timer:
		hero_summon_timer.queue_free()
		hero_summon_timer = null
	
	print("ü¶∏ –ì–µ—Ä–æ–π –≥–æ—Ç–æ–≤ –∫ –±–æ—é! –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")

func _on_territory_depleted(territory_id: int):
	print("üè∞ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è ", territory_id, " –∏—Å—Ç–æ—â–µ–Ω–∞")
	if notification_system:
		notification_system.show_notification("–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –∏—Å—Ç–æ—â–µ–Ω–∞!")

# –£–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é _on_territory_regenerated —Ç–∞–∫ –∫–∞–∫ —Å–∏–≥–Ω–∞–ª —É–¥–∞–ª–µ–Ω

# –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏
func get_controlled_crystals(team: String) -> int:
	if territory_system:
		return territory_system.get_controlled_crystals(team)
	return 0

func get_crystal_type_name(crystal_type: int) -> String:
	# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–∏–ø–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
	match crystal_type:
		0: return "MAIN_CRYSTAL"
		1: return "ENERGY_CRYSTAL"
		2: return "UNSTABLE_CRYSTAL"
		3: return "VOID_CRYSTAL"
		_: return "UNKNOWN"

# –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –Æ–ù–ò–¢–ê–ú–ò –ú–´–®–¨–Æ
func handle_left_click_selection(screen_pos: Vector2):
	# –õ–ö–ú - –≤—ã–±–æ—Ä —é–Ω–∏—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
	if not battle_started:
		return
	
	var world_pos = screen_to_world_position(screen_pos)
	if not world_pos:
		return
	
	# –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —é–Ω–∏—Ç –∏–≥—Ä–æ–∫–∞
	var closest_unit = find_closest_player_unit(world_pos)
	
	if closest_unit:
		# –í—ã–±–∏—Ä–∞–µ–º —é–Ω–∏—Ç
		select_unit(closest_unit)
		print("üéØ –í—ã–±—Ä–∞–Ω —é–Ω–∏—Ç: ", closest_unit.unit_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", closest_unit.global_position)
	else:
		# –°–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä
		clear_selection()
		print("‚ùå –í—ã–±–æ—Ä —Å–Ω—è—Ç")

func handle_right_click_command(screen_pos: Vector2):
	# –ü–ö–ú - –∫–æ–º–∞–Ω–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —é–Ω–∏—Ç–∞–º
	if not battle_started or selected_units.is_empty():
		return
	
	var world_pos = screen_to_world_position(screen_pos)
	if not world_pos:
		return
	
	# –ö–æ–º–∞–Ω–¥—É–µ–º –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º —é–Ω–∏—Ç–∞–º
	for unit in selected_units:
		if is_instance_valid(unit):
			command_unit_to_position(unit, world_pos)
	
	print("üìç –ö–æ–º–∞–Ω–¥–∞ ", selected_units.size(), " —é–Ω–∏—Ç–∞–º: –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ ", world_pos)
	
	# –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã
	create_command_indicator(world_pos)

func screen_to_world_position(screen_pos: Vector2) -> Vector3:
	# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∏—Ä–æ–≤—ã–µ
	if not battle_camera:
		return Vector3.ZERO
	
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º raycast –æ—Ç –∫–∞–º–µ—Ä—ã —á–µ—Ä–µ–∑ —ç–∫—Ä–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
	var ray_origin = battle_camera.project_ray_origin(screen_pos)
	var ray_direction = battle_camera.project_ray_normal(screen_pos)
	
	# –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ª—É—á–∞ —Å –ø–ª–æ—Å–∫–æ—Å—Ç—å—é y=0 (–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –ø–æ–ª—è)
	var plane_y = 0.0
	var t = (plane_y - ray_origin.y) / ray_direction.y
	
	if t > 0:
		var intersection = ray_origin + ray_direction * t
		return intersection
	
	return Vector3.ZERO

func find_closest_player_unit(world_pos: Vector3) -> Unit:
	var closest_unit = null
	var closest_distance = 3.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
	
	var units = get_tree().get_nodes_in_group("units")
	for unit in units:
		if unit.team != "player" or unit.health <= 0:
			continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –∏ –º–µ—Ä—Ç–≤—ã—Ö —é–Ω–∏—Ç–æ–≤
			
		var distance = unit.global_position.distance_to(world_pos)
		if distance < closest_distance:
			closest_distance = distance
			closest_unit = unit
	
	return closest_unit

func select_unit(unit: Unit):
	# –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
	clear_selection()
	
	# –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —é–Ω–∏—Ç
	selected_units.append(unit)
	
	# –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±–æ—Ä–∞
	create_selection_indicator(unit)

func clear_selection():
	selected_units.clear()
	
	# –£–¥–∞–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
	if selection_indicator:
		selection_indicator.queue_free()
		selection_indicator = null

func create_selection_indicator(unit: Unit):
	# –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞
	selection_indicator = MeshInstance3D.new()
	var ring_mesh = TorusMesh.new()
	ring_mesh.inner_radius = 0.8
	ring_mesh.outer_radius = 1.2
	selection_indicator.mesh = ring_mesh
	selection_indicator.position = Vector3(0, 0.1, 0)
	
	# –ú–∞—Ç–µ—Ä–∏–∞–ª —Å –∑–µ–ª–µ–Ω—ã–º —Å–≤–µ—á–µ–Ω–∏–µ–º
	var material = StandardMaterial3D.new()
	material.albedo_color = Color.GREEN
	material.emission_enabled = true
	material.emission = Color.GREEN * 0.5
	material.flags_transparent = true
	material.flags_unshaded = true
	selection_indicator.material_override = material
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫ —é–Ω–∏—Ç—É
	unit.add_child(selection_indicator)
	
	# –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
	var tween = create_tween()
	tween.set_loops()
	tween.tween_method(func(angle): selection_indicator.rotation.y = angle, 0.0, TAU, 2.0)

func command_unit_to_position(unit: Unit, target_pos: Vector3):
	# –ö–æ–º–∞–Ω–¥—É–µ–º —é–Ω–∏—Ç—É –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ –ø–æ–∑–∏—Ü–∏–∏
	if not is_instance_valid(unit):
		return
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å
	unit.target_pos = target_pos
	unit.target = null  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å –∞—Ç–∞–∫–∏
	
	print("üö∂ –Æ–Ω–∏—Ç ", unit.unit_type, " –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ ", target_pos)

func create_command_indicator(world_pos: Vector3):
	# –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã
	var indicator = MeshInstance3D.new()
	var sphere_mesh = SphereMesh.new()
	sphere_mesh.radius = 0.3
	indicator.mesh = sphere_mesh
	indicator.position = world_pos + Vector3(0, 0.2, 0)
	
	# –ú–∞—Ç–µ—Ä–∏–∞–ª —Å —Å–∏–Ω–∏–º —Å–≤–µ—á–µ–Ω–∏–µ–º
	var material = StandardMaterial3D.new()
	material.albedo_color = Color.CYAN
	material.emission_enabled = true
	material.emission = Color.CYAN * 0.8
	material.flags_transparent = true
	indicator.material_override = material
	
	add_child(indicator)
	
	# –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
	var tween = create_tween()
	tween.parallel().tween_property(indicator, "scale", Vector3.ZERO, 1.0)
	tween.parallel().tween_property(indicator, "modulate", Color.TRANSPARENT, 1.0)
	tween.tween_callback(indicator.queue_free)

func init_enemy_ai():
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –≤—Ä–∞–≥–∞
	print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –≤—Ä–∞–≥–∞...")
	
	# –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π AI
	enemy_decision_timer = Timer.new()
	enemy_decision_timer.wait_time = 3.0  # AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
	enemy_decision_timer.autostart = false  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –±–∏—Ç–≤—ã
	enemy_decision_timer.timeout.connect(_on_enemy_ai_decision)
	add_child(enemy_decision_timer)
	
	# –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–æ–≤
	enemy_ai_timer = Timer.new()
	enemy_ai_timer.wait_time = 5.0  # –°–ø–∞–≤–Ω –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
	enemy_ai_timer.autostart = false  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –±–∏—Ç–≤—ã
	enemy_ai_timer.timeout.connect(_on_enemy_ai_spawn)
	add_child(enemy_ai_timer)
	
	print("‚úÖ AI –≤—Ä–∞–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

func _on_enemy_ai_decision():
	# AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	if not battle_started:
		return
	
	print("ü§ñ AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ...")
	
	# –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ AI
	var player_unit_count = get_team_unit_count("player")
	var enemy_unit_count = get_team_unit_count("enemy")
	
	# –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –±–æ–ª—å—à–µ —é–Ω–∏—Ç–æ–≤, AI —Å—Ç—Ä–æ–∏—Ç –∑–∞—â–∏—Ç—É
	if player_unit_count > enemy_unit_count + 1:
		ai_consider_defense()
	else:
		ai_consider_attack()
	
	# AI —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
	ai_consider_collector_strategy()

func ai_consider_defense():
	# AI —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
	if enemy_energy >= get_structure_cost("tower"):
		var build_pos = get_random_enemy_build_position()
		if is_valid_enemy_build_position(build_pos):
			place_spawner("enemy", "tower", build_pos)
			enemy_energy -= get_structure_cost("tower")
			print("ü§ñ AI –ø–æ—Å—Ç—Ä–æ–∏–ª –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—É—é –±–∞—à–Ω—é")
			update_ui()

func ai_consider_attack():
	# AI —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∞—Ç–∞–∫—É—é—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
	if enemy_energy >= get_unit_cost("soldier"):
		spawn_enemy_unit("soldier")
		print("ü§ñ AI —Å–æ–∑–¥–∞–ª —Å–æ–ª–¥–∞—Ç–∞ –¥–ª—è –∞—Ç–∞–∫–∏")
	elif enemy_energy >= get_structure_cost("barracks"):
		var build_pos = get_random_enemy_build_position()
		if is_valid_enemy_build_position(build_pos):
			place_spawner("enemy", "barracks", build_pos)
			enemy_energy -= get_structure_cost("barracks")
			print("ü§ñ AI –ø–æ—Å—Ç—Ä–æ–∏–ª –∫–∞–∑–∞—Ä–º—ã")
			update_ui()

func spawn_enemy_unit(unit_type: String):
	# –°–ø–∞–≤–Ω –≤—Ä–∞–∂–µ—Å–∫–æ–≥–æ —é–Ω–∏—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è AI)
	if not battle_started:
		return
	
	if not can_spawn_unit("enemy", unit_type):
		print("ü§ñ AI: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è ", unit_type)
		return
	
	var spawn_pos = get_random_enemy_spawn_position()
	spawn_unit_at_pos("enemy", spawn_pos, unit_type)
	
	print("ü§ñ AI —Å–æ–∑–¥–∞–ª ", unit_type)
	update_ui()

func spawn_initial_collectors():
	print("ü§ñ –°–ø–∞–≤–Ω –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤...")
	
	# –°–ø–∞–≤–Ω –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ (—Å–ª–µ–≤–∞ –æ—Ç —é–∂–Ω–æ–≥–æ —è–¥—Ä–∞)
	var player_collector_pos = Vector3(-5, 0, 20)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–ª–∏–∂–µ –∫ —è–¥—Ä—É –∏–≥—Ä–æ–∫–∞
	spawn_free_unit_at_pos("player", player_collector_pos, "collector")
	print("‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –∏–≥—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ ", player_collector_pos)
	
	# –°–ø–∞–≤–Ω –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –≤—Ä–∞–≥–∞ (—Å–ª–µ–≤–∞ –æ—Ç —Å–µ–≤–µ—Ä–Ω–æ–≥–æ —è–¥—Ä–∞) 
	var enemy_collector_pos = Vector3(-5, 0, -20)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–ª–∏–∂–µ –∫ —è–¥—Ä—É –≤—Ä–∞–≥–∞
	spawn_free_unit_at_pos("enemy", enemy_collector_pos, "collector")
	print("‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –≤—Ä–∞–≥–∞ —Å–æ–∑–¥–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ ", enemy_collector_pos)

func spawn_free_unit_at_pos(team: String, pos: Vector3, unit_type: String):
	# –°–æ–∑–¥–∞–Ω–∏–µ —é–Ω–∏—Ç–∞ –±–µ–∑ —Ç—Ä–∞—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ (–¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤)
	print("üÜì –°–æ–∑–¥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —é–Ω–∏—Ç–∞: ", team, " ", unit_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", pos)
	var unit = unit_scene.instantiate()
	add_child(unit)
	unit.team = team
	unit.unit_type = unit_type
	unit.global_position = pos
	# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –Æ–Ω–∏—Ç—ã –∏–¥—É—Ç –∫ –≤—Ä–∞–∂–µ—Å–∫–æ–º—É —è–¥—Ä—É
	if team == "player":
		unit.target_pos = Vector3(0, 0, -28)  # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–∂–µ—Å–∫–æ–µ —è–¥—Ä–æ (—Å–µ–≤–µ—Ä)
	else:
		unit.target_pos = Vector3(0, 0, 28)   # –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç —è–¥—Ä–æ –∏–≥—Ä–æ–∫–∞ (—é–≥)
	unit.battle_manager = self
	unit.add_to_group("units")
	
	# –≠—Ñ—Ñ–µ–∫—Ç —Å–ø–∞–≤–Ω–∞ —é–Ω–∏—Ç–∞
	if effect_system:
		effect_system.create_spawn_effect(pos, team)
	
	# –ó–≤—É–∫ —Å–ø–∞–≤–Ω–∞ —é–Ω–∏—Ç–∞
	if audio_system:
		audio_system.play_unit_spawn_sound(pos)
	
	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
	if statistics_system:
		statistics_system.register_unit_spawned(team, unit_type)
	
	print("‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —é–Ω–∏—Ç —Å–æ–∑–¥–∞–Ω: ", unit.name, " –∫–æ–º–∞–Ω–¥–∞: ", unit.team)

func activate_hero_altar():
	# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–ª—Ç–∞—Ä—å –≥–µ—Ä–æ—è
	hero_altar_active = true
	print("üèõÔ∏è === –ê–õ–¢–ê–†–¨ –ì–ï–†–û–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! ===")
	
	# –°–æ–∑–¥–∞–µ–º –∞–ª—Ç–∞—Ä—å –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã
	create_hero_altar()
	
	# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∑—ã–≤–∞ –≥–µ—Ä–æ—è –≤ UI
	if battle_ui:
		battle_ui.enable_hero_summon()
	
	# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if notification_system:
		notification_system.show_notification("üèõÔ∏è –ê–õ–¢–ê–†–¨ –ì–ï–†–û–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!\nü¶∏ –ú–æ–∂–Ω–æ –ø—Ä–∏–∑–≤–∞—Ç—å –≥–µ—Ä–æ—è!", "hero_altar")

func create_hero_altar():
	# –°–æ–∑–¥–∞–µ–º –∞–ª—Ç–∞—Ä—å –≥–µ—Ä–æ—è –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã
	var altar = MeshInstance3D.new()
	var altar_mesh = CylinderMesh.new()
	altar_mesh.height = 2.5
	altar_mesh.top_radius = 1.5
	altar_mesh.bottom_radius = 2.0
	altar.mesh = altar_mesh
	altar.position = Vector3(0, 1.25, 0)  # –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
	altar.name = "HeroAltar"
	
	# –ú–∞—Ç–µ—Ä–∏–∞–ª –∞–ª—Ç–∞—Ä—è - –∑–æ–ª–æ—Ç–æ–π —Å —Å–≤–µ—á–µ–Ω–∏–µ–º
	var altar_mat = StandardMaterial3D.new()
	altar_mat.albedo_color = Color(1.0, 0.8, 0.2, 1.0)  # –ó–æ–ª–æ—Ç–æ–π
	altar_mat.emission_enabled = true
	altar_mat.emission = Color(0.8, 0.6, 0.1)  # –ó–æ–ª–æ—Ç–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
	altar.set_surface_override_material(0, altar_mat)
	add_child(altar)
	
	# –ü–æ–¥–ø–∏—Å—å –∞–ª—Ç–∞—Ä—è
	var altar_label = Label3D.new()
	altar_label.text = "üèõÔ∏è –ê–õ–¢–ê–†–¨ –ì–ï–†–û–Ø\nü¶∏ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∑—ã–≤—É!"
	altar_label.position = Vector3(0, 3.5, 0)
	altar_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	altar_label.font_size = 32
	altar_label.modulate = Color(1.0, 0.8, 0.2, 1.0)
	altar_label.outline_size = 4
	altar_label.outline_modulate = Color.BLACK
	add_child(altar_label)
	
	print("üèõÔ∏è –ê–ª—Ç–∞—Ä—å –≥–µ—Ä–æ—è —Å–æ–∑–¥–∞–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã")
