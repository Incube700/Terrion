class_name BattleManager
extends Node

# BattleManager ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å—Ä–∞–∂–µ–Ω–∏–π –º–µ–∂–¥—É —Ä–∞—Å–∞–º–∏
# –í –º–∏—Ä–µ TERRION –∫–æ–º–∞–Ω–¥–∏—Ä—ã —Ñ—Ä–∞–∫—Ü–∏–π —Å—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º–∏

var player_energy = 100  # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∫–æ–º–∞–Ω–¥–∏—Ä–∞
var enemy_energy = 100   # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
var player_crystals = 0  # –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
var enemy_crystals = 0   # –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –≤—Ä–∞–≥–∞
var energy_gain_per_tick = 10  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏
var energy_tick_time = 1.0     # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤

var player_base_hp = 100  # –ü—Ä–æ—á–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –∏–≥—Ä–æ–∫–∞
var enemy_base_hp = 100   # –ü—Ä–æ—á–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤—Ä–∞–≥–∞

var lanes = []
var player_spawners = []  # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–≥—Ä–æ–∫–∞
var enemy_spawners = []   # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤—Ä–∞–≥–∞

signal battle_finished(winner)

var unit_scene = preload("res://scenes/Unit.tscn")
var spawner_scene = preload("res://scenes/Spawner.tscn")
var battle_ui = null
var battle_started = false

var is_building_mode = false
var building_preview = null
var can_build_here = false
var building_cost = 30  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è

# –°–∏—Å—Ç–µ–º–∞ –ò–ò –¥–ª—è –≤—Ä–∞–∂–µ—Å–∫–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏
var enemy_ai_timer: Timer
var enemy_decision_timer: Timer
var energy_timer: Timer
var enemy_max_soldiers = 3  # –õ–∏–º–∏—Ç—ã —é–Ω–∏—Ç–æ–≤ –¥–ª—è –ò–ò
var enemy_max_tanks = 2
var enemy_max_drones = 2
var enemy_current_soldiers = 0
var enemy_current_tanks = 0
var enemy_current_drones = 0

var enemy_ai: EnemyAI = null
var ai_difficulty: String = "normal"

# –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
var territory_system: TerritorySystem = null

# –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
var ability_system: AbilitySystem = null

# –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å –∏ —Ñ—Ä–∞–∫—Ü–∏–π
var race_system: RaceSystem = null

# –°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
var effect_system = null

# –°–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤
var audio_system = null

# –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
var notification_system = null

# –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
var statistics_system = null

# –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
var system_manager = null

var battle_camera: Camera3D
var camera_speed = 20.0
var zoom_speed = 5.0
var is_mouse_dragging = false
var last_mouse_position = Vector2.ZERO

func _ready():
	# –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–º–µ—Ä—É
	battle_camera = get_node("Camera3D")
	
	print("üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é BattleManager...")
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
	call_deferred("init_all_systems")

func _input(event):
	if not battle_camera:
		return
		
	# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π –º—ã—à–∫–æ–π
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_RIGHT:
			is_mouse_dragging = event.pressed
			last_mouse_position = event.position
			
		# –ó—É–º –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏ - –ë–õ–ò–ñ–ï –¥–ª—è –ª—É—á—à–µ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
		elif event.button_index == MOUSE_BUTTON_WHEEL_UP:
			var new_pos = battle_camera.position
			new_pos.y = max(20, new_pos.y - zoom_speed)  # –£–º–µ–Ω—å—à–∏–ª —Å 30 –¥–æ 20
			new_pos.z = max(15, new_pos.z - zoom_speed * 0.8)  # –£–º–µ–Ω—å—à–∏–ª —Å 25 –¥–æ 15
			battle_camera.position = new_pos
			
		elif event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			var new_pos = battle_camera.position
			new_pos.y = min(120, new_pos.y + zoom_speed)  # –£–≤–µ–ª–∏—á–∏–ª —Å 100 –¥–æ 120
			new_pos.z = min(100, new_pos.z + zoom_speed * 0.8)  # –£–≤–µ–ª–∏—á–∏–ª —Å 80 –¥–æ 100
			battle_camera.position = new_pos
			
	elif event is InputEventMouseMotion and is_mouse_dragging:
		# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
		var delta = (event.position - last_mouse_position) * 0.1
		var new_pos = battle_camera.position
		new_pos.x -= delta.x * 0.1
		new_pos.z += delta.y * 0.1
		# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª—è
		new_pos.x = clamp(new_pos.x, -30, 30)
		new_pos.z = clamp(new_pos.z, 20, 80)
		battle_camera.position = new_pos
		last_mouse_position = event.position

func init_all_systems():
	print("üöÄ –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä TERRION –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
	init_system_manager()  # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º
	init_enemy_ai()
	init_energy_timer()
	init_territory_system()
	init_ability_system()
	init_race_system()
	# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ SystemManager

	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ–º–∞–Ω–¥–∏—Ä–∞
	battle_ui = get_node_or_null("BattleUI")
	if battle_ui:
		print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–∏—Ä–∞ –∞–∫—Ç–∏–≤–µ–Ω")
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)
		battle_ui.start_battle.connect(_on_start_battle)
		battle_ui.spawn_unit_drag.connect(_on_spawn_unit_drag)
		battle_ui.build_structure_drag.connect(_on_build_structure_drag)
		battle_ui.use_ability.connect(_on_use_ability)
		
		print("üîó –°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
	else:
		print("‚ùå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–∏—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")

	# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è –±–æ—è (—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞)
	create_battlefield()

	# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ —Ñ—Ä–∞–∫—Ü–∏–π
	create_command_centers()

	# –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
	battle_started = false
	update_ui()
	
	print("‚ö° –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä –≥–æ—Ç–æ–≤! –ù–∞—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–æ–π—Å–∫.")

func create_battlefield():
	# –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–µ –±–æ—è - —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É —Ñ—Ä–∞–∫—Ü–∏—è–º–∏
	# –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–µ—Ç—ã (–∑–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞) - –£–í–ï–õ–ò–ß–ï–ù–ê –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
	var field = MeshInstance3D.new()
	var plane = PlaneMesh.new()
	plane.size = Vector2(40, 60)  # –£–≤–µ–ª–∏—á–∏–ª —Å 30x50 –¥–æ 40x60
	field.mesh = plane
	field.position = Vector3(0, 0, 0)
	var field_mat = StandardMaterial3D.new()
	field_mat.albedo_color = Color(0.2, 0.7, 0.2, 1.0)  # –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–µ—Ç—ã
	field.set_surface_override_material(0, field_mat)
	add_child(field)

	# –ó–æ–Ω–∞ –∏–≥—Ä–æ–∫–∞ (—Å–∏–Ω—è—è, –≤–Ω–∏–∑—É –∫–∞—Ä—Ç—ã) - –£–í–ï–õ–ò–ß–ï–ù–ê
	var player_zone = MeshInstance3D.new()
	var player_plane = PlaneMesh.new()
	player_plane.size = Vector2(40, 25)  # –£–≤–µ–ª–∏—á–∏–ª —Å 30x20 –¥–æ 40x25
	player_zone.mesh = player_plane
	player_zone.position = Vector3(0, 0.01, 17.5)  # –°–º–µ—â–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É
	var player_zone_mat = StandardMaterial3D.new()
	player_zone_mat.albedo_color = Color(0.2, 0.6, 1.0, 0.3)  # –°–∏–Ω—è—è –∑–æ–Ω–∞ –∏–≥—Ä–æ–∫–∞
	player_zone_mat.flags_transparent = true
	player_zone.set_surface_override_material(0, player_zone_mat)
	add_child(player_zone)

	# –ó–æ–Ω–∞ –≤—Ä–∞–≥–∞ (–∫—Ä–∞—Å–Ω–∞—è, –≤–≤–µ—Ä—Ö—É –∫–∞—Ä—Ç—ã) - –£–í–ï–õ–ò–ß–ï–ù–ê
	var enemy_zone = MeshInstance3D.new()
	var enemy_plane = PlaneMesh.new()
	enemy_plane.size = Vector2(40, 25)  # –£–≤–µ–ª–∏—á–∏–ª —Å 30x20 –¥–æ 40x25
	enemy_zone.mesh = enemy_plane
	enemy_zone.position = Vector3(0, 0.01, -17.5)  # –°–º–µ—â–µ–Ω–∏–µ –∫ –≤—Ä–∞–≥—É
	var enemy_zone_mat = StandardMaterial3D.new()
	enemy_zone_mat.albedo_color = Color(1.0, 0.2, 0.2, 0.3)  # –ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ –≤—Ä–∞–≥–∞
	enemy_zone_mat.flags_transparent = true
	enemy_zone.set_surface_override_material(0, enemy_zone_mat)
	add_child(enemy_zone)

	# –î–µ–º–∞—Ä–∫–∞—Ü–∏–æ–Ω–Ω–∞—è –ª–∏–Ω–∏—è (–≥—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π) - –£–í–ï–õ–ò–ß–ï–ù–ê
	var line = MeshInstance3D.new()
	var box = BoxMesh.new()
	box.size = Vector3(40, 0.2, 0.5)  # –£–≤–µ–ª–∏—á–∏–ª —à–∏—Ä–∏–Ω—É —Å 30 –¥–æ 40
	line.mesh = box
	line.position = Vector3(0, 0.1, 0)
	var line_mat = StandardMaterial3D.new()
	line_mat.albedo_color = Color(1, 1, 1, 1)  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
	line_mat.emission_enabled = true
	line_mat.emission = Color(0.3, 0.3, 0.3)  # –°–ª–∞–±–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
	line.set_surface_override_material(0, line_mat)
	add_child(line)

	# –ü–æ–¥–ø–∏—Å–∏ –∑–æ–Ω - –ë–û–õ–¨–®–ï –û–¢–î–ê–õ–ï–ù–´
	var player_zone_label = Label3D.new()
	player_zone_label.text = "–ó–û–ù–ê –ò–ì–†–û–ö–ê (–°–ò–ù–Ø–Ø)\n–Æ–Ω–∏—Ç—ã –∞—Ç–∞–∫—É—é—Ç –í–í–ï–†–• ‚Üë"
	player_zone_label.position = Vector3(0, 1.0, 27)  # –£–≤–µ–ª–∏—á–∏–ª —Å 22 –¥–æ 27
	player_zone_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	player_zone_label.font_size = 64  # –£–≤–µ–ª–∏—á–∏–ª —Å 48 –¥–æ 64
	player_zone_label.modulate = Color(0.2, 0.6, 1, 1)
	player_zone_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
	player_zone_label.outline_size = 8
	player_zone_label.outline_modulate = Color.BLACK
	add_child(player_zone_label)

	var enemy_zone_label = Label3D.new()
	enemy_zone_label.text = "–ó–û–ù–ê –í–†–ê–ì–ê (–ö–†–ê–°–ù–ê–Ø)\n–Æ–Ω–∏—Ç—ã –∞—Ç–∞–∫—É—é—Ç –í–ù–ò–ó ‚Üì"
	enemy_zone_label.position = Vector3(0, 1.0, -27)  # –£–≤–µ–ª–∏—á–∏–ª —Å -22 –¥–æ -27
	enemy_zone_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	enemy_zone_label.font_size = 64  # –£–≤–µ–ª–∏—á–∏–ª —Å 48 –¥–æ 64
	enemy_zone_label.modulate = Color(1, 0.2, 0.2, 1)
	enemy_zone_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
	enemy_zone_label.outline_size = 8
	enemy_zone_label.outline_modulate = Color.BLACK
	add_child(enemy_zone_label)

func create_command_centers():
	# –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã —Ñ—Ä–∞–∫—Ü–∏–π
	# –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∏–≥—Ä–æ–∫–∞ (—Å–∏–Ω—è—è —Ñ—Ä–∞–∫—Ü–∏—è) - –í–ù–ò–ó–£ –∫–∞—Ä—Ç—ã
	var player_core = MeshInstance3D.new()
	var player_sphere = SphereMesh.new()
	player_sphere.radius = 1.5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
	player_sphere.height = 3.0
	player_core.mesh = player_sphere
	player_core.position = Vector3(0, 1.5, 25)  # –£–≤–µ–ª–∏—á–∏–ª —Å 20 –¥–æ 25
	player_core.name = "PlayerCoreVisual"
	var player_mat = StandardMaterial3D.new()
	player_mat.albedo_color = Color(0.2, 0.6, 1, 1)  # –°–ò–ù–ò–ô = –ò–ì–†–û–ö
	player_mat.emission_enabled = true
	player_mat.emission = Color(0.1, 0.3, 0.5)  # –°–∏–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ
	player_core.set_surface_override_material(0, player_mat)
	add_child(player_core)

	# –ü–æ–¥–ø–∏—Å—å –¥–ª—è —è–¥—Ä–∞ –∏–≥—Ä–æ–∫–∞
	var player_label = Label3D.new()
	player_label.text = "–ò–ì–†–û–ö (–°–ò–ù–ò–ô)"
	player_label.position = Vector3(0, 3.5, 25)  # –£–≤–µ–ª–∏—á–∏–ª —Å 20 –¥–æ 25
	player_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	player_label.font_size = 80  # –£–≤–µ–ª–∏—á–∏–ª —Å 56 –¥–æ 80
	player_label.modulate = Color(0.2, 0.6, 1, 1)
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
	player_label.outline_size = 10
	player_label.outline_modulate = Color.BLACK
	add_child(player_label)

	# –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–∫—Ä–∞—Å–Ω–∞—è —Ñ—Ä–∞–∫—Ü–∏—è) - –í–í–ï–†–•–£ –∫–∞—Ä—Ç—ã
	var enemy_core = MeshInstance3D.new()
	var enemy_sphere = SphereMesh.new()
	enemy_sphere.radius = 1.5
	enemy_sphere.height = 3.0
	enemy_core.mesh = enemy_sphere
	enemy_core.position = Vector3(0, 1.5, -25)  # –£–≤–µ–ª–∏—á–∏–ª —Å -20 –¥–æ -25
	enemy_core.name = "EnemyCoreVisual"
	var enemy_mat = StandardMaterial3D.new()
	enemy_mat.albedo_color = Color(1, 0.2, 0.2, 1)  # –ö–†–ê–°–ù–´–ô = –í–†–ê–ì
	enemy_mat.emission_enabled = true
	enemy_mat.emission = Color(0.5, 0.1, 0.1)  # –ö—Ä–∞—Å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
	enemy_core.set_surface_override_material(0, enemy_mat)
	add_child(enemy_core)

	# –ü–æ–¥–ø–∏—Å—å –¥–ª—è —è–¥—Ä–∞ –≤—Ä–∞–≥–∞
	var enemy_label = Label3D.new()
	enemy_label.text = "–í–†–ê–ì (–ö–†–ê–°–ù–´–ô)"
	enemy_label.position = Vector3(0, 3.5, -25)  # –£–≤–µ–ª–∏—á–∏–ª —Å -20 –¥–æ -25
	enemy_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	enemy_label.font_size = 80  # –£–≤–µ–ª–∏—á–∏–ª —Å 56 –¥–æ 80
	enemy_label.modulate = Color(1, 0.2, 0.2, 1)
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
	enemy_label.outline_size = 10
	enemy_label.outline_modulate = Color.BLACK
	add_child(enemy_label)

	# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π - –û–ë–ù–û–í–õ–ï–ù–´ –ü–û–ó–ò–¶–ò–ò
	create_start_spawner("player", Vector3(-5, 0, 20))   # –£–≤–µ–ª–∏—á–∏–ª —Å 15 –¥–æ 20
	create_start_spawner("enemy", Vector3(5, 0, -20))    # –£–≤–µ–ª–∏—á–∏–ª —Å -15 –¥–æ -20

func init_energy_timer():
	# –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
	energy_timer = Timer.new()
	energy_timer.wait_time = energy_tick_time
	energy_timer.autostart = true
	energy_timer.timeout.connect(_on_energy_timer)
	add_child(energy_timer)

func init_territory_system():
	# –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
	territory_system = TerritorySystem.new()
	territory_system.battle_manager = self
	add_child(territory_system)
	print("üè∞ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

func init_ability_system():
	# –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	ability_system = AbilitySystem.new()
	ability_system.battle_manager = self
	add_child(ability_system)
	print("‚ú® –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

func init_race_system():
	# –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å
	race_system = RaceSystem.new()
	race_system.battle_manager = self
	add_child(race_system)
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	race_system.set_player_race(RaceSystem.Race.HUMANS)
	race_system.set_enemy_race(RaceSystem.Race.UNDEAD)  # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ç–∏–≤ —Ç–µ—Ö–Ω–æ-–∑–∞–Ω—É–¥ –ù–µ–∫—Ä–æ–ø–æ–ª—è
	
	print("üèõÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

func init_system_manager():
	# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	print("üîß SystemManager –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
	init_systems_directly()

func init_systems_directly():
	# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –±–µ–∑ SystemManager
	print("üîß –ü—Ä—è–º–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º...")
	
	# EffectSystem
	var effect_script = load("res://scripts/EffectSystem.gd")
	if effect_script:
		effect_system = effect_script.new()
		effect_system.name = "EffectSystem"
		effect_system.battle_manager = self
		add_child(effect_system)
		print("‚úÖ EffectSystem –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	# AudioSystem  
	var audio_script = load("res://scripts/AudioSystem.gd")
	if audio_script:
		audio_system = audio_script.new()
		audio_system.name = "AudioSystem"
		audio_system.battle_manager = self
		add_child(audio_system)
		print("‚úÖ AudioSystem –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	# NotificationSystem
	var notification_script = load("res://scripts/NotificationSystem.gd")
	if notification_script:
		notification_system = notification_script.new()
		notification_system.name = "NotificationSystem"
		notification_system.battle_manager = self
		add_child(notification_system)
		print("‚úÖ NotificationSystem –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	# StatisticsSystem
	var statistics_script = load("res://scripts/StatisticsSystem.gd")
	if statistics_script:
		statistics_system = statistics_script.new()
		statistics_system.name = "StatisticsSystem"
		statistics_system.battle_manager = self
		add_child(statistics_system)
		print("‚úÖ StatisticsSystem –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
	
	print("üîß –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é")

func init_effect_system():
	# –°–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ SystemManager
	print("‚ú® EffectSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ SystemManager")

func init_audio_system():
	# –ê—É–¥–∏–æ—Å–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ SystemManager
	print("üîä AudioSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ SystemManager")

func init_notification_system():
	# –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ SystemManager
	print("üì¢ NotificationSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ SystemManager")

func init_statistics_system():
	# –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ SystemManager
	print("üìä StatisticsSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ SystemManager")

func create_cores_and_spawners():
	# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —è–¥—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
	for node in get_children():
		if node.name == "PlayerCore" or node.name == "EnemyCore":
			node.queue_free()

	# –°–æ–∑–¥–∞—ë–º —è–¥—Ä–æ –∏–≥—Ä–æ–∫–∞ (—Å–∏–Ω–µ–µ) - –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
	var player_core_scene = preload("res://scenes/Core.tscn")
	var player_core = player_core_scene.instantiate()
	player_core.name = "PlayerCore"
	player_core.position = Vector3(0, 0.5, 20)  # –ò–≥—Ä–æ–∫ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å MeshInstance3D
	if not player_core.has_node("MeshInstance3D"):
		var mesh = MeshInstance3D.new()
		mesh.mesh = SphereMesh.new()
		var mat = StandardMaterial3D.new()
		mat.albedo_color = Color(0.2, 0.6, 1, 1)
		mesh.set_surface_override_material(0, mat)
		player_core.add_child(mesh)
	add_child(player_core)

	# –°–æ–∑–¥–∞—ë–º —è–¥—Ä–æ –≤—Ä–∞–≥–∞ (–∫—Ä–∞—Å–Ω–æ–µ) - –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
	var enemy_core_scene = preload("res://scenes/Core.tscn")
	var enemy_core = enemy_core_scene.instantiate()
	enemy_core.name = "EnemyCore"
	enemy_core.position = Vector3(0, 0.5, -20)  # –í—Ä–∞–≥ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
	if not enemy_core.has_node("MeshInstance3D"):
		var mesh = MeshInstance3D.new()
		mesh.mesh = SphereMesh.new()
		var mat = StandardMaterial3D.new()
		mat.albedo_color = Color(1, 0.2, 0.2, 1)
		mesh.set_surface_override_material(0, mat)
		enemy_core.add_child(mesh)
	add_child(enemy_core)

	# –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–ø–∞–≤–Ω–µ—Ä—ã –∏–≥—Ä–æ–∫–∞ –∏ –≤—Ä–∞–≥–∞
	create_start_spawner("player", Vector3(-4, 0, 15))   # –ò–≥—Ä–æ–∫ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
	create_start_spawner("enemy", Vector3(4, 0, -15))    # –í—Ä–∞–≥ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞

func create_start_spawner(team: String, position: Vector3):
	var spawner = spawner_scene.instantiate()
	spawner.position = position
	spawner.name = team.capitalize() + "StartSpawner"
	spawner.set("team", team)
	add_child(spawner)
	spawner.add_to_group("spawners")

func _on_start_battle():
	print("üöÄ === BattleManager –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª start_battle ===")
	print("1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º battle_started = true")
	battle_started = true
	
	print("2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –±–∏—Ç–≤—ã...")
	# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –±–∏—Ç–≤—ã
	if notification_system:
		notification_system.show_battle_start()
	
	print("3. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
	# –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	if statistics_system:
		statistics_system.start_battle()
	
	print("4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã —Å–ø–∞–≤–Ω–µ—Ä–æ–≤...")
	# –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã —Å–ø–∞–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—è
	var spawners = get_tree().get_nodes_in_group("spawners")
	print("üìç –ù–∞–π–¥–µ–Ω–æ —Å–ø–∞–≤–Ω–µ—Ä–æ–≤: ", spawners.size())
	for spawner in spawners:
		if spawner.has_node("SpawnTimer"):
			spawner.get_node("SpawnTimer").autostart = true
			spawner.get_node("SpawnTimer").start()
			print("‚è∞ –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä —Å–ø–∞–≤–Ω–µ—Ä–∞: ", spawner.name)
		else:
			print("‚ùå –°–ø–∞–≤–Ω–µ—Ä –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞: ", spawner.name)
	
	print("5. –ó–∞–ø—É—Å–∫–∞–µ–º AI –≤—Ä–∞–≥–∞...")
	# –ó–∞–ø—É—Å–∫–∞–µ–º AI –≤—Ä–∞–≥–∞
	if enemy_decision_timer:
		enemy_decision_timer.start()
		print("ü§ñ AI —Ç–∞–π–º–µ—Ä —Ä–µ—à–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
	if enemy_ai_timer:
		enemy_ai_timer.start()
		print("ü§ñ AI —Ç–∞–π–º–µ—Ä —Å–ø–∞–≤–Ω–∞ –∑–∞–ø—É—â–µ–Ω")
	
	print("6. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —é–Ω–∏—Ç–æ–≤...")
	# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —é–Ω–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	spawn_unit_at_pos("player", Vector3(-2, 0, 12), "soldier")  # –ò–≥—Ä–æ–∫ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
	spawn_unit_at_pos("enemy", Vector3(2, 0, -12), "soldier")   # –í—Ä–∞–≥ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
	
	print("üéÆ === –ë–ò–¢–í–ê –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–ê! ===")

func _on_energy_timer():
	if not battle_started:
		return
	player_energy += energy_gain_per_tick
	enemy_energy += energy_gain_per_tick
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
func finish_battle(winner):
	battle_finished.emit(winner)
	print("–ë–∏—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ", winner)
	
	# –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∏—Ç–≤—ã
	if statistics_system:
		statistics_system.end_battle(winner)
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ/–ø–æ—Ä–∞–∂–µ–Ω–∏–∏
	if notification_system:
		notification_system.show_victory(winner)
	
	# TODO: –ø–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è

# –°–ø–∞–≤–Ω —é–Ω–∏—Ç–∞ –Ω–∞ –ª–∏–Ω–∏–∏
func spawn_unit(team, lane_idx):
	if not battle_started:
		return
	if lane_idx < 0 or lane_idx >= lanes.size():
		return
	var lane = lanes[lane_idx]
	var start_pos = lane.get_node("Start").global_position
	var end_pos = lane.get_node("End").global_position
	var unit = unit_scene.instantiate()
	unit.team = team
	unit.global_position = start_pos
	unit.target_pos = end_pos
	unit.battle_manager = self
	get_parent().add_child(unit)

func unit_reached_base(unit):
	if unit.team == "player":
		enemy_base_hp -= unit.damage
		if enemy_base_hp <= 0:
			finish_battle("player")
	elif unit.team == "enemy":
		player_base_hp -= unit.damage
		if player_base_hp <= 0:
			finish_battle("enemy")

# TODO: –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É UI, –ø–æ–±–µ–¥—ã, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ –º–µ—Ä–µ —Ä–∞–∑–≤–∏—Ç–∏—è 

func _on_build_pressed():
	if player_energy >= building_cost:
		is_building_mode = true
		create_building_preview()

func create_building_preview():
	if building_preview:
		building_preview.queue_free()
	var preview = unit_scene.instantiate()
	preview.modulate = Color(0.5, 1, 0.5, 0.5) # –∑–µ–ª—ë–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	preview.name = "BuildingPreview"
	preview.set_physics_process(false)
	add_child(preview)
	building_preview = preview

func _unhandled_input(event):
	if is_building_mode:
		if event is InputEventMouseMotion or event is InputEventScreenDrag:
			var pos = get_mouse_map_position(event.position)
			if building_preview:
				building_preview.global_position = pos
				can_build_here = is_valid_build_position(pos)
				building_preview.modulate = Color(0.5, 1, 0.5, 0.5) if can_build_here else Color(1, 0.3, 0.3, 0.5)
		elif event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
			if event.pressed:
				pass
			else:
				if can_build_here and player_energy >= building_cost:
					place_spawner("player", "spawner", building_preview.global_position)
					player_energy -= building_cost
					update_ui()
					building_preview.queue_free()
					building_preview = null
					is_building_mode = false
				else:
					pass
	else:
		if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
			if battle_started and player_energy >= 30:
				var pos = get_mouse_map_position(event.position)
				if is_valid_build_position(pos):
					place_spawner("player", "spawner", pos)
					player_energy -= 30
					update_ui()
	
	# –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_RIGHT and event.pressed:
		if battle_started and ability_system:
			var pos = get_mouse_map_position(event.position)
			# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä –∫–∞–∫ –±–∞–∑–æ–≤—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
			if ability_system.can_use_ability("player", "fireball"):
				ability_system.use_ability("player", "fireball", pos)
				update_ui()
			else:
				print("‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Fireball")

func get_mouse_map_position(screen_pos):
	var camera_to_use = battle_camera if battle_camera else get_viewport().get_camera_3d()
	if not camera_to_use:
		print("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
		return Vector3.ZERO
		
	var from = camera_to_use.project_ray_origin(screen_pos)
	var to = from + camera_to_use.project_ray_normal(screen_pos) * 1000
	var space_state = get_viewport().get_world_3d().direct_space_state
	var query = PhysicsRayQueryParameters3D.new()
	query.from = from
	query.to = to
	var result = space_state.intersect_ray(query)
	if result and result.has("position"):
		return result.position
	return Vector3.ZERO

func get_mouse_world_position() -> Vector3:
	var mouse_pos = get_viewport().get_mouse_position()
	return get_mouse_map_position(mouse_pos)

func is_valid_build_position(pos: Vector3) -> bool:
	var map_width = 40.0
	var map_height = 60.0
	if pos.z < 0:  # –ò–≥—Ä–æ–∫ —Å—Ç—Ä–æ–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ Z)
		return false
	if pos.x < -map_width/2 or pos.x > map_width/2:
		return false
	if pos.z > map_height/2 or pos.z < 0:
		return false
	var spawners = get_tree().get_nodes_in_group("spawners")
	for s in spawners:
		if s.global_position.distance_to(pos) < 1.5:
			return false
	return true

func is_valid_enemy_build_position(pos: Vector3) -> bool:
	var map_width = 40.0
	var map_height = 60.0
	if pos.z > 0:  # –í—Ä–∞–≥ —Å—Ç—Ä–æ–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–µ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ Z)
		return false
	if pos.x < -map_width/2 or pos.x > map_width/2:
		return false
	if pos.z > 0 or pos.z < -map_height/2:
		return false
	var spawners = get_tree().get_nodes_in_group("spawners")
	for s in spawners:
		if s.global_position.distance_to(pos) < 2.0:
			return false
	return true

# Drag&drop: —Å–ø–∞–≤–Ω —é–Ω–∏—Ç–∞
func _on_spawn_unit_drag(unit_type, screen_pos):
	if not battle_started:
		print("‚ùå –ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!")
		return
		
	var energy_cost = get_unit_cost(unit_type)
	var crystal_cost = get_unit_crystal_cost(unit_type)
	
	if player_energy < energy_cost or player_crystals < crystal_cost:
		print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è ", unit_type, " (–Ω—É–∂–Ω–æ: ", energy_cost, " —ç–Ω–µ—Ä–≥–∏–∏, ", crystal_cost, " –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤)")
		return
		
	var pos = get_mouse_map_position(screen_pos)
	print("üéØ Drag&Drop ", unit_type, " –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: ", pos)
	
	if is_valid_unit_position(pos):
		spawn_unit_at_pos("player", pos, unit_type)
		print("‚úÖ ", unit_type, " —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ", pos)
		update_ui()
	else:
		print("‚ùå –ù–µ–ª—å–∑—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å ", unit_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", pos)

# Drag&drop: —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∑–¥–∞–Ω–∏—è
func _on_build_structure_drag(screen_pos):
	if not battle_started or player_energy < 60:
		return
	var pos = get_mouse_map_position(screen_pos)
	if is_valid_build_position(pos):
		place_spawner("player", "tower", pos)
		player_energy -= 60
		update_ui()

func is_valid_unit_position(pos: Vector3) -> bool:
	var map_width = 40.0
	var map_height = 60.0
	if pos.z < 0:  # –ò–≥—Ä–æ–∫ —Ä–∞–∑–º–µ—â–∞–µ—Ç —é–Ω–∏—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ Z)
		return false
	if pos.x < -map_width/2 or pos.x > map_width/2:
		return false
	if pos.z > map_height/2 or pos.z < 0:
		return false
	var spawners = get_tree().get_nodes_in_group("spawners")
	for s in spawners:
		if s.global_position.distance_to(pos) < 2.5:
			return false
	return true

func spawn_unit_at_pos(team, pos, unit_type="soldier"):
	if not can_spawn_unit(team, unit_type):
		print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!")
		return
	
	var energy_cost = get_unit_cost(unit_type)
	var crystal_cost = get_unit_crystal_cost(unit_type)
	
	print("üî® –°–æ–∑–¥–∞–µ–º —é–Ω–∏—Ç–∞: ", team, " ", unit_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", pos)
	var unit = unit_scene.instantiate()
	add_child(unit)
	unit.team = team
	unit.unit_type = unit_type
	unit.global_position = pos
	if team == "player":
		unit.target_pos = Vector3(0, 0, -20)  # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –≤–≤–µ—Ä—Ö (–∫ –≤—Ä–∞–≥—É)
		player_energy -= energy_cost
		player_crystals -= crystal_cost
	else:
		unit.target_pos = Vector3(0, 0, 20)   # –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –≤–Ω–∏–∑ (–∫ –∏–≥—Ä–æ–∫—É)
		enemy_energy -= energy_cost
		enemy_crystals -= crystal_cost
	unit.battle_manager = self
	unit.add_to_group("units")
	
	# –≠—Ñ—Ñ–µ–∫—Ç —Å–ø–∞–≤–Ω–∞ —é–Ω–∏—Ç–∞
	if effect_system:
		effect_system.create_spawn_effect(pos, team)
	
	# –ó–≤—É–∫ —Å–ø–∞–≤–Ω–∞ —é–Ω–∏—Ç–∞
	if audio_system:
		audio_system.play_unit_spawn_sound(pos)
	
	# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —é–Ω–∏—Ç–∞
	if notification_system:
		notification_system.show_unit_spawned(unit_type, team)
	
	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
	if statistics_system:
		statistics_system.register_unit_spawned(team, unit_type)
	
	print("‚úÖ –Æ–Ω–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ", unit.name, " –∫–æ–º–∞–Ω–¥–∞: ", unit.team)
	print("üéØ –¶–µ–ª—å —é–Ω–∏—Ç–∞: ", unit.target_pos)
	var units_in_group = get_tree().get_nodes_in_group("units")
	print("üìä –í—Å–µ–≥–æ —é–Ω–∏—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: ", units_in_group.size())

# –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é update_ui, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
func update_ui():
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy, player_crystals, enemy_crystals)

# –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é place_spawner, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
func place_spawner(team: String, spawner_type: String, position: Vector3):
	if not can_build_structure(team, spawner_type):
		print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")
		return
	var spawner = spawner_scene.instantiate()
	add_child(spawner)
	spawner.team = team
	spawner.spawner_type = spawner_type
	spawner.global_position = position
	spawner.name = team.capitalize() + spawner_type.capitalize() + str(randi())
	spawner.add_to_group("spawners")
	
	# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è collector_facility
	if spawner_type == "collector_facility":
		spawner.unit_type = "collector"
	
	# –ó–≤—É–∫ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–∞–Ω–∏—è
	if audio_system:
		audio_system.play_building_place_sound(position)
	
	# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç—Ä–æ–π–∫–µ
	if notification_system:
		notification_system.show_building_constructed(spawner_type, team)
	
	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
	if statistics_system:
		statistics_system.register_building_built(team, spawner_type)
	
	print("–ü–æ—Å—Ç—Ä–æ–µ–Ω —Å–ø–∞–≤–Ω–µ—Ä: ", team, " ", spawner_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", position)

func init_enemy_ai():
	# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI
	enemy_ai = EnemyAI.new(self, ai_difficulty)
	add_child(enemy_ai)
	
	# –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π AI
	enemy_decision_timer = Timer.new()
	enemy_decision_timer.wait_time = 2.0  # –†–µ—à–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
	enemy_decision_timer.autostart = false  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—è
	enemy_decision_timer.timeout.connect(_on_enemy_ai_decision)
	add_child(enemy_decision_timer)
	
	# –¢–∞–π–º–µ—Ä –¥–ª—è —Å–ø–∞–≤–Ω–∞ —é–Ω–∏—Ç–æ–≤ –≤—Ä–∞–≥–∞
	enemy_ai_timer = Timer.new()
	enemy_ai_timer.wait_time = 4.0  # –°–ø–∞–≤–Ω –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã
	enemy_ai_timer.autostart = false  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—è
	enemy_ai_timer.timeout.connect(_on_enemy_ai_spawn)
	add_child(enemy_ai_timer)

func _on_enemy_ai_decision():
	if not battle_started or not enemy_ai:
		return
	
	print("AI –≤—Ä–∞–≥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ...")
	
	# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏—Ö —é–Ω–∏—Ç–æ–≤ –≤—Ä–∞–≥–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	count_enemy_units()
	
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
	var decision = enemy_ai.make_decision(enemy_decision_timer.wait_time)
	execute_advanced_ai_decision(decision)

func count_enemy_units():
	enemy_current_soldiers = 0
	enemy_current_tanks = 0
	enemy_current_drones = 0
	
	var units = get_tree().get_nodes_in_group("units")
	for unit in units:
		if unit.team == "enemy":
			match unit.unit_type:
				"soldier":
					enemy_current_soldiers += 1
				"tank":
					enemy_current_tanks += 1
				"drone":
					enemy_current_drones += 1
	
	print("–í—Ä–∞–∂–µ—Å–∫–∏–µ —é–Ω–∏—Ç—ã: —Å–æ–ª–¥–∞—Ç—ã=", enemy_current_soldiers, 
		  ", —Ç–∞–Ω–∫–∏=", enemy_current_tanks, 
		  ", –¥—Ä–æ–Ω—ã=", enemy_current_drones)

func make_enemy_decision() -> Dictionary:
	var decision = {
		"action": "none",
		"unit_type": "",
		"position": Vector3.ZERO
	}
	
	# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ –ø–æ–ª–µ –±–æ—è
	var _player_units = get_player_unit_count()  # –î–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	var enemy_spawners_count = get_enemy_spawner_count()
	
	# –ï—Å–ª–∏ –º–∞–ª–æ —Å–æ–ª–¥–∞—Ç - —Å–æ–∑–¥–∞–µ–º —Å–æ–ª–¥–∞—Ç
	if enemy_current_soldiers < enemy_max_soldiers and enemy_energy >= get_unit_cost("soldier"):
		decision.action = "spawn"
		decision.unit_type = "soldier"
		return decision
	
	# –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–ª–¥–∞—Ç—ã, –Ω–æ –º–∞–ª–æ —Ç–∞–Ω–∫–æ–≤ - —Å–æ–∑–¥–∞–µ–º —Ç–∞–Ω–∫
	if enemy_current_soldiers > 0 and enemy_current_tanks < enemy_max_tanks and enemy_energy >= get_unit_cost("tank"):
		decision.action = "spawn"
		decision.unit_type = "tank"
		return decision
	
	# –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–Ω–∫–∏, –Ω–æ –º–∞–ª–æ –¥—Ä–æ–Ω–æ–≤ - —Å–æ–∑–¥–∞–µ–º –¥—Ä–æ–Ω
	if enemy_current_tanks > 0 and enemy_current_drones < enemy_max_drones and enemy_energy >= get_unit_cost("drone"):
		decision.action = "spawn"
		decision.unit_type = "drone"
		return decision
	
	# –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –º–∞–ª–æ —Å–ø–∞–≤–Ω–µ—Ä–æ–≤ - —Å—Ç—Ä–æ–∏–º —Å–ø–∞–≤–Ω–µ—Ä
	if enemy_energy >= get_structure_cost("spawner") and enemy_spawners_count < 3:
		decision.action = "build"
		decision.unit_type = "spawner"
		return decision
	
	# –ï—Å–ª–∏ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ - —Å—Ç—Ä–æ–∏–º –±–∞—à–Ω—é
	if enemy_energy >= get_structure_cost("tower"):
		decision.action = "build"
		decision.unit_type = "tower"
		return decision
	
	return decision

func get_player_unit_count() -> int:
	var count = 0
	var units = get_tree().get_nodes_in_group("units")
	for unit in units:
		if unit.team == "player":
			count += 1
	return count

func get_enemy_spawner_count() -> int:
	var count = 0
	var spawners = get_tree().get_nodes_in_group("spawners")
	for spawner in spawners:
		if spawner.team == "enemy":
			count += 1
	return count

func execute_enemy_decision(decision: Dictionary):
	match decision.action:
		"spawn":
			spawn_enemy_unit(decision.unit_type)
		"build":
			build_enemy_structure(decision.unit_type)
		"none":
			print("AI –≤—Ä–∞–≥–∞: –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π")

func execute_advanced_ai_decision(decision: Dictionary):
	match decision.action:
		"spawn":
			spawn_enemy_unit_at_position(decision.unit_type, decision.position)
		"build":
			build_enemy_structure_at_position(decision.structure_type, decision.position)
		"ability":
			if ability_system and ability_system.can_use_ability("enemy", decision.ability_type):
				ability_system.use_ability("enemy", decision.ability_type, decision.position)
				update_ui()
				print("ü§ñ AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ", decision.ability_type)
		"none":
			print("AI –≤—Ä–∞–≥–∞: –Ω–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ", decision.priority, ")")
	
	# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ AI –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
	ai_consider_collector_strategy()

func spawn_enemy_unit(unit_type: String):
	var cost = get_unit_cost(unit_type)
	if enemy_energy < cost:
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è ", unit_type)
		return
	
	# –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
	var spawn_pos = get_random_enemy_spawn_position()
	
	spawn_unit_at_pos("enemy", spawn_pos, unit_type)
	enemy_energy -= cost
	
	print("AI –≤—Ä–∞–≥–∞ —Å–æ–∑–¥–∞–ª ", unit_type, " –∑–∞ ", cost, " —ç–Ω–µ—Ä–≥–∏–∏")
	
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)

func build_enemy_structure(structure_type: String):
	var cost = get_structure_cost(structure_type)
	if enemy_energy < cost:
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ ", structure_type)
		return
	
	# –í—ã–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
	var build_pos = get_random_enemy_build_position()
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
	if not is_valid_enemy_build_position(build_pos):
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ –º–æ–∂–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤ –ø–æ–∑–∏—Ü–∏–∏ ", build_pos)
		return
	
	place_spawner("enemy", structure_type, build_pos)
	enemy_energy -= cost
	
	print("AI –≤—Ä–∞–≥–∞ –ø–æ—Å—Ç—Ä–æ–∏–ª ", structure_type, " –∑–∞ ", cost, " —ç–Ω–µ—Ä–≥–∏–∏")
	
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)

func spawn_enemy_unit_at_position(unit_type: String, position: Vector3):
	var cost = get_unit_cost(unit_type)
	if enemy_energy < cost:
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è ", unit_type)
		return
	
	spawn_unit_at_pos("enemy", position, unit_type)
	enemy_energy -= cost
	
	print("AI –≤—Ä–∞–≥–∞ —Å–æ–∑–¥–∞–ª ", unit_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", position, " –∑–∞ ", cost, " —ç–Ω–µ—Ä–≥–∏–∏")
	
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)

func build_enemy_structure_at_position(structure_type: String, position: Vector3):
	var cost = get_structure_cost(structure_type)
	if enemy_energy < cost:
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ ", structure_type)
		return
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
	if not is_valid_enemy_build_position(position):
		print("AI –≤—Ä–∞–≥–∞: –Ω–µ –º–æ–∂–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å ", structure_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", position)
		return
	
	place_spawner("enemy", structure_type, position)
	enemy_energy -= cost
	
	print("AI –≤—Ä–∞–≥–∞ –ø–æ—Å—Ç—Ä–æ–∏–ª ", structure_type, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", position, " –∑–∞ ", cost, " —ç–Ω–µ—Ä–≥–∏–∏")
	
	if battle_ui:
		battle_ui.update_info(player_base_hp, player_energy, enemy_base_hp, enemy_energy)

func get_unit_cost(unit_type: String) -> int:
	match unit_type:
		"soldier":
			return 25        # –ë–∞–∑–æ–≤—ã–π —é–Ω–∏—Ç - –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞
		"tank":
			return 60        # –¢–∞–Ω–∫–∏ –¥–æ—Ä–æ–∂–µ –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–≥–æ HP
		"drone":
			return 30        # –°–Ω–∏–∂–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
		"elite_soldier":
			return 35        # –ü—Ä–µ–º–∏—É–º —é–Ω–∏—Ç
		"crystal_mage":
			return 30        # –°–Ω–∏–∂–µ–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è, –Ω–æ –Ω—É–∂–Ω—ã –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
		"heavy_tank":
			return 100       # –°—É–ø–µ—Ä—Ç–∞–Ω–∫ - –æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ
		"collector":
			return 40        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —é–Ω–∏—Ç
		_:
			return 25

func get_unit_crystal_cost(unit_type: String) -> int:
	match unit_type:
		"crystal_mage":
			return 12        # –°–Ω–∏–∂–µ–Ω–æ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
		"elite_soldier":
			return 8         # –°–Ω–∏–∂–µ–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
		"heavy_tank":
			return 15        # –°–Ω–∏–∂–µ–Ω–æ, –Ω–æ –≤—Å–µ –µ—â–µ –¥–æ—Ä–æ–≥–æ
		"collector":
			return 5         # –ù–µ–±–æ–ª—å—à–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
		_:
			return 0

func get_structure_cost(structure_type: String) -> int:
	match structure_type:
		"tower":
			return 60
		"spawner":
			return 30
		"barracks":
			return 80
		"collector_facility":
			return 50  # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
		"orbital_drop":
			return 100
		"energy_generator":
			return 70
		"shield_generator":
			return 90
		"tech_lab":
			return 120
		_:
			return 60

func get_random_enemy_spawn_position() -> Vector3:
	# –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (z < 0, –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞)
	var x = randf_range(-8.0, 8.0)
	var z = randf_range(-18.0, -8.0)
	return Vector3(x, 0, z)

func get_random_enemy_build_position() -> Vector3:
	# –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (–≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞)
	var attempts = 0
	var max_attempts = 10
	
	while attempts < max_attempts:
		var x = randf_range(-6.0, 6.0)
		var z = randf_range(-18.0, -5.0)
		var pos = Vector3(x, 0, z)
		
		if is_valid_enemy_build_position(pos):
			return pos
		
		attempts += 1
	
	# –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–∑–∏—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é
	return Vector3(randf_range(-4.0, 4.0), 0, -12.0)

func _on_enemy_ai_spawn():
	if not battle_started:
		return
	
	# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∞–≤–Ω –±–∞–∑–æ–≤—ã—Ö —é–Ω–∏—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
	if enemy_energy >= 20 and enemy_current_soldiers < 2:
		spawn_enemy_unit("soldier")

func _on_spawn_soldier():
	print("–ö–Ω–æ–ø–∫–∞ —Å–ø–∞–≤–Ω–∞ —Å–æ–ª–¥–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and can_spawn_unit("player", "soldier"):
		# –°–ø–∞–≤–Ω —é–Ω–∏—Ç–∞-—Å–æ–ª–¥–∞—Ç–∞ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º (–≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞)
		var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, 12.0)
		spawn_unit_at_pos("player", spawn_pos, "soldier")
		update_ui()

func _on_build_tower():
	print("–ö–Ω–æ–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –±–∞—à–Ω–∏ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and can_build_structure("player", "tower"):
		# –°—Ç—Ä–æ–∏–º –±–∞—à–Ω—é —Ä—è–¥–æ–º —Å –±–∞–∑–æ–π –∏–≥—Ä–æ–∫–∞ (–≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞)
		var build_pos = Vector3(randf_range(-6.0, 6.0), 0, 15.0)
		if is_valid_build_position(build_pos):
			place_spawner("player", "tower", build_pos)
			player_energy -= get_structure_cost("tower")
			update_ui()

func _on_spawn_elite_soldier():
	print("–ö–Ω–æ–ø–∫–∞ —Å–ø–∞–≤–Ω–∞ —ç–ª–∏—Ç–Ω–æ–≥–æ —Å–æ–ª–¥–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and can_spawn_unit("player", "elite_soldier"):
		var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, 12.0)
		spawn_unit_at_pos("player", spawn_pos, "elite_soldier")
		update_ui()

func _on_spawn_crystal_mage():
	print("–ö–Ω–æ–ø–∫–∞ —Å–ø–∞–≤–Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞–≥–∞ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and can_spawn_unit("player", "crystal_mage"):
		var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, 12.0)
		spawn_unit_at_pos("player", spawn_pos, "crystal_mage")
		update_ui()

func _on_use_ability(ability_name: String, position: Vector3):
	print("–ö–Ω–æ–ø–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ", ability_name, " –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and ability_system and ability_system.can_use_ability("player", ability_name):
		ability_system.use_ability("player", ability_name, position)
		update_ui()
	else:
		print("‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ", ability_name)

func can_spawn_unit(team, unit_type):
	var energy_cost = get_unit_cost(unit_type)
	var crystal_cost = get_unit_crystal_cost(unit_type)
	
	if team == "player":
		return player_energy >= energy_cost and player_crystals >= crystal_cost
	else:
		return enemy_energy >= energy_cost and enemy_crystals >= crystal_cost

func can_build_structure(team, structure_type):
	var cost = get_structure_cost(structure_type)
	if team == "player":
		return player_energy >= cost
	else:
		return enemy_energy >= cost

func on_spawner_drop(spawner_type, global_pos):
	if not battle_started:
		print("[DragDrop] –ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞, –Ω–µ–ª—å–∑—è —Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∞–≤–Ω–µ—Ä—ã!")
		return
	
	var cost = get_structure_cost(spawner_type)
	if player_energy < cost:
		print("[DragDrop] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ ", spawner_type, " (–Ω—É–∂–Ω–æ: ", cost, ", –µ—Å—Ç—å: ", player_energy, ")")
		return
	
	# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ 3D-–ø–æ–∑–∏—Ü–∏—é –Ω–∞ –ø–æ–ª–µ
	var pos = get_mouse_map_position(global_pos)
	print("[DragDrop] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∞–≤–Ω–µ—Ä '", spawner_type, "' –≤ —Ç–æ—á–∫–µ ", pos)
	if is_valid_build_position(pos):
		place_spawner("player", spawner_type, pos)
		player_energy -= cost
		update_ui()
		print("[DragDrop] –°–ø–∞–≤–Ω–µ—Ä '", spawner_type, "' —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω –∑–∞ ", cost, " —ç–Ω–µ—Ä–≥–∏–∏!")
	else:
		print("[DragDrop] –ù–µ–ª—å–∑—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∞–≤–Ω–µ—Ä –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å
func _on_summon_hero(position: Vector3):
	print("ü¶∏ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∑—ã–≤–∞ –≥–µ—Ä–æ—è –Ω–∞–∂–∞—Ç–∞!")
	if not race_system or not battle_started:
		return
		
	var player_race_value = race_system.player_race
	if race_system.can_summon_hero(player_race_value, player_energy, player_crystals):
		if race_system.summon_hero(player_race_value, position, "player"):
			update_ui()
			print("‚úÖ –ì–µ—Ä–æ–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∑–≤–∞–Ω!")
	else:
		print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞ –≥–µ—Ä–æ—è")

func _on_use_race_ability(ability_name: String, position: Vector3):
	print("üé≠ –†–∞—Å–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ", ability_name, " –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!")
	if not race_system or not battle_started:
		return
		
	var player_race_value = race_system.player_race
	if race_system.use_race_ability(player_race_value, ability_name, position, "player"):
		update_ui()
		print("‚úÖ –†–∞—Å–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!")
	else:
		print("‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å–æ–≤—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")

func _on_spawn_collector():
	print("üèÉ –ö–Ω–æ–ø–∫–∞ —Å–ø–∞–≤–Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –Ω–∞–∂–∞—Ç–∞!")
	if battle_started and can_spawn_unit("player", "collector"):
		var spawn_pos = Vector3(randf_range(-4.0, 4.0), 0, 13.0)
		spawn_unit_at_pos("player", spawn_pos, "collector")
		update_ui()
		print("‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π!")

func ai_consider_collector_strategy():
	# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
	if enemy_energy >= get_unit_cost("collector") and enemy_crystals >= get_unit_crystal_cost("collector"):
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
		if territory_system:
			var available_territories = territory_system.get_available_territories_for_team("enemy")
			if available_territories.size() > 0:
				# 30% —à–∞–Ω—Å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
				if randf() < 0.3:
					var spawn_pos = get_random_enemy_spawn_position()
					spawn_unit_at_pos("enemy", spawn_pos, "collector")
					enemy_energy -= get_unit_cost("collector")
					enemy_crystals -= get_unit_crystal_cost("collector")
					print("ü§ñ AI —Å–æ–∑–¥–∞–ª –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π")
					update_ui()
 
 
 
