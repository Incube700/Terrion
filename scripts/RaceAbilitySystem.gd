extends Node
class_name RaceAbilitySystem

# –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π TERRION RTS
# –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Å—Å–∏–≤–Ω—ã–º–∏ –∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –≤—Å–µ—Ö 4 —Ä–∞—Å

signal ability_used(race, ability_name, position)

var battle_manager = null
var ability_cooldowns: Dictionary = {}
var passive_timers: Dictionary = {}
var active_effects: Array[Dictionary] = []

# –¢–∏–ø—ã —Ä–∞—Å
enum Race {
	ELECTRIC_UNDEAD,    # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –ù–µ–∂–∏—Ç—å
	NATURE_ELVES,       # –≠–ª—å—Ñ—ã-–î—Ä—É–∏–¥—ã
	HUMAN_CORPORATION,  # –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è –õ—é–¥–µ–π
	SPACE_ORCS         # –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –û—Ä–∫–∏
}

# –î–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
var race_abilities = {
	Race.ELECTRIC_UNDEAD: {
		"name": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –ù–µ–∂–∏—Ç—å",
		"active_ability": {
			"name": "emp_pulse",
			"display_name": "–≠–ú–ò-–∏–º–ø—É–ª—å—Å",
			"description": "–û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ –∑–¥–∞–Ω–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 20–º –Ω–∞ 30 —Å–µ–∫",
			"cooldown": 120.0,
			"cost_energy": 150,
			"cost_crystals": 0,
			"radius": 20.0,
			"duration": 30.0
		},
		"passive_abilities": [
			{
				"name": "electric_discharge",
				"display_name": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ä–∞–∑—Ä—è–¥",
				"description": "10% —à–∞–Ω—Å –æ–≥–ª—É—à–∏—Ç—å –≤—Ä–∞–≥–∞ –Ω–∞ 1 —Å–µ–∫ –ø—Ä–∏ –∞—Ç–∞–∫–µ",
				"chance": 0.1,
				"duration": 1.0
			},
			{
				"name": "cyber_regeneration",
				"display_name": "–ö–∏–±–µ—Ä-—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
				"description": "+2 HP/—Å–µ–∫ –≤—Å–µ–º —é–Ω–∏—Ç–∞–º",
				"heal_rate": 2.0,
				"interval": 1.0
			},
			{
				"name": "techno_virus",
				"display_name": "–¢–µ—Ö–Ω–æ-–≤–∏—Ä—É—Å",
				"description": "–£–±–∏—Ç—ã–µ –≤—Ä–∞–≥–∏ –¥–∞—é—Ç +25% —Ä–µ—Å—É—Ä—Å–æ–≤",
				"resource_bonus": 0.25
			}
		]
	},
	
	Race.NATURE_ELVES: {
		"name": "–≠–ª—å—Ñ—ã-–î—Ä—É–∏–¥—ã",
		"active_ability": {
			"name": "spore_storm",
			"display_name": "–°–ø–æ—Ä–æ–≤–∞—è –±—É—Ä—è",
			"description": "–°–æ–∑–¥–∞–µ—Ç —Å–ø–æ—Ä–æ–≤–æ–µ –ø–æ–ª–µ 25–º —Ä–∞–¥–∏—É—Å–∞ –Ω–∞ 60 —Å–µ–∫ (+25% —É—Ä–æ–Ω–∞ —Å–æ—é–∑–Ω–∏–∫–∞–º, -25% –≤—Ä–∞–≥–∞–º)",
			"cooldown": 180.0,
			"cost_energy": 0,
			"cost_crystals": 200,
			"radius": 25.0,
			"duration": 60.0,
			"damage_modifier": 0.25
		},
		"passive_abilities": [
			{
				"name": "nature_regeneration",
				"display_name": "–ü—Ä–∏—Ä–æ–¥–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
				"description": "+3 HP/—Å–µ–∫ –≤—Å–µ–º —é–Ω–∏—Ç–∞–º —Ä—è–¥–æ–º —Å –±–∏–æ-–∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏",
				"heal_rate": 3.0,
				"radius": 15.0,
				"interval": 1.0
			},
			{
				"name": "symbiosis",
				"display_name": "–°–∏–º–±–∏–æ–∑",
				"description": "–ó–¥–∞–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è (+1 HP/—Å–µ–∫)",
				"heal_rate": 1.0,
				"interval": 1.0
			},
			{
				"name": "spore_protection",
				"display_name": "–°–ø–æ—Ä–æ–≤–∞—è –∑–∞—â–∏—Ç–∞",
				"description": "-20% —É—Ä–æ–Ω–∞ –æ—Ç –¥–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫",
				"damage_reduction": 0.2
			}
		]
	},
	
	Race.HUMAN_CORPORATION: {
		"name": "–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è –õ—é–¥–µ–π",
		"active_ability": {
			"name": "orbital_strike",
			"display_name": "–û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π —É–¥–∞—Ä",
			"description": "–ú–æ—â–Ω–∞—è –∞—Ç–∞–∫–∞ —Å –æ—Ä–±–∏—Ç—ã (300 —É—Ä–æ–Ω–∞) —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫–∏",
			"cooldown": 90.0,
			"cost_energy": 100,
			"cost_crystals": 0,
			"damage": 300,
			"delay": 5.0,
			"radius": 8.0
		},
		"passive_abilities": [
			{
				"name": "tech_network",
				"display_name": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–µ—Ç—å",
				"description": "–ó–¥–∞–Ω–∏—è –¥–∞—é—Ç +10% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Å–µ–¥–Ω–∏–º –∑–¥–∞–Ω–∏—è–º",
				"efficiency_bonus": 0.1,
				"radius": 12.0
			},
			{
				"name": "automation",
				"display_name": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
				"description": "–°–ø–∞–≤–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ 20% –±—ã—Å—Ç—Ä–µ–µ",
				"speed_bonus": 0.2
			},
			{
				"name": "shields",
				"display_name": "–©–∏—Ç—ã",
				"description": "–í—Å–µ –∑–¥–∞–Ω–∏—è –∏–º–µ—é—Ç +50 HP —â–∏—Ç–æ–≤",
				"shield_amount": 50
			}
		]
	},
	
	Race.SPACE_ORCS: {
		"name": "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –û—Ä–∫–∏",
		"active_ability": {
			"name": "mass_rush",
			"display_name": "–ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—à",
			"description": "–í—Å–µ —é–Ω–∏—Ç—ã –ø–æ–ª—É—á–∞—é—Ç +100% —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ 20 —Å–µ–∫",
			"cooldown": 150.0,
			"cost_energy": 120,
			"cost_crystals": 0,
			"speed_bonus": 1.0,
			"duration": 20.0
		},
		"passive_abilities": [
			{
				"name": "fire_trails",
				"display_name": "–û–≥–Ω–µ–Ω–Ω—ã–µ —Å–ª–µ–¥—ã",
				"description": "–î–≤–∏–∂—É—â–∏–µ—Å—è —é–Ω–∏—Ç—ã –æ—Å—Ç–∞–≤–ª—è—é—Ç –æ–≥–æ–Ω—å (5 —É—Ä–æ–Ω–∞/—Å–µ–∫)",
				"damage_per_second": 5.0,
				"trail_duration": 3.0
			},
			{
				"name": "battle_frenzy",
				"display_name": "–ë–æ–µ–≤–æ–µ –±–µ–∑—É–º–∏–µ",
				"description": "–ü—Ä–∏ HP < 50% —É—Ä–æ–Ω —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 50%",
				"health_threshold": 0.5,
				"damage_bonus": 0.5
			},
			{
				"name": "fast_construction",
				"display_name": "–ë—ã—Å—Ç—Ä–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
				"description": "–ó–¥–∞–Ω–∏—è —Å—Ç—Ä–æ—è—Ç—Å—è –Ω–∞ 30% –±—ã—Å—Ç—Ä–µ–µ",
				"speed_bonus": 0.3
			}
		]
	}
}

func _ready():
	print("üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π...")
	
	# –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Å—Å–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
	var passive_timer = Timer.new()
	passive_timer.wait_time = 1.0
	passive_timer.autostart = true
	passive_timer.timeout.connect(_process_passive_effects)
	add_child(passive_timer)
	
	# –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
	var effect_timer = Timer.new()
	effect_timer.wait_time = 0.5
	effect_timer.autostart = true
	effect_timer.timeout.connect(_process_active_effects)
	add_child(effect_timer)

func set_battle_manager(manager):
	battle_manager = manager
	print("üé≠ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ BattleManager")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
func can_use_ability(team: String, ability_name: String) -> bool:
	if not battle_manager:
		return false
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
	var cooldown_key = team + "_" + ability_name
	if ability_cooldowns.has(cooldown_key):
		var time_left = ability_cooldowns[cooldown_key] - Time.get_unix_time_from_system()
		if time_left > 0:
			print("‚ùå –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ", ability_name, " –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ –µ—â–µ ", time_left, " —Å–µ–∫")
			return false
	
	return true

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
func use_ability(team: String, ability_name: String, position: Vector3) -> bool:
	if not can_use_ability(team, ability_name):
		return false
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
	var cooldown_key = team + "_" + ability_name
	var current_time = Time.get_unix_time_from_system()
	var cooldown_time = get_ability_cooldown_time(ability_name)
	ability_cooldowns[cooldown_key] = current_time + cooldown_time
	
	# –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
	execute_ability(team, ability_name, position)
	
	ability_used.emit(0, ability_name, position)  # 0 - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è race
	print("‚ú® ", team, " –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ", ability_name, " –≤ –ø–æ–∑–∏—Ü–∏–∏ ", position)
	
	return true

func get_ability_cooldown_time(ability_name: String) -> float:
	match ability_name:
		"emp_pulse": return 120.0
		"spore_storm": return 180.0
		"orbital_strike": return 90.0
		"mass_rush": return 150.0
		_: return 60.0

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
func execute_ability(team: String, ability_name: String, position: Vector3):
	match ability_name:
		"emp_pulse":
			execute_emp_pulse(team, position)
		"spore_storm":
			execute_spore_storm(team, position)
		"orbital_strike":
			execute_orbital_strike(team, position)
		"mass_rush":
			execute_mass_rush(team)
		_:
			print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ", ability_name)

# === –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ê–ö–¢–ò–í–ù–´–• –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô ===

func execute_emp_pulse(team: String, position: Vector3):
	print("‚ö° –≠–ú–ò-–∏–º–ø—É–ª—å—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
	
	var radius = 20.0
	var duration = 30.0
	
	# –ò—â–µ–º –≤—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ –∑–¥–∞–Ω–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ
	var enemy_team = "enemy" if team == "player" else "player"
	var buildings = get_tree().get_nodes_in_group("spawners")
	
	var affected_buildings = []
	for building in buildings:
		if "team" in building and building.team == enemy_team:
			var distance = position.distance_to(building.global_position)
			if distance <= radius:
				affected_buildings.append(building)
	
	# –û—Ç–∫–ª—é—á–∞–µ–º –∑–¥–∞–Ω–∏—è
	for building in affected_buildings:
		disable_building(building, duration)
		print("üîå –ó–¥–∞–Ω–∏–µ ", building.name, " –æ—Ç–∫–ª—é—á–µ–Ω–æ –Ω–∞ ", duration, " —Å–µ–∫—É–Ω–¥")
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if battle_manager and battle_manager.notification_system:
		battle_manager.notification_system.show_notification("‚ö° –≠–ú–ò-–∏–º–ø—É–ª—å—Å –æ—Ç–∫–ª—é—á–∏–ª " + str(affected_buildings.size()) + " –∑–¥–∞–Ω–∏–π!")

func execute_spore_storm(team: String, position: Vector3):
	print("üåø –°–ø–æ—Ä–æ–≤–∞—è –±—É—Ä—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
	
	var effect = {
		"type": "spore_storm",
		"team": team,
		"position": position,
		"radius": 25.0,
		"duration": 60.0,
		"damage_modifier": 0.25,
		"start_time": Time.get_unix_time_from_system()
	}
	
	active_effects.append(effect)
	
	if battle_manager and battle_manager.notification_system:
		battle_manager.notification_system.show_notification("üåø –°–ø–æ—Ä–æ–≤–∞—è –±—É—Ä—è —Å–æ–∑–¥–∞–Ω–∞! –°–æ—é–∑–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å –∫ —É—Ä–æ–Ω—É!")

func execute_orbital_strike(team: String, position: Vector3):
	print("üöÄ –û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π —É–¥–∞—Ä –∑–∞–ø—É—â–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π ", team, "!")
	
	var delay = 5.0
	
	# –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º position
	var strike_timer = Timer.new()
	strike_timer.wait_time = delay
	strike_timer.one_shot = true
	# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π capture –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π position
	strike_timer.timeout.connect(execute_orbital_damage.bind(position))
	add_child(strike_timer)
	strike_timer.start()
	
	if battle_manager and battle_manager.notification_system:
		battle_manager.notification_system.show_notification("üöÄ –û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π —É–¥–∞—Ä —á–µ—Ä–µ–∑ " + str(delay) + " —Å–µ–∫—É–Ω–¥!")

func execute_orbital_damage(position: Vector3):
	print("üí• –û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π —É–¥–∞—Ä –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω!")
	
	var damage = 300
	var radius = 8.0
	
	# –ò—â–µ–º –≤—Å–µ—Ö —é–Ω–∏—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
	var units = get_tree().get_nodes_in_group("units")
	var buildings = get_tree().get_nodes_in_group("spawners")
	
	var targets = units + buildings
	var hit_count = 0
	
	for target in targets:
		var distance = position.distance_to(target.global_position)
		if distance <= radius and target.has_method("take_damage"):
			target.take_damage(damage)
			hit_count += 1
	
	print("üí• –û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π —É–¥–∞—Ä –ø–æ—Ä–∞–∑–∏–ª ", hit_count, " —Ü–µ–ª–µ–π")

func execute_mass_rush(team: String):
	print("üèçÔ∏è –ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—à –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
	
	var speed_bonus = 1.0
	var duration = 20.0
	
	# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —é–Ω–∏—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	var units = get_tree().get_nodes_in_group("units")
	var affected_units = []
	
	for unit in units:
		if "team" in unit and unit.team == team:
			affected_units.append(unit)
			# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
			unit.speed *= (1.0 + speed_bonus)
	
	# –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã –±–æ–Ω—É—Å–∞ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
	var effect = {
		"type": "mass_rush",
		"team": team,
		"affected_units": affected_units,
		"speed_bonus": speed_bonus,
		"duration": duration,
		"start_time": Time.get_unix_time_from_system()
	}
	
	active_effects.append(effect)
	
	if battle_manager and battle_manager.notification_system:
		battle_manager.notification_system.show_notification("üèçÔ∏è –ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—à! " + str(affected_units.size()) + " —é–Ω–∏—Ç–æ–≤ —É—Å–∫–æ—Ä–µ–Ω—ã!")

# === –û–ë–†–ê–ë–û–¢–ö–ê –ü–ê–°–°–ò–í–ù–´–• –≠–§–§–ï–ö–¢–û–í ===

func _process_passive_effects():
	# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
	process_team_passives("player")
	process_team_passives("enemy")
	
	# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
	_process_active_effects()

func process_team_passives(team: String):
	# –ö–∏–±–µ—Ä-—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –Ω–µ–∂–∏—Ç–∏
	if team == "player":  # –ü–æ–∫–∞ –∏–≥—Ä–æ–∫ = –Ω–µ–∂–∏—Ç—å
		apply_cyber_regeneration(team)

func apply_cyber_regeneration(team: String):
	var heal_rate = 2.0
	var units = get_tree().get_nodes_in_group("units")
	
	for unit in units:
		if "team" in unit and unit.team == team:
			if unit.health < unit.max_health:
				unit.health = min(unit.health + heal_rate, unit.max_health)
				unit.update_health_display()

# === –û–ë–†–ê–ë–û–¢–ö–ê –ê–ö–¢–ò–í–ù–´–• –≠–§–§–ï–ö–¢–û–í ===

func _process_active_effects():
	var current_time = Time.get_unix_time_from_system()
	
	# –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
	for i in range(active_effects.size() - 1, -1, -1):
		var effect = active_effects[i]
		var elapsed = current_time - effect["start_time"]
		
		if elapsed >= effect["duration"]:
			remove_active_effect(effect)
			active_effects.remove_at(i)

func remove_active_effect(effect: Dictionary):
	match effect["type"]:
		"mass_rush":
			# –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —é–Ω–∏—Ç–∞–º
			for unit in effect["affected_units"]:
				if is_instance_valid(unit):
					unit.speed /= (1.0 + effect["speed_bonus"])
			print("üèçÔ∏è –ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—à –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

func disable_building(building, duration: float):
	if building.has_method("disable"):
		building.disable(duration)
	else:
		# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
		building.set("production_disabled", true)
		
		var timer = Timer.new()
		timer.wait_time = duration
		timer.one_shot = true
		# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π capture –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π building
		timer.timeout.connect(func(): 
			if is_instance_valid(building):
				building.set("production_disabled", false)
		)
		add_child(timer)
		timer.start()

# === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

func get_ability_cooldown(team: String, ability_name: String) -> float:
	var cooldown_key = team + "_" + ability_name
	
	if ability_cooldowns.has(cooldown_key):
		var current_time = Time.get_unix_time_from_system()
		var time_left = ability_cooldowns[cooldown_key] - current_time
		return max(0.0, time_left)
	
	return 0.0

func is_ability_ready(team: String, ability_name: String) -> bool:
	return get_ability_cooldown(team, ability_name) <= 0.0 
 
 
