extends Node
class_name TerritorySystem

# –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∑–æ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ
# –ü–æ—Ö–æ–∂–µ –Ω–∞ Tiny Clash - –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∑–æ–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤

signal territory_captured(territory_id, new_owner)
signal resource_generated(territory_id, owner, amount)

var territories: Array[Dictionary] = []
var territory_meshes: Array[MeshInstance3D] = []
var battle_manager = null

# –¢–∏–ø—ã —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
enum TerritoryType {
	NEUTRAL,
	ENERGY_MINE,    # –î–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é
	CRYSTAL_MINE,   # –î–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª—ã (–Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å)
	STRATEGIC_POINT # –î–∞–µ—Ç –±–æ–Ω—É—Å –∫ –∞—Ç–∞–∫–µ/–∑–∞—â–∏—Ç–µ
}

func _ready():
	# –°–æ–∑–¥–∞–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
	create_territories()
	
	# –¢–∞–π–º–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
	var resource_timer = Timer.new()
	resource_timer.wait_time = 3.0
	resource_timer.autostart = true
	resource_timer.timeout.connect(_on_resource_generation)
	add_child(resource_timer)

func create_territories():
	# –°–æ–∑–¥–∞–µ–º 6 —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ –≤ —Å—Ç–∏–ª–µ Tiny Clash
	var territory_positions = [
		Vector3(-8, 0.1, -8),   # –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è
		Vector3(8, 0.1, -8),    # –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è  
		Vector3(-8, 0.1, 8),    # –õ–µ–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è
		Vector3(8, 0.1, 8),     # –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è
		Vector3(-5, 0.1, 0),    # –¶–µ–Ω—Ç—Ä –ª–µ–≤—ã–π
		Vector3(5, 0.1, 0)      # –¶–µ–Ω—Ç—Ä –ø—Ä–∞–≤—ã–π
	]
	
	var territory_types = [
		TerritoryType.ENERGY_MINE,
		TerritoryType.CRYSTAL_MINE,
		TerritoryType.ENERGY_MINE,
		TerritoryType.CRYSTAL_MINE,
		TerritoryType.STRATEGIC_POINT,
		TerritoryType.STRATEGIC_POINT
	]
	
	for i in range(territory_positions.size()):
		var territory = create_territory(i, territory_positions[i], territory_types[i])
		territories.append(territory)

func create_territory(id: int, position: Vector3, type: TerritoryType) -> Dictionary:
	var territory = {
		"id": id,
		"position": position,
		"type": type,
		"owner": "neutral",
		"capture_progress": 0.0,
		"max_capture_time": 5.0,
		"resource_generation_rate": get_resource_rate(type),
		"control_radius": 3.0
	}
	
	# –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
	create_territory_visual(territory)
	
	return territory

func create_territory_visual(territory: Dictionary):
	var mesh_instance = MeshInstance3D.new()
	var cylinder = CylinderMesh.new()
	cylinder.top_radius = territory.control_radius
	cylinder.bottom_radius = territory.control_radius
	cylinder.height = 0.2
	mesh_instance.mesh = cylinder
	mesh_instance.position = territory.position
	
	# –ú–∞—Ç–µ—Ä–∏–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
	var material = StandardMaterial3D.new()
	match territory.type:
		TerritoryType.ENERGY_MINE:
			material.albedo_color = Color(0.2, 0.8, 1.0, 0.5)  # –ì–æ–ª—É–±–æ–π
		TerritoryType.CRYSTAL_MINE:
			material.albedo_color = Color(1.0, 0.2, 1.0, 0.5)  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
		TerritoryType.STRATEGIC_POINT:
			material.albedo_color = Color(1.0, 1.0, 0.2, 0.5)  # –ñ–µ–ª—Ç—ã–π
		_:
			material.albedo_color = Color(0.5, 0.5, 0.5, 0.5)  # –°–µ—Ä—ã–π
	
	material.flags_transparent = true
	mesh_instance.set_surface_override_material(0, material)
	
	get_parent().add_child(mesh_instance)
	territory_meshes.append(mesh_instance)

func get_resource_rate(type: TerritoryType) -> int:
	match type:
		TerritoryType.ENERGY_MINE:
			return 15  # –≠–Ω–µ—Ä–≥–∏—è –≤ —Å–µ–∫—É–Ω–¥—É
		TerritoryType.CRYSTAL_MINE:
			return 10  # –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –≤ —Å–µ–∫—É–Ω–¥—É
		TerritoryType.STRATEGIC_POINT:
			return 5   # –ë–æ–Ω—É—Å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
		_:
			return 0

func _on_resource_generation():
	for territory in territories:
		if territory.owner != "neutral":
			var amount = territory.resource_generation_rate
			resource_generated.emit(territory.id, territory.owner, amount)
			
			# –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤ BattleManager
			if battle_manager:
				if territory.owner == "player":
					if territory.type == TerritoryType.CRYSTAL_MINE:
						battle_manager.player_crystals += amount
					else:
						battle_manager.player_energy += amount
				elif territory.owner == "enemy":
					if territory.type == TerritoryType.CRYSTAL_MINE:
						battle_manager.enemy_crystals += amount
					else:
						battle_manager.enemy_energy += amount

func check_territory_capture(unit_position: Vector3, team: String):
	for territory in territories:
		var distance = unit_position.distance_to(territory.position)
		if distance <= territory.control_radius:
			attempt_capture(territory, team)

func attempt_capture(territory: Dictionary, team: String):
	if territory.owner == team:
		return  # –£–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π
	
	# –õ–æ–≥–∏–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
	territory.capture_progress += 1.0
	
	if territory.capture_progress >= territory.max_capture_time:
		var old_owner = territory.owner
		territory.owner = team
		territory.capture_progress = 0.0
		
		# –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª
		update_territory_visual(territory)
		
		territory_captured.emit(territory.id, team)
		print("üè≥Ô∏è –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è ", territory.id, " –∑–∞—Ö–≤–∞—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π ", team)

func update_territory_visual(territory: Dictionary):
	var mesh_index = territory.id
	if mesh_index < territory_meshes.size():
		var mesh = territory_meshes[mesh_index]
		var material = mesh.get_surface_override_material(0)
		
		if territory.owner == "player":
			material.albedo_color.r = 0.2
			material.albedo_color.g = 0.6
			material.albedo_color.b = 1.0
		elif territory.owner == "enemy":
			material.albedo_color.r = 1.0
			material.albedo_color.g = 0.2
			material.albedo_color.b = 0.2
		else:
			# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –ø–æ —Ç–∏–ø—É
			match territory.type:
				TerritoryType.ENERGY_MINE:
					material.albedo_color = Color(0.2, 0.8, 1.0, 0.5)
				TerritoryType.CRYSTAL_MINE:
					material.albedo_color = Color(1.0, 0.2, 1.0, 0.5)
				TerritoryType.STRATEGIC_POINT:
					material.albedo_color = Color(1.0, 1.0, 0.2, 0.5)

func get_territory_info() -> Array[Dictionary]:
	return territories

func get_controlled_territories(team: String) -> int:
	var count = 0
	for territory in territories:
		if territory.owner == team:
			count += 1
	return count 