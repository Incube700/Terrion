extends Node
class_name TerritorySystem

# –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∑–æ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ
# –ü–æ—Ö–æ–∂–µ –Ω–∞ Tiny Clash - –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∑–æ–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤

signal territory_captured(territory_id, new_owner)
signal resource_generated(territory_id, owner, amount)

var territories: Array[Dictionary] = []
var territory_meshes: Array[MeshInstance3D] = []
var battle_manager = null

# –¢–∏–ø—ã —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
enum TerritoryType {
	NEUTRAL,
	ENERGY_MINE,        # –î–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é
	CRYSTAL_MINE,       # –î–∞–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
	STRATEGIC_POINT,    # –î–∞–µ—Ç –±–æ–Ω—É—Å –∫ –∞—Ç–∞–∫–µ/–∑–∞—â–∏—Ç–µ
	DEFENSIVE_TOWER,    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥–æ–≤
	FACTORY,            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —é–Ω–∏—Ç–æ–≤
	PORTAL,             # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —é–Ω–∏—Ç–æ–≤
	ANCIENT_ALTAR,      # –î–∞–µ—Ç –º–æ—â–Ω—ã–µ –±–æ–Ω—É—Å—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	BATTLEFIELD_SHRINE  # –í–æ—Å–∫—Ä–µ—à–∞–µ—Ç –ø–∞–≤—à–∏—Ö —é–Ω–∏—Ç–æ–≤
}

func _ready():
	# –°–æ–∑–¥–∞–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
	create_territories()
	
	# –¢–∞–π–º–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
	var resource_timer = Timer.new()
	resource_timer.wait_time = 3.0
	resource_timer.autostart = true
	resource_timer.timeout.connect(_on_resource_generation)
	add_child(resource_timer)

func create_territories():
	# –°–æ–∑–¥–∞–µ–º 9 —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
	var territory_positions = [
		Vector3(-10, 0.1, -12),  # –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è
		Vector3(10, 0.1, -12),   # –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è  
		Vector3(-10, 0.1, 12),   # –õ–µ–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è
		Vector3(10, 0.1, 12),    # –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è
		Vector3(-6, 0.1, 0),     # –¶–µ–Ω—Ç—Ä –ª–µ–≤—ã–π
		Vector3(6, 0.1, 0),      # –¶–µ–Ω—Ç—Ä –ø—Ä–∞–≤—ã–π
		Vector3(0, 0.1, -6),     # –¶–µ–Ω—Ç—Ä –Ω–∏–∂–Ω–∏–π
		Vector3(0, 0.1, 6),      # –¶–µ–Ω—Ç—Ä –≤–µ—Ä—Ö–Ω–∏–π
		Vector3(0, 0.1, 0)       # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
	]
	
	var territory_types = [
		TerritoryType.ENERGY_MINE,      # –†–µ—Å—É—Ä—Å—ã –≤–Ω–∏–∑—É
		TerritoryType.CRYSTAL_MINE,     # –†–µ—Å—É—Ä—Å—ã –≤–Ω–∏–∑—É
		TerritoryType.ENERGY_MINE,      # –†–µ—Å—É—Ä—Å—ã –≤–≤–µ—Ä—Ö—É
		TerritoryType.CRYSTAL_MINE,     # –†–µ—Å—É—Ä—Å—ã –≤–≤–µ—Ä—Ö—É
		TerritoryType.DEFENSIVE_TOWER,  # –û–±–æ—Ä–æ–Ω–∞ —Å–ª–µ–≤–∞
		TerritoryType.FACTORY,          # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å–ø—Ä–∞–≤–∞
		TerritoryType.PORTAL,           # –¢–µ–ª–µ–ø–æ—Ä—Ç –≤–Ω–∏–∑—É
		TerritoryType.BATTLEFIELD_SHRINE, # –í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö—É
		TerritoryType.ANCIENT_ALTAR     # –ú–æ—â–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ü–µ–Ω—Ç—Ä–µ
	]
	
	for i in range(territory_positions.size()):
		var territory = create_territory(i, territory_positions[i], territory_types[i])
		territories.append(territory)

func create_territory(id: int, position: Vector3, type: TerritoryType) -> Dictionary:
	var territory = {
		"id": id,
		"position": position,
		"type": type,
		"owner": "neutral",
		"capture_progress": 0.0,
		"max_capture_time": 5.0,
		"resource_generation_rate": get_resource_rate(type),
		"control_radius": 3.0
	}
	
	# –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
	create_territory_visual(territory)
	
	return territory

func create_territory_visual(territory: Dictionary):
	var mesh_instance = MeshInstance3D.new()
	var cylinder = CylinderMesh.new()
	cylinder.top_radius = territory.control_radius
	cylinder.bottom_radius = territory.control_radius
	cylinder.height = 0.2
	mesh_instance.mesh = cylinder
	mesh_instance.position = territory.position
	
	# –ú–∞—Ç–µ—Ä–∏–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
	var material = StandardMaterial3D.new()
	match territory.type:
		TerritoryType.ENERGY_MINE:
			material.albedo_color = Color(0.2, 0.8, 1.0, 0.5)  # –ì–æ–ª—É–±–æ–π
		TerritoryType.CRYSTAL_MINE:
			material.albedo_color = Color(1.0, 0.2, 1.0, 0.5)  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
		TerritoryType.STRATEGIC_POINT:
			material.albedo_color = Color(1.0, 1.0, 0.2, 0.5)  # –ñ–µ–ª—Ç—ã–π
		TerritoryType.DEFENSIVE_TOWER:
			material.albedo_color = Color(0.8, 0.2, 0.2, 0.5)  # –ö—Ä–∞—Å–Ω—ã–π
		TerritoryType.FACTORY:
			material.albedo_color = Color(0.5, 0.5, 0.5, 0.5)  # –°–µ—Ä—ã–π
		TerritoryType.PORTAL:
			material.albedo_color = Color(0.2, 1.0, 0.2, 0.5)  # –ó–µ–ª–µ–Ω—ã–π
		TerritoryType.ANCIENT_ALTAR:
			material.albedo_color = Color(1.0, 0.8, 0.2, 0.5)  # –ó–æ–ª–æ—Ç–æ–π
		TerritoryType.BATTLEFIELD_SHRINE:
			material.albedo_color = Color(0.8, 0.8, 1.0, 0.5)  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
		_:
			material.albedo_color = Color(0.5, 0.5, 0.5, 0.5)  # –°–µ—Ä—ã–π
	
	material.flags_transparent = true
	mesh_instance.set_surface_override_material(0, material)
	
	get_parent().add_child(mesh_instance)
	territory_meshes.append(mesh_instance)

func get_resource_rate(type: TerritoryType) -> int:
	match type:
		TerritoryType.ENERGY_MINE:
			return 15  # –≠–Ω–µ—Ä–≥–∏—è –≤ —Å–µ–∫—É–Ω–¥—É
		TerritoryType.CRYSTAL_MINE:
			return 10  # –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –≤ —Å–µ–∫—É–Ω–¥—É
		TerritoryType.STRATEGIC_POINT:
			return 5   # –ë–æ–Ω—É—Å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
		TerritoryType.ANCIENT_ALTAR:
			return 8   # –ë–æ–Ω—É—Å –∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º
		_:
			return 0

func _on_resource_generation():
	for territory in territories:
		if territory.owner != "neutral":
			# –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
			apply_territory_effects(territory)

func apply_territory_effects(territory: Dictionary):
	if not battle_manager:
		return
	
	var owner = territory.owner
	var amount = territory.resource_generation_rate
	
	match territory.type:
		TerritoryType.ENERGY_MINE:
			add_resource(owner, "energy", amount)
			
		TerritoryType.CRYSTAL_MINE:
			add_resource(owner, "crystals", amount)
			
		TerritoryType.STRATEGIC_POINT:
			add_resource(owner, "energy", amount)
			
		TerritoryType.DEFENSIVE_TOWER:
			# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –≤—Ä–∞–≥–æ–≤
			auto_attack_enemies(territory)
			
		TerritoryType.FACTORY:
			# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤
			auto_produce_units(territory)
			
		TerritoryType.PORTAL:
			# –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤
			teleport_friendly_units(territory)
			
		TerritoryType.ANCIENT_ALTAR:
			# –°–Ω–∏–∂–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
			reduce_ability_cooldowns(territory)
			add_resource(owner, "crystals", amount)
			
		TerritoryType.BATTLEFIELD_SHRINE:
			# –õ–µ—á–µ–Ω–∏–µ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ
			heal_friendly_units(territory)

func add_resource(owner: String, resource_type: String, amount: int):
	match resource_type:
		"energy":
			if owner == "player":
				battle_manager.player_energy += amount
			else:
				battle_manager.enemy_energy += amount
		"crystals":
			if owner == "player":
				battle_manager.player_crystals += amount
			else:
				battle_manager.enemy_crystals += amount

func check_territory_capture(unit_position: Vector3, team: String):
	for territory in territories:
		var distance = unit_position.distance_to(territory.position)
		if distance <= territory.control_radius:
			attempt_capture(territory, team)

func attempt_capture(territory: Dictionary, team: String):
	if territory.owner == team:
		return  # –£–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π
	
	# –õ–æ–≥–∏–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
	territory.capture_progress += 1.0
	
	if territory.capture_progress >= territory.max_capture_time:
		territory.owner = team
		territory.capture_progress = 0.0
		
		# –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª
		update_territory_visual(territory)
		
		territory_captured.emit(territory.id, team)
		print("üè≥Ô∏è –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è ", territory.id, " –∑–∞—Ö–≤–∞—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π ", team)

func update_territory_visual(territory: Dictionary):
	var mesh_index = territory.id
	if mesh_index < territory_meshes.size():
		var mesh = territory_meshes[mesh_index]
		var material = mesh.get_surface_override_material(0)
		
		if territory.owner == "player":
			material.albedo_color.r = 0.2
			material.albedo_color.g = 0.6
			material.albedo_color.b = 1.0
		elif territory.owner == "enemy":
			material.albedo_color.r = 1.0
			material.albedo_color.g = 0.2
			material.albedo_color.b = 0.2
		else:
			# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –ø–æ —Ç–∏–ø—É
			match territory.type:
				TerritoryType.ENERGY_MINE:
					material.albedo_color = Color(0.2, 0.8, 1.0, 0.5)
				TerritoryType.CRYSTAL_MINE:
					material.albedo_color = Color(1.0, 0.2, 1.0, 0.5)
				TerritoryType.STRATEGIC_POINT:
					material.albedo_color = Color(1.0, 1.0, 0.2, 0.5)

func get_territory_info() -> Array[Dictionary]:
	return territories

func get_controlled_territories(team: String) -> int:
	var count = 0
	for territory in territories:
		if territory.owner == team:
			count += 1
	return count

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
func auto_attack_enemies(territory: Dictionary):
	# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –∏ –∞—Ç–∞–∫—É–µ–º –∏—Ö
	var enemy_team = "enemy" if territory.owner == "player" else "player"
	var _attack_radius = 5.0  # –ü—Ä–µ—Ñ–∏–∫—Å _ –¥–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
	
	# –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–æ–≤
	print("üî• Defensive tower attacking ", enemy_team, " near territory ", territory.id)

func auto_produce_units(territory: Dictionary):
	# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –±–∞–∑–æ–≤—ã—Ö —é–Ω–∏—Ç–æ–≤
	var owner = territory.owner
	var cost = 20
	
	if owner == "player" and battle_manager.player_energy >= cost:
		battle_manager.player_energy -= cost
		# –°–ø–∞–≤–Ω–∏–º —é–Ω–∏—Ç–∞ —Ä—è–¥–æ–º —Å —Ñ–∞–±—Ä–∏–∫–æ–π
		var spawn_pos = territory.position + Vector3(randf_range(-2, 2), 0, randf_range(-2, 2))
		battle_manager.spawn_unit_at_pos("player", spawn_pos, "soldier")
		print("üè≠ Factory produced soldier for ", owner)
	elif owner == "enemy" and battle_manager.enemy_energy >= cost:
		battle_manager.enemy_energy -= cost
		var spawn_pos = territory.position + Vector3(randf_range(-2, 2), 0, randf_range(-2, 2))
		battle_manager.spawn_unit_at_pos("enemy", spawn_pos, "soldier")
		print("üè≠ Factory produced soldier for ", owner)

func teleport_friendly_units(territory: Dictionary):
	# –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞ –∫ –ø–æ—Ä—Ç–∞–ª—É
	print("üåÄ Portal effect activated for ", territory.owner)

func reduce_ability_cooldowns(territory: Dictionary):
	# –°–Ω–∏–∂–∞–µ–º –∫—É–ª–¥–∞—É–Ω—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
	if territory.owner == "player" and battle_manager.has_method("reduce_cooldowns"):
		battle_manager.reduce_cooldowns(0.5)  # –°–Ω–∏–∂–∞–µ–º –Ω–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã
	print("‚ú® Ancient altar reducing cooldowns for ", territory.owner)

func heal_friendly_units(territory: Dictionary):
	# –õ–µ—á–∏–º –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ
	var _heal_radius = 4.0  # –ü—Ä–µ—Ñ–∏–∫—Å _ –¥–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
	var _heal_amount = 10   # –ü—Ä–µ—Ñ–∏–∫—Å _ –¥–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
	print("üíö Battlefield shrine healing units for ", territory.owner)
