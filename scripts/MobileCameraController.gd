# mobile_camera_controller.gd - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
# –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π –Ω–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞—Ö

class_name MobileCameraController
extends Node

signal camera_moved(new_position: Vector3)
signal zoom_changed(new_zoom: float)

# –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–º–µ—Ä—É
var camera: Camera3D
var battle_manager: Node

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
var mobile_settings = {
	"zoom_sensitivity": 1.5,      # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑—É–º–∞
	"pan_sensitivity": 1.2,       # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
	"edge_scrolling": false,      # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
	"auto_follow": true,          # –ê–≤—Ç–æ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
	"smart_zoom": true,           # –£–º–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –≤–∞–∂–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º
	"gesture_controls": true,     # –ñ–µ—Å—Ç–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
	"vibration_feedback": true    # –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Å–∞–Ω–∏–π
var touch_points = {}
var last_pinch_distance = 0.0
var is_panning = false
var is_pinching = false
var pan_start_position = Vector2.ZERO
var camera_start_position = Vector3.ZERO

# –ì—Ä–∞–Ω–∏—Ü—ã –∫–∞–º–µ—Ä—ã (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã)
var camera_bounds = {
	"min_x": -35.0,
	"max_x": 35.0,
	"min_z": -45.0,
	"max_z": 45.0,
	"min_y": 25.0,
	"max_y": 120.0
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
var auto_follow_target: Node3D = null
var auto_follow_duration = 2.0
var auto_follow_timer = 0.0

func _ready():
	print("üì± –ú–æ–±–∏–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
	
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
	if OS.has_feature("mobile"):
		mobile_settings.gesture_controls = true
		print("üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–æ–±–∏–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∂–µ—Å—Ç—ã")
	else:
		mobile_settings.gesture_controls = false
		print("üñ•Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ - –∂–µ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

func setup_camera(cam: Camera3D, manager: Node):
	camera = cam
	battle_manager = manager
	print("üì∑ –ö–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É")

func _input(event):
	if not camera or not mobile_settings.gesture_controls:
		return
	
	# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
	if event is InputEventScreenTouch:
		handle_touch_event(event)
	elif event is InputEventScreenDrag:
		handle_drag_event(event)

func handle_touch_event(event: InputEventScreenTouch):
	var touch_id = event.index
	
	if event.pressed:
		# –ù–∞—á–∞–ª–æ –∫–∞—Å–∞–Ω–∏—è
		touch_points[touch_id] = {
			"position": event.position,
			"start_time": Time.get_ticks_msec() / 1000.0
		}
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å–∞–Ω–∏–π
		if touch_points.size() == 1:
			# –û–¥–Ω–æ –∫–∞—Å–∞–Ω–∏–µ - –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
			start_panning(event.position)
		elif touch_points.size() == 2:
			# –î–≤–∞ –∫–∞—Å–∞–Ω–∏—è - –Ω–∞—á–∏–Ω–∞–µ–º –∑—É–º
			start_pinching()
		
		# –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
		if mobile_settings.vibration_feedback:
			Input.start_joypad_vibration(0, 0.1, 0.1, 0.1)
	
	else:
		# –ö–æ–Ω–µ—Ü –∫–∞—Å–∞–Ω–∏—è
		if touch_points.has(touch_id):
			var touch_duration = Time.get_ticks_msec() / 1000.0 - touch_points[touch_id].start_time
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±—ã—Å—Ç—Ä–æ–µ –¥–≤–æ–π–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ (–±—ã—Å—Ç—Ä—ã–π –∑—É–º)
			if touch_duration < 0.3 and touch_points.size() == 1:
				handle_double_tap(event.position)
			
			touch_points.erase(touch_id)
		
		# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∂–µ—Å—Ç—ã –µ—Å–ª–∏ –∫–∞—Å–∞–Ω–∏–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
		if touch_points.size() == 0:
			stop_all_gestures()
		elif touch_points.size() == 1:
			# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—é –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –æ–¥–Ω–æ –∫–∞—Å–∞–Ω–∏–µ
			var remaining_touch = touch_points.values()[0]
			start_panning(remaining_touch.position)

func handle_drag_event(event: InputEventScreenDrag):
	var touch_id = event.index
	
	if not touch_points.has(touch_id):
		return
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞—Å–∞–Ω–∏—è
	touch_points[touch_id].position = event.position
	
	if touch_points.size() == 1 and is_panning:
		# –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–∏–º –ø–∞–ª—å—Ü–µ–º
		handle_panning(event)
	elif touch_points.size() == 2 and is_pinching:
		# –ó—É–º –¥–≤—É–º—è –ø–∞–ª—å—Ü–∞–º–∏
		handle_pinch_zoom()

func start_panning(start_pos: Vector2):
	is_panning = true
	is_pinching = false
	pan_start_position = start_pos
	camera_start_position = camera.position
	auto_follow_target = null  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ

func start_pinching():
	is_pinching = true
	is_panning = false
	
	# –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–∞–ª—å—Ü–∞–º–∏
	var touch_positions = touch_points.values()
	if touch_positions.size() >= 2:
		var pos1 = touch_positions[0].position
		var pos2 = touch_positions[1].position
		last_pinch_distance = pos1.distance_to(pos2)

func stop_all_gestures():
	is_panning = false
	is_pinching = false

func handle_panning(event: InputEventScreenDrag):
	var delta = event.position - pan_start_position
	var camera_delta = Vector3(
		-delta.x * mobile_settings.pan_sensitivity * 0.05,
		0,
		delta.y * mobile_settings.pan_sensitivity * 0.05
	)
	
	var new_position = camera_start_position + camera_delta
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
	new_position.x = clamp(new_position.x, camera_bounds.min_x, camera_bounds.max_x)
	new_position.z = clamp(new_position.z, camera_bounds.min_z, camera_bounds.max_z)
	
	camera.position = new_position
	camera_moved.emit(new_position)

func handle_pinch_zoom():
	var touch_positions = touch_points.values()
	if touch_positions.size() < 2:
		return
	
	var pos1 = touch_positions[0].position
	var pos2 = touch_positions[1].position
	var current_distance = pos1.distance_to(pos2)
	
	if last_pinch_distance > 0:
		var zoom_factor = current_distance / last_pinch_distance
		var zoom_delta = (zoom_factor - 1.0) * mobile_settings.zoom_sensitivity
		
		# –ü—Ä–∏–º–µ–Ω—è–µ–º –∑—É–º
		var new_y = camera.position.y - zoom_delta * 10
		var new_z = camera.position.z - zoom_delta * 8
		
		# –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
		new_y = clamp(new_y, camera_bounds.min_y, camera_bounds.max_y)
		new_z = clamp(new_z, camera_bounds.min_z, camera_bounds.max_z)
		
		camera.position.y = new_y
		camera.position.z = new_z
		
		zoom_changed.emit(new_y)
	
	last_pinch_distance = current_distance

func handle_double_tap(position: Vector2):
	print("üì± –î–≤–æ–π–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ - –±—ã—Å—Ç—Ä—ã–π –∑—É–º")
	
	# –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è
	var world_pos = screen_to_world_position(position)
	if world_pos != Vector3.ZERO:
		smart_zoom_to_position(world_pos, 40.0)  # –ü—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –≤—ã—Å–æ—Ç–µ 40

func screen_to_world_position(screen_pos: Vector2) -> Vector3:
	if not camera:
		return Vector3.ZERO
	
	var from = camera.project_ray_origin(screen_pos)
	var direction = camera.project_ray_normal(screen_pos)
	var plane_y = 0.0
	
	if direction.y == 0:
		return Vector3.ZERO
	
	var t = (plane_y - from.y) / direction.y
	if t < 0:
		return Vector3.ZERO
	
	return from + direction * t

func smart_zoom_to_position(world_pos: Vector3, target_height: float):
	if not mobile_settings.smart_zoom:
		return
	
	# –°–æ–∑–¥–∞—ë–º –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –ø–æ–∑–∏—Ü–∏–∏
	var tween = create_tween()
	tween.set_parallel(true)
	
	# –î–≤–∏–∂–µ–Ω–∏–µ –∫ –ø–æ–∑–∏—Ü–∏–∏
	var target_pos = Vector3(world_pos.x, target_height, world_pos.z + target_height * 0.8)
	target_pos.x = clamp(target_pos.x, camera_bounds.min_x, camera_bounds.max_x)
	target_pos.z = clamp(target_pos.z, camera_bounds.min_z, camera_bounds.max_z)
	
	tween.tween_property(camera, "position", target_pos, 0.5)
	tween.tween_callback(func(): zoom_changed.emit(target_height))

func set_auto_follow_target(target: Node3D, duration: float = 2.0):
	if not mobile_settings.auto_follow:
		return
	
	auto_follow_target = target
	auto_follow_duration = duration
	auto_follow_timer = 0.0
	print("üì± –ê–≤—Ç–æ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ —Ü–µ–ª—å—é: ", target.name)

func _process(delta):
	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
	if auto_follow_target and is_instance_valid(auto_follow_target):
		auto_follow_timer += delta
		
		if auto_follow_timer < auto_follow_duration:
			# –ü–ª–∞–≤–Ω–æ —Å–ª–µ–¥—É–µ–º –∑–∞ —Ü–µ–ª—å—é
			var target_pos = auto_follow_target.global_position
			var camera_offset = Vector3(0, camera.position.y, camera.position.y * 0.8)
			var desired_pos = target_pos + camera_offset
			
			# –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
			desired_pos.x = clamp(desired_pos.x, camera_bounds.min_x, camera_bounds.max_x)
			desired_pos.z = clamp(desired_pos.z, camera_bounds.min_z, camera_bounds.max_z)
			
			# –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
			camera.position = camera.position.lerp(desired_pos, delta * 2.0)
		else:
			# –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
			auto_follow_target = null

func update_camera_bounds(map_width: float, map_height: float):
	"""–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã"""
	camera_bounds.min_x = -map_width / 2 - 5
	camera_bounds.max_x = map_width / 2 + 5
	camera_bounds.min_z = -map_height / 2 - 5
	camera_bounds.max_z = map_height / 2 + 5
	print("üì± –ì—Ä–∞–Ω–∏—Ü—ã –∫–∞–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ", camera_bounds)

func set_mobile_setting(setting_name: String, value):
	"""–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
	if mobile_settings.has(setting_name):
		mobile_settings[setting_name] = value
		print("üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: ", setting_name, " = ", value)

func get_mobile_settings() -> Dictionary:
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
	return mobile_settings.duplicate()

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
func focus_on_battle(battle_position: Vector3):
	"""–§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤–∞–∂–Ω–æ–º —Å—Ä–∞–∂–µ–Ω–∏–∏"""
	if mobile_settings.smart_zoom:
		smart_zoom_to_position(battle_position, 35.0)
		
		# –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
		if mobile_settings.vibration_feedback:
			Input.start_joypad_vibration(0, 0.3, 0.3, 0.2)

func focus_on_territory_capture(territory_position: Vector3):
	"""–§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∑–∞—Ö–≤–∞—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏"""
	if mobile_settings.smart_zoom:
		smart_zoom_to_position(territory_position, 30.0)

func reset_camera_to_base():
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–º–µ—Ä—É –∫ –±–∞–∑–µ –∏–≥—Ä–æ–∫–∞"""
	if battle_manager:
		var player_base_pos = Vector3(0, 0, 35)  # –ü–æ–∑–∏—Ü–∏—è –±–∞–∑—ã –∏–≥—Ä–æ–∫–∞
		smart_zoom_to_position(player_base_pos, 50.0) 