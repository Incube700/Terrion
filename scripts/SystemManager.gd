extends Node

# SystemManager ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
# –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π

var systems = {}
var battle_manager = null

func _ready():
	print("üîß SystemManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

func init_system(system_name: String, system_script_path: String, parent_node: Node):
	# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
	print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã: ", system_name)
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å–∏—Å—Ç–µ–º—ã
	var system_script = load(system_script_path)
	if not system_script:
		print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç: ", system_script_path)
		return null
	
	# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
	var system_instance = system_script.new()
	if not system_instance:
		print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä: ", system_name)
		return null
	
	system_instance.name = system_name
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º battle_manager –µ—Å–ª–∏ –µ—Å—Ç—å
	if "battle_manager" in system_instance:
		system_instance.battle_manager = battle_manager
	
	# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
	parent_node.add_child(system_instance)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
	systems[system_name] = system_instance
	
	print("‚úÖ –°–∏—Å—Ç–µ–º–∞ ", system_name, " –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
	return system_instance

func get_system(system_name: String):
	# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ –∏–º–µ–Ω–∏
	return systems.get(system_name, null)

func is_system_ready(system_name: String) -> bool:
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
	var system = get_system(system_name)
	return system != null

func call_system_method(system_name: String, method_name: String, args: Array = []):
	# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã
	var system = get_system(system_name)
	if system and system.has_method(method_name):
		if args.size() == 0:
			return system.call(method_name)
		else:
			return system.callv(method_name, args)
	else:
		print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ ", method_name, " –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ ", system_name)
		return null

func init_all_systems(parent_node: Node):
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
	battle_manager = parent_node
	
	var systems_to_init = [
		{"name": "EffectSystem", "path": "res://scripts/EffectSystem.gd"},
		{"name": "AudioSystem", "path": "res://scripts/AudioSystem.gd"},
		{"name": "NotificationSystem", "path": "res://scripts/NotificationSystem.gd"},
		{"name": "StatisticsSystem", "path": "res://scripts/StatisticsSystem.gd"}
	]
	
	for system_data in systems_to_init:
		init_system(system_data.name, system_data.path, parent_node)
	
	print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ SystemManager")

func cleanup_all_systems():
	# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
	for system_name in systems:
		var system = systems[system_name]
		if system and is_instance_valid(system):
			if system.has_method("cleanup_system"):
				system.cleanup_system()
			system.queue_free()
	
	systems.clear()
	print("üßπ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—â–µ–Ω—ã") 