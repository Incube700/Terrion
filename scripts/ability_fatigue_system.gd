# ability_fatigue_system.gd - –°–∏—Å—Ç–µ–º–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
# –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∞–º —Å–∏–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∫—É —É—Å—Ç–∞–ª–æ—Å—Ç–∏

class_name AbilityFatigueSystem
extends Node

signal ability_fatigue_changed(ability_name: String, fatigue_level: float)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
const FATIGUE_SETTINGS = {
	"damage_ability": {
		"base_cooldown": 5.0,      # –ë–∞–∑–æ–≤—ã–π –∫—É–ª–¥–∞—É–Ω
		"fatigue_increase": 0.3,   # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
		"fatigue_decay": 0.1,      # –°–Ω–∏–∂–µ–Ω–∏–µ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥—É
		"max_fatigue": 2.0,        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å
		"fatigue_multiplier": 1.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—É–ª–¥–∞—É–Ω–∞ –æ—Ç —É—Å—Ç–∞–ª–æ—Å—Ç–∏
	},
	"heal_ability": {
		"base_cooldown": 8.0,
		"fatigue_increase": 0.4,
		"fatigue_decay": 0.08,
		"max_fatigue": 2.5,
		"fatigue_multiplier": 1.8
	},
	"buff_ability": {
		"base_cooldown": 12.0,
		"fatigue_increase": 0.5,
		"fatigue_decay": 0.06,
		"max_fatigue": 3.0,
		"fatigue_multiplier": 2.0
	},
	"ultimate_ability": {
		"base_cooldown": 30.0,
		"fatigue_increase": 1.0,
		"fatigue_decay": 0.03,
		"max_fatigue": 5.0,
		"fatigue_multiplier": 3.0
	}
}

# –¢–µ–∫—É—â–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
var team_fatigue = {
	"player": {},
	"enemy": {}
}

# –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
var last_use_time = {
	"player": {},
	"enemy": {}
}

# –¢–∞–π–º–µ—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏
var fatigue_timers = {}

func _ready():
	print("üò¥ –°–∏—Å—Ç–µ–º–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
	start_fatigue_timer()

# –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏
func start_fatigue_timer():
	var timer = Timer.new()
	timer.wait_time = 1.0  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
	timer.timeout.connect(_update_fatigue)
	add_child(timer)
	timer.start()
	fatigue_timers["main"] = timer

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
func _update_fatigue():
	for team in team_fatigue:
		for ability_name in team_fatigue[team]:
			var ability_type = get_ability_type(ability_name)
			if ability_type in FATIGUE_SETTINGS:
				var settings = FATIGUE_SETTINGS[ability_type]
				var current_fatigue = team_fatigue[team][ability_name]
				
				# –°–Ω–∏–∂–µ–Ω–∏–µ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
				var new_fatigue = max(0.0, current_fatigue - settings.fatigue_decay)
				team_fatigue[team][ability_name] = new_fatigue
				
				# –°–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏
				ability_fatigue_changed.emit(ability_name, new_fatigue)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏
func get_ability_type(ability_name: String) -> String:
	if ability_name.contains("damage") or ability_name.contains("attack"):
		return "damage_ability"
	elif ability_name.contains("heal") or ability_name.contains("repair"):
		return "heal_ability"
	elif ability_name.contains("buff") or ability_name.contains("boost"):
		return "buff_ability"
	elif ability_name.contains("ultimate") or ability_name.contains("special"):
		return "ultimate_ability"
	else:
		return "damage_ability"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
func can_use_ability(team: String, ability_name: String) -> bool:
	var ability_type = get_ability_type(ability_name)
	if ability_type not in FATIGUE_SETTINGS:
		return true  # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
	
	var settings = FATIGUE_SETTINGS[ability_type]
	var current_fatigue = team_fatigue[team].get(ability_name, 0.0)
	var last_use = last_use_time[team].get(ability_name, 0.0)
	var current_time = Time.get_time_dict_from_system()
	var time_since_last_use = current_time - last_use
	
	# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É–ª–¥–∞—É–Ω —Å —É—á—ë—Ç–æ–º —É—Å—Ç–∞–ª–æ—Å—Ç–∏
	var fatigue_multiplier = 1.0 + (current_fatigue * settings.fatigue_multiplier)
	var current_cooldown = settings.base_cooldown * fatigue_multiplier
	
	return time_since_last_use >= current_cooldown

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
func use_ability(team: String, ability_name: String) -> bool:
	if not can_use_ability(team, ability_name):
		return false
	
	var ability_type = get_ability_type(ability_name)
	if ability_type not in FATIGUE_SETTINGS:
		return true
	
	var settings = FATIGUE_SETTINGS[ability_type]
	var current_fatigue = team_fatigue[team].get(ability_name, 0.0)
	
	# –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Å—Ç–∞–ª–æ—Å—Ç–∏
	var new_fatigue = min(settings.max_fatigue, current_fatigue + settings.fatigue_increase)
	team_fatigue[team][ability_name] = new_fatigue
	
	# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	last_use_time[team][ability_name] = Time.get_time_dict_from_system()
	
	# –°–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏
	ability_fatigue_changed.emit(ability_name, new_fatigue)
	
	print("üò¥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ", team, " ", ability_name, " (—É—Å—Ç–∞–ª–æ—Å—Ç—å: ", new_fatigue, ")")
	return true

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫—É–ª–¥–∞—É–Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
func get_ability_cooldown(team: String, ability_name: String) -> float:
	var ability_type = get_ability_type(ability_name)
	if ability_type not in FATIGUE_SETTINGS:
		return 0.0
	
	var settings = FATIGUE_SETTINGS[ability_type]
	var current_fatigue = team_fatigue[team].get(ability_name, 0.0)
	var last_use = last_use_time[team].get(ability_name, 0.0)
	var current_time = Time.get_time_dict_from_system()
	var time_since_last_use = current_time - last_use
	
	var fatigue_multiplier = 1.0 + (current_fatigue * settings.fatigue_multiplier)
	var current_cooldown = settings.base_cooldown * fatigue_multiplier
	
	return max(0.0, current_cooldown - time_since_last_use)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
func get_ability_fatigue(team: String, ability_name: String) -> float:
	return team_fatigue[team].get(ability_name, 0.0)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
func get_fatigue_multiplier(team: String, ability_name: String) -> float:
	var ability_type = get_ability_type(ability_name)
	if ability_type not in FATIGUE_SETTINGS:
		return 1.0
	
	var settings = FATIGUE_SETTINGS[ability_type]
	var current_fatigue = team_fatigue[team].get(ability_name, 0.0)
	return 1.0 + (current_fatigue * settings.fatigue_multiplier)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏
func get_fatigue_description(team: String, ability_name: String) -> String:
	var fatigue = get_ability_fatigue(team, ability_name)
	var ability_type = get_ability_type(ability_name)
	
	if ability_type not in FATIGUE_SETTINGS:
		return "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è"
	
	var max_fatigue = FATIGUE_SETTINGS[ability_type].max_fatigue
	var fatigue_percentage = (fatigue / max_fatigue) * 100
	
	if fatigue_percentage < 25:
		return "–°–≤–µ–∂–∞—è"
	elif fatigue_percentage < 50:
		return "–õ—ë–≥–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å"
	elif fatigue_percentage < 75:
		return "–°—Ä–µ–¥–Ω—è—è —É—Å—Ç–∞–ª–æ—Å—Ç—å"
	elif fatigue_percentage < 100:
		return "–°–∏–ª—å–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å"
	else:
		return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–∏
func get_fatigue_color(team: String, ability_name: String) -> Color:
	var fatigue = get_ability_fatigue(team, ability_name)
	var ability_type = get_ability_type(ability_name)
	
	if ability_type not in FATIGUE_SETTINGS:
		return Color.WHITE
	
	var max_fatigue = FATIGUE_SETTINGS[ability_type].max_fatigue
	var fatigue_percentage = fatigue / max_fatigue
	
	if fatigue_percentage < 0.25:
		return Color.GREEN  # –°–≤–µ–∂–∞—è
	elif fatigue_percentage < 0.5:
		return Color.YELLOW  # –õ—ë–≥–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å
	elif fatigue_percentage < 0.75:
		return Color.ORANGE  # –°—Ä–µ–¥–Ω—è—è —É—Å—Ç–∞–ª–æ—Å—Ç—å
	elif fatigue_percentage < 1.0:
		return Color.RED  # –°–∏–ª—å–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å
	else:
		return Color.DARK_RED  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å

# –°–±—Ä–æ—Å —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ)
func reset_team_fatigue(team: String):
	team_fatigue[team] = {}
	last_use_time[team] = {}
	print("üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: ", team)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏
func get_fatigue_statistics() -> Dictionary:
	var stats = {
		"player": {},
		"enemy": {}
	}
	
	for team in team_fatigue:
		for ability_name in team_fatigue[team]:
			var fatigue = team_fatigue[team][ability_name]
			var cooldown = get_ability_cooldown(team, ability_name)
			var description = get_fatigue_description(team, ability_name)
			
			stats[team][ability_name] = {
				"fatigue": fatigue,
				"cooldown": cooldown,
				"description": description
			}
	
	return stats 