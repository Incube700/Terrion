extends CanvasLayer

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–∏—Ä–∞ TERRION - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–µ–π –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –±–∏—Ç–≤–∞—Ö
# –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —Ç–∞—á-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º

signal start_battle
signal spawn_soldier
signal build_tower
signal spawn_elite_soldier
signal spawn_crystal_mage
signal spawn_unit_drag(unit_type, screen_pos)
signal build_structure_drag(screen_pos)
signal use_ability(ability_name: String, position: Vector3)

# –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤ —Ñ—Ä–∞–∫—Ü–∏–π
signal summon_commander(position: Vector3)
signal use_faction_ability(ability_name: String, position: Vector3)

var drag_type = ""
var is_dragging = false
var drag_start_pos = Vector2.ZERO

@onready var spawner_panel = $SpawnerPanel

func _ready():
	print("üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–∏—Ä–∞ TERRION –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
	$Panel/StartButton.pressed.connect(_on_start_operation_pressed)
	$Panel/SpawnSoldierButton.pressed.connect(_on_deploy_unit_pressed)
	$Panel/BuildTowerButton.pressed.connect(_on_construct_facility_pressed)
	$Panel/EliteSoldierButton.pressed.connect(_on_deploy_specialist_pressed)
	$Panel/CrystalMageButton.pressed.connect(_on_deploy_technician_pressed)
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	if has_node("AbilityPanel"):
		if $AbilityPanel.has_node("FireballButton"):
			$AbilityPanel/FireballButton.pressed.connect(_on_plasma_strike_pressed)
		if $AbilityPanel.has_node("HealButton"):
			$AbilityPanel/HealButton.pressed.connect(_on_repair_wave_pressed)
		if $AbilityPanel.has_node("ShieldButton"):
			$AbilityPanel/ShieldButton.pressed.connect(_on_energy_barrier_pressed)
		if $AbilityPanel.has_node("LightningButton"):
			$AbilityPanel/LightningButton.pressed.connect(_on_ion_storm_pressed)
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ drag&drop –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	$Panel/SpawnSoldierButton.gui_input.connect(_on_unit_button_input)
	$Panel/BuildTowerButton.gui_input.connect(_on_structure_button_input)

	if spawner_panel:
		spawner_panel.spawner_drag_start.connect(_on_spawner_drag_start)
		spawner_panel.spawner_drag_end.connect(_on_spawner_drag_end)
	
	# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –Ω–æ–≤—ã–π –ª–æ—Ä
	update_button_texts()

func update_button_texts():
	"""–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ª–æ—Ä"""
	$Panel/StartButton.text = "–ù–∞—á–∞—Ç—å –û–ø–µ—Ä–∞—Ü–∏—é"
	$Panel/SpawnSoldierButton.text = "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –í–æ–π—Å–∫–∞"
	$Panel/BuildTowerButton.text = "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ú–æ–¥—É–ª—å"
	$Panel/EliteSoldierButton.text = "–≠–ª–∏—Ç–Ω—ã–π –û—Ç—Ä—è–¥"
	$Panel/CrystalMageButton.text = "–¢–µ—Ö–Ω–æ-–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
	
	if has_node("AbilityPanel"):
		if $AbilityPanel.has_node("FireballButton"):
			$AbilityPanel/FireballButton.text = "–ü–ª–∞–∑–º–µ–Ω–Ω—ã–π –£–¥–∞—Ä"
		if $AbilityPanel.has_node("HealButton"):
			$AbilityPanel/HealButton.text = "–í–æ–ª–Ω–∞ –†–µ–º–æ–Ω—Ç–∞"
		if $AbilityPanel.has_node("ShieldButton"):
			$AbilityPanel/ShieldButton.text = "–≠–Ω–µ—Ä–≥–æ-–ë–∞—Ä—å–µ—Ä"
		if $AbilityPanel.has_node("LightningButton"):
			$AbilityPanel/LightningButton.text = "–ò–æ–Ω–Ω–∞—è –ë—É—Ä—è"

func _on_start_operation_pressed():
	print("üöÄ –ö–æ–º–∞–Ω–¥–∏—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é")
	start_battle.emit()

func _on_deploy_unit_pressed():
	print("‚öîÔ∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≤–æ–π—Å–∫")
	spawn_soldier.emit()

func _on_construct_facility_pressed():
	print("üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è")
	build_tower.emit()

func _on_deploy_specialist_pressed():
	print("üéñÔ∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —ç–ª–∏—Ç–Ω–æ–≥–æ –æ—Ç—Ä—è–¥–∞")
	spawn_elite_soldier.emit()

func _on_deploy_technician_pressed():
	print("üîß –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
	spawn_crystal_mage.emit()

func _on_plasma_strike_pressed():
	print("üî• –ü–ª–∞–∑–º–µ–Ω–Ω—ã–π —É–¥–∞—Ä –ø–æ –≤—Ä–∞–∂–µ—Å–∫–∏–º –ø–æ–∑–∏—Ü–∏—è–º")
	use_ability.emit("fireball", Vector3(0, 0, 0))

func _on_repair_wave_pressed():
	print("üíö –í–æ–ª–Ω–∞ —Ä–µ–º–æ–Ω—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—é–∑–Ω–∏–∫–æ–≤")
	use_ability.emit("heal_wave", Vector3(0, 0, -10))

func _on_energy_barrier_pressed():
	print("üõ°Ô∏è –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä –∑–∞—â–∏—â–∞–µ—Ç –≤–æ–π—Å–∫–∞")
	use_ability.emit("shield_barrier", Vector3(0, 0, -10))

func _on_ion_storm_pressed():
	print("‚ö° –ò–æ–Ω–Ω–∞—è –±—É—Ä—è –ø–æ—Ä–∞–∂–∞–µ—Ç –≤—Ä–∞–≥–æ–≤")
	use_ability.emit("lightning_storm", Vector3(0, 0, 0))

func update_ability_buttons(energy: int, crystals: int):
	"""–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
	if has_node("AbilityPanel"):
		update_button_state("AbilityPanel/FireballButton", energy >= 40, crystals >= 15)
		update_button_state("AbilityPanel/HealButton", energy >= 30, crystals >= 10)
		update_button_state("AbilityPanel/ShieldButton", energy >= 50, crystals >= 20)
		update_button_state("AbilityPanel/LightningButton", energy >= 60, crystals >= 25)

func update_unit_buttons(energy: int, crystals: int):
	"""–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–æ–π—Å–∫"""
	update_button_state("Panel/SpawnSoldierButton", energy >= 20, true)
	update_button_state("Panel/EliteSoldierButton", energy >= 30, crystals >= 10)
	update_button_state("Panel/CrystalMageButton", energy >= 25, crystals >= 15)
	update_button_state("Panel/BuildTowerButton", energy >= 60, true)

func update_button_state(button_path: String, has_energy: bool, has_crystals: bool):
	"""–í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥"""
	if has_node(button_path):
		var button = get_node(button_path)
		var can_afford = has_energy and has_crystals
		
		# –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
		if can_afford:
			button.modulate = Color(1.0, 1.0, 1.0, 1.0)  # –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
		else:
			button.modulate = Color(0.5, 0.5, 0.5, 0.7)  # –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
		
		button.disabled = not can_afford

func _on_unit_button_input(event):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞—á-—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–æ–π—Å–∫"""
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		if event.pressed:
			# –ù–∞—á–∞–ª–æ drag-–æ–ø–µ—Ä–∞—Ü–∏–∏
			drag_type = "soldier"
			is_dragging = true
			drag_start_pos = event.position
		else:
			# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag - —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤–æ–π—Å–∫
			if is_dragging and drag_type == "soldier":
				spawn_unit_drag.emit("soldier", event.position)
			is_dragging = false
			drag_type = ""

func _on_structure_button_input(event):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞—á-—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"""
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		if event.pressed:
			# –ù–∞—á–∞–ª–æ drag-–æ–ø–µ—Ä–∞—Ü–∏–∏
			drag_type = "tower"
			is_dragging = true
			drag_start_pos = event.position
		else:
			# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag - —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –º–æ–¥—É–ª—è
			if is_dragging and drag_type == "tower":
				build_structure_drag.emit(event.position)
			is_dragging = false
			drag_type = ""

func update_info(player_hp, player_energy, enemy_hp, enemy_energy, player_crystals = 0, enemy_crystals = 0):
	"""–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ—Ä–∞–∫—Ü–∏–π"""
	$PlayerHUD.text = "–ö–æ–º–∞–Ω–¥–∏—Ä | –≠–Ω–µ—Ä–≥–∏—è: %d | –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: %d | –¶–µ–Ω—Ç—Ä: %d" % [player_energy, player_crystals, player_hp]
	$EnemyHUD.text = "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ | –≠–Ω–µ—Ä–≥–∏—è: %d | –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: %d | –¶–µ–Ω—Ç—Ä: %d" % [enemy_energy, enemy_crystals, enemy_hp]
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
	update_ability_buttons(player_energy, player_crystals)
	update_unit_buttons(player_energy, player_crystals)

func _input(event):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
	if is_dragging:
		if event is InputEventMouseMotion:
			# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø—Ä–∏ drag
			pass 

func _on_spawner_drag_start(spawner_type):
	"""–ù–∞—á–∞–ª–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
	print("[–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å] –ù–∞—á–∞—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –º–æ–¥—É–ª—è: ", spawner_type)

func _on_spawner_drag_end(spawner_type, global_pos):
	"""–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
	print("[–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å] –ú–æ–¥—É–ª—å —Ä–∞–∑–º–µ—â–µ–Ω: ", spawner_type, " –≤ —Ç–æ—á–∫–µ ", global_pos)
	# –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	if get_parent().has_method("on_spawner_drop"):
		get_parent().on_spawner_drop(spawner_type, global_pos)
 
 
