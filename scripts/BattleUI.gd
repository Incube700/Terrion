class_name BattleUI
extends CanvasLayer

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–∏—Ä–∞ TERRION - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–µ–π –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –±–∏—Ç–≤–∞—Ö
# –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —Ç–∞—á-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º

signal start_battle
signal spawn_unit_drag(unit_type, screen_pos)
signal build_structure_drag(screen_pos)
signal use_ability(ability_name: String, position: Vector3)

var drag_type = ""
var is_dragging = false
var drag_start_pos = Vector2.ZERO

@onready var spawner_panel = $SpawnerPanel
@onready var main_menu = $MainMenu
@onready var game_panel = $Panel
@onready var ability_panel = $AbilityPanel

func _ready():
	print("üñ•Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	var start_game_button = get_node("MainMenu/MenuContainer/StartGameButton")
	var exit_button = get_node("MainMenu/MenuContainer/ExitButton")
	
	if start_game_button:
		start_game_button.pressed.connect(_on_start_game_pressed)
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
	
	if exit_button:
		exit_button.pressed.connect(_on_exit_pressed)
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–í—ã—Ö–æ–¥' –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞  
	var collector_button = get_node("Panel/MainButtonContainer/CollectorButton")
	var soldier_button = get_node("Panel/MainButtonContainer/SpawnSoldierButton")
	
	if collector_button:
		collector_button.pressed.connect(_on_spawn_collector_pressed)
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ö–æ–ª–ª–µ–∫—Ç–æ—Ä' –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
	
	if soldier_button:
		soldier_button.pressed.connect(_on_deploy_unit_pressed)
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–°–æ–ª–¥–∞—Ç' –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—Å–∫—Ä—ã—Ç—ã –¥–æ —Å—Ç–∞—Ä—Ç–∞)
	$Panel/MainButtonContainer/BuildTowerButton.pressed.connect(_on_construct_facility_pressed)
	$Panel/MainButtonContainer/EliteSoldierButton.pressed.connect(_on_deploy_specialist_pressed)
	$Panel/MainButtonContainer/CrystalMageButton.pressed.connect(_on_deploy_technician_pressed)
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	if has_node("AbilityPanel/AbilityContainer"):
		if $AbilityPanel/AbilityContainer.has_node("FireballButton"):
			$AbilityPanel/AbilityContainer/FireballButton.pressed.connect(_on_plasma_strike_pressed)
		if $AbilityPanel/AbilityContainer.has_node("HealButton"):
			$AbilityPanel/AbilityContainer/HealButton.pressed.connect(_on_repair_wave_pressed)
		if $AbilityPanel/AbilityContainer.has_node("ShieldButton"):
			$AbilityPanel/AbilityContainer/ShieldButton.pressed.connect(_on_energy_barrier_pressed)
		if $AbilityPanel/AbilityContainer.has_node("LightningButton"):
			$AbilityPanel/AbilityContainer/LightningButton.pressed.connect(_on_ion_storm_pressed)
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ drag&drop –¥–ª—è –í–°–ï–• –∫–Ω–æ–ø–æ–∫
	print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º drag&drop –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫...")
	$Panel/MainButtonContainer/SpawnSoldierButton.gui_input.connect(_on_unit_button_input)
	$Panel/MainButtonContainer/CollectorButton.gui_input.connect(_on_collector_button_input)
	$Panel/MainButtonContainer/BuildTowerButton.gui_input.connect(_on_structure_button_input)
	
	# –î–æ–±–∞–≤–ª—è–µ–º drag&drop –¥–ª—è —ç–ª–∏—Ç–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ (–≤—Å–µ–≥–¥–∞)
	$Panel/MainButtonContainer/EliteSoldierButton.gui_input.connect(_on_elite_soldier_button_input)
	$Panel/MainButtonContainer/CrystalMageButton.gui_input.connect(_on_crystal_mage_button_input)
	print("‚úÖ –í—Å–µ drag&drop –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã!")

	if spawner_panel:
		spawner_panel.spawner_drag_start.connect(_on_spawner_drag_start)
		spawner_panel.spawner_drag_end.connect(_on_spawner_drag_end)
	
	# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –Ω–æ–≤—ã–π –ª–æ—Ä
	update_button_texts()

	# –î–æ–±–∞–≤–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	add_control_instructions()

func update_button_texts():
	# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–π
	$Panel/MainButtonContainer/SpawnSoldierButton.text = "‚öîÔ∏è –°–û–õ–î–ê–¢\n(20 —ç–Ω–µ—Ä–≥–∏–∏)"
	$Panel/MainButtonContainer/BuildTowerButton.text = "üóº –ë–ê–®–ù–Ø\n(60 —ç–Ω–µ—Ä–≥–∏–∏)" 
	$Panel/MainButtonContainer/EliteSoldierButton.text = "üéñÔ∏è –≠–õ–ò–¢–ù–´–ô\n(30‚ö° + 10üíé)"
	$Panel/MainButtonContainer/CrystalMageButton.text = "üîÆ –ú–ê–ì\n(25‚ö° + 15üíé)"
	$Panel/MainButtonContainer/CollectorButton.text = "üèÉ –ö–û–õ–õ–ï–ö–¢–û–†\n(15 —ç–Ω–µ—Ä–≥–∏–∏)"
	
	if has_node("AbilityPanel/AbilityContainer"):
		if $AbilityPanel/AbilityContainer.has_node("FireballButton"):
			$AbilityPanel/AbilityContainer/FireballButton.text = "üî• –§–ê–ï–†–ë–û–õ–õ"
		if $AbilityPanel/AbilityContainer.has_node("HealButton"):
			$AbilityPanel/AbilityContainer/HealButton.text = "üíö –õ–ï–ß–ï–ù–ò–ï"
		if $AbilityPanel/AbilityContainer.has_node("ShieldButton"):
			$AbilityPanel/AbilityContainer/ShieldButton.text = "üõ°Ô∏è –©–ò–¢"
		if $AbilityPanel/AbilityContainer.has_node("LightningButton"):
			$AbilityPanel/AbilityContainer/LightningButton.text = "‚ö° –ú–û–õ–ù–ò–Ø"

func _on_deploy_unit_pressed():
	print("‚öîÔ∏è –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°–û–õ–î–ê–¢ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è —Å–ø–∞–≤–Ω–∞!")

func _on_construct_facility_pressed():
	print("üèóÔ∏è –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ë–ê–®–ù–Ø –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")

func _on_deploy_specialist_pressed():
	print("üéñÔ∏è –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≠–õ–ò–¢–ù–´–ô –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è —Å–ø–∞–≤–Ω–∞!")

func _on_deploy_technician_pressed():
	print("üîß –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ú–ê–ì –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è —Å–ø–∞–≤–Ω–∞!")

func _on_spawn_collector_pressed():
	print("üèÉ –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ö–û–õ–õ–ï–ö–¢–û–† –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è —Å–ø–∞–≤–Ω–∞!")

func _on_plasma_strike_pressed():
	print("üî• –ü–ª–∞–∑–º–µ–Ω–Ω—ã–π —É–¥–∞—Ä –ø–æ –≤—Ä–∞–∂–µ—Å–∫–∏–º –ø–æ–∑–∏—Ü–∏—è–º")
	use_ability.emit("fireball", Vector3(0, 0, 0))

func _on_repair_wave_pressed():
	print("üíö –í–æ–ª–Ω–∞ —Ä–µ–º–æ–Ω—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—é–∑–Ω–∏–∫–æ–≤")
	use_ability.emit("heal_wave", Vector3(0, 0, 10))

func _on_energy_barrier_pressed():
	print("üõ°Ô∏è –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä –∑–∞—â–∏—â–∞–µ—Ç –≤–æ–π—Å–∫–∞")
	use_ability.emit("shield_barrier", Vector3(0, 0, 10))

func _on_ion_storm_pressed():
	print("‚ö° –ò–æ–Ω–Ω–∞—è –±—É—Ä—è –ø–æ—Ä–∞–∂–∞–µ—Ç –≤—Ä–∞–≥–æ–≤")
	use_ability.emit("lightning_storm", Vector3(0, 0, 0))

func update_ability_buttons(energy: int, crystals: int):
	# (documentation comment)
	if has_node("AbilityPanel/AbilityContainer"):
		update_button_state("AbilityPanel/AbilityContainer/FireballButton", energy >= 40, crystals >= 15)
		update_button_state("AbilityPanel/AbilityContainer/HealButton", energy >= 30, crystals >= 10)
		update_button_state("AbilityPanel/AbilityContainer/ShieldButton", energy >= 50, crystals >= 20)
		update_button_state("AbilityPanel/AbilityContainer/LightningButton", energy >= 60, crystals >= 25)

func update_unit_buttons(energy: int, crystals: int):
	# (documentation comment)
	update_button_state("Panel/MainButtonContainer/SpawnSoldierButton", energy >= 20, true)
	update_button_state("Panel/MainButtonContainer/EliteSoldierButton", energy >= 30, crystals >= 10)
	update_button_state("Panel/MainButtonContainer/CrystalMageButton", energy >= 25, crystals >= 15)
	update_button_state("Panel/MainButtonContainer/BuildTowerButton", energy >= 60, true)

func update_button_state(button_path: String, has_energy: bool, has_crystals: bool):
	# (documentation comment)
	if has_node(button_path):
		var button = get_node(button_path)
		var can_afford = has_energy and has_crystals
		
		# –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
		if can_afford:
			button.modulate = Color(1.0, 1.0, 1.0, 1.0)  # –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
		else:
			button.modulate = Color(0.5, 0.5, 0.5, 0.7)  # –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
		
		button.disabled = not can_afford

func _on_collector_button_input(event):
	# Drag&drop –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var collector_button = get_node("Panel/MainButtonContainer/CollectorButton")
		if event.pressed:
			# –ù–∞—á–∞–ª–æ drag-–æ–ø–µ—Ä–∞—Ü–∏–∏ - –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
			drag_type = "collector"
			is_dragging = true
			drag_start_pos = event.position
			collector_button.modulate = Color.YELLOW  # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
			print("üèÉ –ù–∞—á–∞–ª–æ drag –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag - —Å–ø–∞–≤–Ω –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
			if is_dragging and drag_type == "collector":
				print("üèÉ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				spawn_unit_drag.emit("collector", event.position)
			is_dragging = false
			drag_type = ""
			collector_button.modulate = Color.WHITE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç

func _on_unit_button_input(event):
	# Drag&drop –¥–ª—è —Å–æ–ª–¥–∞—Ç–∞
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var soldier_button = get_node("Panel/MainButtonContainer/SpawnSoldierButton")
		if event.pressed:
			# –ù–∞—á–∞–ª–æ drag-–æ–ø–µ—Ä–∞—Ü–∏–∏ - –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
			drag_type = "soldier"
			is_dragging = true
			drag_start_pos = event.position
			soldier_button.modulate = Color.YELLOW  # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
			print("‚öîÔ∏è –ù–∞—á–∞–ª–æ drag —Å–æ–ª–¥–∞—Ç–∞ - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag - —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤–æ–π—Å–∫
			if is_dragging and drag_type == "soldier":
				print("‚öîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag —Å–æ–ª–¥–∞—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				spawn_unit_drag.emit("soldier", event.position)
			is_dragging = false
			drag_type = ""
			soldier_button.modulate = Color.WHITE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç

func _on_structure_button_input(event):
	# Drag&drop –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –±–∞—à–Ω–∏
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var tower_button = get_node("Panel/MainButtonContainer/BuildTowerButton")
		if event.pressed:
			# –ù–∞—á–∞–ª–æ drag-–æ–ø–µ—Ä–∞—Ü–∏–∏
			drag_type = "tower"
			is_dragging = true
			drag_start_pos = event.position
			tower_button.modulate = Color.YELLOW  # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
			print("üèóÔ∏è –ù–∞—á–∞–ª–æ drag –±–∞—à–Ω–∏ - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag - —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –º–æ–¥—É–ª—è
			if is_dragging and drag_type == "tower":
				print("üèóÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag –±–∞—à–Ω–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				build_structure_drag.emit(event.position)
			is_dragging = false
			drag_type = ""
			tower_button.modulate = Color.WHITE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç

func _on_elite_soldier_button_input(event):
	# Drag&drop –¥–ª—è —ç–ª–∏—Ç–Ω–æ–≥–æ —Å–æ–ª–¥–∞—Ç–∞
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var elite_button = get_node("Panel/MainButtonContainer/EliteSoldierButton")
		if event.pressed:
			drag_type = "elite_soldier"
			is_dragging = true
			drag_start_pos = event.position
			elite_button.modulate = Color.YELLOW
			print("üéñÔ∏è –ù–∞—á–∞–ª–æ drag —ç–ª–∏—Ç–Ω–æ–≥–æ —Å–æ–ª–¥–∞—Ç–∞ - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			if is_dragging and drag_type == "elite_soldier":
				print("üéñÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag —ç–ª–∏—Ç–Ω–æ–≥–æ —Å–æ–ª–¥–∞—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				spawn_unit_drag.emit("elite_soldier", event.position)
			is_dragging = false
			drag_type = ""
			elite_button.modulate = Color.WHITE

func _on_crystal_mage_button_input(event):
	# Drag&drop –¥–ª—è –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞–≥–∞
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var mage_button = get_node("Panel/MainButtonContainer/CrystalMageButton")
		if event.pressed:
			drag_type = "crystal_mage"
			is_dragging = true
			drag_start_pos = event.position
			mage_button.modulate = Color.YELLOW
			print("üîß –ù–∞—á–∞–ª–æ drag —Ç–µ—Ö–Ω–æ-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			if is_dragging and drag_type == "crystal_mage":
				print("üîß –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag —Ç–µ—Ö–Ω–æ-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				spawn_unit_drag.emit("crystal_mage", event.position)
			is_dragging = false
			drag_type = ""
			mage_button.modulate = Color.WHITE

func update_info(player_hp, player_energy, enemy_hp, enemy_energy, player_crystals = 0, enemy_crystals = 0):
	# (documentation comment)
	# –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
	$PlayerHUD.text = "üü¶ –ö–û–ú–ê–ù–î–ò–† | ‚ö°%d | üíé%d | ‚ù§Ô∏è%d" % [player_energy, player_crystals, player_hp]
	$EnemyHUD.text = "üü• –ü–†–û–¢–ò–í–ù–ò–ö | ‚ö°%d | üíé%d | ‚ù§Ô∏è%d" % [enemy_energy, enemy_crystals, enemy_hp]
	
	# –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
	$PlayerHUD.modulate = Color(0.7, 0.9, 1.0)  # –°–∏–Ω–µ–≤–∞—Ç—ã–π –¥–ª—è –∏–≥—Ä–æ–∫–∞
	$EnemyHUD.modulate = Color(1.0, 0.7, 0.7)   # –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π –¥–ª—è –≤—Ä–∞–≥–∞
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
	update_ability_buttons(player_energy, player_crystals)
	update_unit_buttons(player_energy, player_crystals)

func get_hp_color(hp: int, max_hp: int) -> Color:
	# (documentation comment)
	var hp_percent = float(hp) / float(max_hp)
	if hp_percent > 0.7:
		return Color.GREEN
	elif hp_percent > 0.3:
		return Color.YELLOW
	else:
		return Color.RED

func _input(event):
	# (documentation comment)
	if is_dragging:
		if event is InputEventMouseMotion:
			# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø—Ä–∏ drag
			pass 

func _on_spawner_drag_start(spawner_type):
	# (documentation comment)
	print("[–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å] –ù–∞—á–∞—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –º–æ–¥—É–ª—è: ", spawner_type)

func _on_spawner_drag_end(spawner_type, global_pos):
	# (documentation comment)
	print("[–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å] –ú–æ–¥—É–ª—å —Ä–∞–∑–º–µ—â–µ–Ω: ", spawner_type, " –≤ —Ç–æ—á–∫–µ ", global_pos)
	# –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	if get_parent().has_method("on_spawner_drop"):
		get_parent().on_spawner_drop(spawner_type, global_pos)

func _on_start_game_pressed():
	print("üöÄ === –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –ò–ì–†–´ ===")
	print("1. –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
	main_menu.visible = false
	print("2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
	game_panel.visible = true
	ability_panel.visible = true
	spawner_panel.visible = true
	$PlayerHUD.visible = true
	$EnemyHUD.visible = true
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	var instructions = get_node_or_null("ControlInstructions")
	if instructions:
		instructions.visible = true
		print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã")
	
	print("3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª start_battle...")
	start_battle.emit()
	print("4. –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

func _on_exit_pressed():
	print("üö™ –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã")
	get_tree().quit()

func show_main_menu():
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏/–ø–æ–±–µ–¥–µ)
	main_menu.visible = true
	game_panel.visible = false
	ability_panel.visible = false
	spawner_panel.visible = false
	$PlayerHUD.visible = false
	$EnemyHUD.visible = false

func add_control_instructions():
	# –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	var instructions = Label.new()
	instructions.name = "ControlInstructions"
	instructions.text = """üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:
üñ±Ô∏è –ü–ö–ú + –¥—Ä–∞–≥ = –∫–∞–º–µ—Ä–∞
üéÆ –°–∫—Ä–æ–ª–ª = –∑—É–º
üèÉ DRAG & DROP = —Å–ø–∞–≤–Ω!
1Ô∏è‚É£ –ó–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É
2Ô∏è‚É£ –ü–µ—Ä–µ—Ç–∞—â–∏ –Ω–∞ –∫–∞—Ä—Ç—É
3Ô∏è‚É£ –û—Ç–ø—É—Å—Ç–∏ = —Å–ø–∞–≤–Ω!

üî• –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ = –∫–ª–∏–∫ –∫–Ω–æ–ø–∫–∏"""
	
	instructions.anchors_preset = Control.PRESET_TOP_RIGHT
	instructions.position = Vector2(-350, 10)
	instructions.size = Vector2(340, 220)
	instructions.add_theme_font_size_override("font_size", 20)  # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä
	instructions.add_theme_color_override("font_color", Color.YELLOW)  # –Ø—Ä—á–µ
	instructions.add_theme_color_override("font_shadow_color", Color.BLACK)
	instructions.add_theme_constant_override("shadow_offset_x", 3)
	instructions.add_theme_constant_override("shadow_offset_y", 3)
	instructions.visible = false  # –°–∫—Ä—ã–≤–∞–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
	
	add_child(instructions)

func show_game_interface():
	# –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	$MainMenu.visible = false
	$Panel.visible = true
	$AbilityPanel.visible = true
	$PlayerHUD.visible = true
	$EnemyHUD.visible = true
	$SpawnerPanel.visible = true
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	var instructions = get_node_or_null("ControlInstructions")
	if instructions:
		instructions.visible = true
	
	print("üéÆ –ò–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
 
 
 
