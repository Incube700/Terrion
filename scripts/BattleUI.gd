class_name BattleUI
extends CanvasLayer

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–∏—Ä–∞ TERRION - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–µ–π –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –±–∏—Ç–≤–∞—Ö
# –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —Ç–∞—á-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º

signal start_battle
signal spawn_unit_drag(unit_type, screen_pos)
signal build_structure_drag(screen_pos)
signal use_ability(ability_name: String, position: Vector3)

var drag_type = ""
var is_dragging = false
var drag_start_pos = Vector2.ZERO
var ghost_preview = null

@onready var spawner_panel = $SpawnerPanel
@onready var main_menu = $MainMenu
@onready var game_panel = $Panel
@onready var ability_panel = $AbilityPanel

func _ready():
	print("üñ•Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	var start_game_button = get_node("MainMenu/MenuContainer/StartGameButton")
	var exit_button = get_node("MainMenu/MenuContainer/ExitButton")
	
	if start_game_button:
		start_game_button.pressed.connect(_on_start_game_pressed)
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
	
	if exit_button:
		exit_button.pressed.connect(_on_exit_pressed)
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–í—ã—Ö–æ–¥' –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞  
	var collector_button = get_node("Panel/MainButtonContainer/CollectorButton")
	var soldier_button = get_node("Panel/MainButtonContainer/SpawnSoldierButton")
	
	if collector_button:
		collector_button.pressed.connect(_on_spawn_collector_pressed)
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ö–æ–ª–ª–µ–∫—Ç–æ—Ä' –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
	
	if soldier_button:
		soldier_button.pressed.connect(_on_deploy_unit_pressed)
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–°–æ–ª–¥–∞—Ç' –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—Å–∫—Ä—ã—Ç—ã –¥–æ —Å—Ç–∞—Ä—Ç–∞)
	$Panel/MainButtonContainer/BuildTowerButton.pressed.connect(_on_construct_facility_pressed)
	$Panel/MainButtonContainer/EliteSoldierButton.pressed.connect(_on_deploy_specialist_pressed)
	$Panel/MainButtonContainer/CrystalMageButton.pressed.connect(_on_deploy_technician_pressed)
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	if has_node("AbilityPanel/AbilityContainer"):
		if $AbilityPanel/AbilityContainer.has_node("FireballButton"):
			$AbilityPanel/AbilityContainer/FireballButton.pressed.connect(_on_plasma_strike_pressed)
		if $AbilityPanel/AbilityContainer.has_node("HealButton"):
			$AbilityPanel/AbilityContainer/HealButton.pressed.connect(_on_repair_wave_pressed)
		if $AbilityPanel/AbilityContainer.has_node("ShieldButton"):
			$AbilityPanel/AbilityContainer/ShieldButton.pressed.connect(_on_energy_barrier_pressed)
		if $AbilityPanel/AbilityContainer.has_node("LightningButton"):
			$AbilityPanel/AbilityContainer/LightningButton.pressed.connect(_on_ion_storm_pressed)
	
	# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	create_race_ability_button()
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ drag&drop –¥–ª—è –í–°–ï–• –∫–Ω–æ–ø–æ–∫
	print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º drag&drop –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫...")
	$Panel/MainButtonContainer/SpawnSoldierButton.gui_input.connect(_on_unit_button_input)
	$Panel/MainButtonContainer/CollectorButton.gui_input.connect(_on_collector_button_input)
	$Panel/MainButtonContainer/BuildTowerButton.gui_input.connect(_on_structure_button_input)
	
	# –î–æ–±–∞–≤–ª—è–µ–º drag&drop –¥–ª—è —ç–ª–∏—Ç–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ (–≤—Å–µ–≥–¥–∞)
	$Panel/MainButtonContainer/EliteSoldierButton.gui_input.connect(_on_elite_soldier_button_input)
	$Panel/MainButtonContainer/CrystalMageButton.gui_input.connect(_on_crystal_mage_button_input)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–¥–∞–Ω–∏—è –≤ _ready –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
	call_deferred("connect_new_building_inputs")
	print("‚úÖ –í—Å–µ drag&drop –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã!")

	if spawner_panel:
		spawner_panel.spawner_drag_start.connect(_on_spawner_drag_start)
		spawner_panel.spawner_drag_end.connect(_on_spawner_drag_end)
	
	# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –Ω–æ–≤—ã–π –ª–æ—Ä
	update_button_texts()
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
	call_deferred("connect_new_building_inputs")

	# –î–æ–±–∞–≤–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	add_control_instructions()

func update_button_texts():
	# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ - —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –ó–î–ê–ù–ò–Ø-–°–ü–ê–í–ù–ï–†–´
	$Panel/MainButtonContainer/SpawnSoldierButton.text = "üè∞ –ö–ê–ó–ê–†–ú–´\nüí∞ 80 —ç–Ω–µ—Ä–≥–∏–∏"
	$Panel/MainButtonContainer/BuildTowerButton.text = "üóº –ë–ê–®–ù–Ø\nüí∞ 60 —ç–Ω–µ—Ä–≥–∏–∏" 
	$Panel/MainButtonContainer/EliteSoldierButton.text = "üéñÔ∏è –¢–†–ï–ù–ò–†–û–í–û–ß–ù–´–ô –õ–ê–ì–ï–†–¨\nüí∞ 120‚ö° + 20üíé"
	$Panel/MainButtonContainer/CrystalMageButton.text = "üîÆ –ú–ê–ì–ò–ß–ï–°–ö–ê–Ø –ê–ö–ê–î–ï–ú–ò–Ø\nüí∞ 100‚ö° + 30üíé"
	$Panel/MainButtonContainer/CollectorButton.text = "üèÉ –¶–ï–ù–¢–† –ö–û–õ–õ–ï–ö–¢–û–†–û–í\nüí∞ 90 —ç–Ω–µ—Ä–≥–∏–∏ + 15üíé"
	
	# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–¥–∞–Ω–∏—è
	add_new_building_buttons()
	
	# –£–ª—É—á—à–∞–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫
	improve_button_style($Panel/MainButtonContainer/SpawnSoldierButton, Color.CYAN)
	improve_button_style($Panel/MainButtonContainer/BuildTowerButton, Color.ORANGE)
	improve_button_style($Panel/MainButtonContainer/EliteSoldierButton, Color.GOLD)
	improve_button_style($Panel/MainButtonContainer/CrystalMageButton, Color.MAGENTA)
	improve_button_style($Panel/MainButtonContainer/CollectorButton, Color.GREEN)

func add_new_building_buttons():
	# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
	var button_container = $Panel/MainButtonContainer
	
	# –ú–µ—Ö –∑–∞–≤–æ–¥ –¥–ª—è –±–æ–µ–≤—ã—Ö —Ä–æ–±–æ—Ç–æ–≤
	var mech_factory_button = Button.new()
	mech_factory_button.name = "MechFactoryButton"
	mech_factory_button.text = "ü§ñ –ú–ï–• –ó–ê–í–û–î\nüí∞ 150‚ö° + 25üíé\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–æ–±–æ—Ç–æ–≤"
	mech_factory_button.size = Vector2(120, 80)
	mech_factory_button.add_theme_font_size_override("font_size", 14)
	mech_factory_button.pressed.connect(_on_mech_factory_pressed)
	button_container.add_child(mech_factory_button)
	improve_button_style(mech_factory_button, Color.STEEL_BLUE)
	
	# –î—Ä–æ–Ω —Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è –ª–µ—Ç–∞—é—â–∏—Ö –¥—Ä–æ–Ω–æ–≤
	var drone_factory_button = Button.new()
	drone_factory_button.name = "DroneFactoryButton"
	drone_factory_button.text = "üõ∏ –î–†–û–ù –§–ê–ë–†–ò–ö–ê\nüí∞ 130‚ö° + 20üíé\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –¥—Ä–æ–Ω–æ–≤"
	drone_factory_button.size = Vector2(120, 80)
	drone_factory_button.add_theme_font_size_override("font_size", 14)
	drone_factory_button.pressed.connect(_on_drone_factory_pressed)
	button_container.add_child(drone_factory_button)
	improve_button_style(drone_factory_button, Color.LIGHT_BLUE)
	
	print("üè≠ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–¥–∞–Ω–∏—è: –ú–µ—Ö –∑–∞–≤–æ–¥ –∏ –î—Ä–æ–Ω —Ñ–∞–±—Ä–∏–∫–∞")

func _on_deploy_unit_pressed():
	print("üè∞ –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ö–ê–ó–ê–†–ú–´ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")

func _on_construct_facility_pressed():
	print("üóº –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ë–ê–®–ù–Ø –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")

func _on_deploy_specialist_pressed():
	print("üéñÔ∏è –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¢–†–ï–ù–ò–†–û–í–û–ß–ù–´–ô –õ–ê–ì–ï–†–¨ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")

func _on_deploy_technician_pressed():
	print("üîÆ –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ú–ê–ì–ò–ß–ï–°–ö–ê–Ø –ê–ö–ê–î–ï–ú–ò–Ø –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")

func _on_spawn_collector_pressed():
	print("üèÉ –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¶–ï–ù–¢–† –ö–û–õ–õ–ï–ö–¢–û–†–û–í –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")

func _on_plasma_strike_pressed():
	print("üî• –ü–ª–∞–∑–º–µ–Ω–Ω—ã–π —É–¥–∞—Ä –ø–æ –≤—Ä–∞–∂–µ—Å–∫–∏–º –ø–æ–∑–∏—Ü–∏—è–º")
	use_ability.emit("fireball", Vector3(0, 0, 0))

func _on_repair_wave_pressed():
	print("üíö –í–æ–ª–Ω–∞ —Ä–µ–º–æ–Ω—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—é–∑–Ω–∏–∫–æ–≤")
	use_ability.emit("heal_wave", Vector3(0, 0, 10))

func _on_energy_barrier_pressed():
	print("üõ°Ô∏è –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä –∑–∞—â–∏—â–∞–µ—Ç –≤–æ–π—Å–∫–∞")
	use_ability.emit("shield_barrier", Vector3(0, 0, 10))

func _on_ion_storm_pressed():
	print("‚ö° –ò–æ–Ω–Ω–∞—è –±—É—Ä—è –ø–æ—Ä–∞–∂–∞–µ—Ç –≤—Ä–∞–≥–æ–≤")
	use_ability.emit("lightning_storm", Vector3(0, 0, 0))

func update_ability_buttons(energy: int, crystals: int):
	# (documentation comment)
	if has_node("AbilityPanel/AbilityContainer"):
		update_button_state("AbilityPanel/AbilityContainer/FireballButton", energy >= 40, crystals >= 15)
		update_button_state("AbilityPanel/AbilityContainer/HealButton", energy >= 30, crystals >= 10)
		update_button_state("AbilityPanel/AbilityContainer/ShieldButton", energy >= 50, crystals >= 20)
		update_button_state("AbilityPanel/AbilityContainer/LightningButton", energy >= 60, crystals >= 25)

func update_unit_buttons(energy: int, crystals: int):
	# (documentation comment)
	update_button_state("Panel/MainButtonContainer/SpawnSoldierButton", energy >= 20, true)
	update_button_state("Panel/MainButtonContainer/EliteSoldierButton", energy >= 30, crystals >= 10)
	update_button_state("Panel/MainButtonContainer/CrystalMageButton", energy >= 25, crystals >= 15)
	update_button_state("Panel/MainButtonContainer/BuildTowerButton", energy >= 60, true)

func update_button_state(button_path: String, has_energy: bool, has_crystals: bool):
	# (documentation comment)
	if has_node(button_path):
		var button = get_node(button_path)
		var can_afford = has_energy and has_crystals
		
		# –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
		if can_afford:
			button.modulate = Color(1.0, 1.0, 1.0, 1.0)  # –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
		else:
			button.modulate = Color(0.5, 0.5, 0.5, 0.7)  # –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
		
		button.disabled = not can_afford

func _on_collector_button_input(event):
	# –ö–æ–ª–ª–µ–∫—Ç–æ—Ä—ã —Å–ø–∞–≤–Ω—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–µ —Ç—Ä–µ–±—É—é—Ç drag&drop
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
		var collector_button = get_node("Panel/MainButtonContainer/CollectorButton")
		
		print("üèÉ –°–ø–∞–≤–Ω –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ")
		
		# –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ (BattleManager –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
		spawn_unit_drag.emit("collector", Vector2.ZERO)  # –ü–æ–∑–∏—Ü–∏—è –Ω–µ –≤–∞–∂–Ω–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
		
		# –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
		collector_button.modulate = Color.GREEN
		await get_tree().create_timer(0.2).timeout
		collector_button.modulate = Color.WHITE

func _on_unit_button_input(event):
	# Drag&drop –¥–ª—è –∫–∞–∑–∞—Ä–º
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var soldier_button = get_node("Panel/MainButtonContainer/SpawnSoldierButton")
		if event.pressed:
			# –ù–∞—á–∞–ª–æ drag-–æ–ø–µ—Ä–∞—Ü–∏–∏ - –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
			drag_type = "barracks"
			is_dragging = true
			drag_start_pos = event.position
			soldier_button.modulate = Color.YELLOW  # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
			create_ghost_preview("barracks")
			print("üè∞ –ù–∞—á–∞–ª–æ drag –∫–∞–∑–∞—Ä–º - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag - —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∫–∞–∑–∞—Ä–º
			if is_dragging and drag_type == "barracks":
				print("üè∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag –∫–∞–∑–∞—Ä–º –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				build_structure_drag.emit(event.position)  # –°—Ç—Ä–æ–∏–º –∑–¥–∞–Ω–∏–µ
			is_dragging = false
			drag_type = ""
			destroy_ghost_preview()
			soldier_button.modulate = Color.WHITE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç

func _on_structure_button_input(event):
	# Drag&drop –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –±–∞—à–Ω–∏
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var tower_button = get_node("Panel/MainButtonContainer/BuildTowerButton")
		if event.pressed:
			# –ù–∞—á–∞–ª–æ drag-–æ–ø–µ—Ä–∞—Ü–∏–∏
			drag_type = "tower"
			is_dragging = true
			drag_start_pos = event.position
			tower_button.modulate = Color.YELLOW  # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
			create_ghost_preview("tower")
			print("üèóÔ∏è –ù–∞—á–∞–ª–æ drag –±–∞—à–Ω–∏ - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag - —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –º–æ–¥—É–ª—è
			if is_dragging and drag_type == "tower":
				print("üèóÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag –±–∞—à–Ω–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				build_structure_drag.emit(event.position)
			is_dragging = false
			drag_type = ""
			destroy_ghost_preview()
			tower_button.modulate = Color.WHITE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç

func _on_elite_soldier_button_input(event):
	# Drag&drop –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ª–∞–≥–µ—Ä—è
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var elite_button = get_node("Panel/MainButtonContainer/EliteSoldierButton")
		if event.pressed:
			drag_type = "training_camp"
			is_dragging = true
			drag_start_pos = event.position
			elite_button.modulate = Color.YELLOW
			create_ghost_preview("training_camp")
			print("üéñÔ∏è –ù–∞—á–∞–ª–æ drag —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ª–∞–≥–µ—Ä—è - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			if is_dragging and drag_type == "training_camp":
				print("üéñÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ª–∞–≥–µ—Ä—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				build_structure_drag.emit(event.position)  # –°—Ç—Ä–æ–∏–º –∑–¥–∞–Ω–∏–µ
			is_dragging = false
			drag_type = ""
			destroy_ghost_preview()
			elite_button.modulate = Color.WHITE

func _on_crystal_mage_button_input(event):
	# Drag&drop –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–æ–π –∞–∫–∞–¥–µ–º–∏–∏
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var mage_button = get_node("Panel/MainButtonContainer/CrystalMageButton")
		if event.pressed:
			drag_type = "magic_academy"
			is_dragging = true
			drag_start_pos = event.position
			mage_button.modulate = Color.YELLOW
			create_ghost_preview("magic_academy")
			print("üîÆ –ù–∞—á–∞–ª–æ drag –º–∞–≥–∏—á–µ—Å–∫–æ–π –∞–∫–∞–¥–µ–º–∏–∏ - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			if is_dragging and drag_type == "magic_academy":
				print("üîÆ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag –º–∞–≥–∏—á–µ—Å–∫–æ–π –∞–∫–∞–¥–µ–º–∏–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				build_structure_drag.emit(event.position)  # –°—Ç—Ä–æ–∏–º –∑–¥–∞–Ω–∏–µ
			is_dragging = false
			drag_type = ""
			destroy_ghost_preview()
			mage_button.modulate = Color.WHITE

func update_info(player_hp, player_energy, enemy_hp, enemy_energy, player_crystals = 0, enemy_crystals = 0):
	# (documentation comment)
	# –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
	$PlayerHUD.text = "üü¶ –ö–û–ú–ê–ù–î–ò–† | ‚ö°%d | üíé%d | ‚ù§Ô∏è%d" % [player_energy, player_crystals, player_hp]
	$EnemyHUD.text = "üü• –ü–†–û–¢–ò–í–ù–ò–ö | ‚ö°%d | üíé%d | ‚ù§Ô∏è%d" % [enemy_energy, enemy_crystals, enemy_hp]
	
	# –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
	$PlayerHUD.modulate = Color(0.7, 0.9, 1.0)  # –°–∏–Ω–µ–≤–∞—Ç—ã–π –¥–ª—è –∏–≥—Ä–æ–∫–∞
	$EnemyHUD.modulate = Color(1.0, 0.7, 0.7)   # –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π –¥–ª—è –≤—Ä–∞–≥–∞
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
	update_ability_buttons(player_energy, player_crystals)
	update_unit_buttons(player_energy, player_crystals)

func get_hp_color(hp: int, max_hp: int) -> Color:
	# (documentation comment)
	var hp_percent = float(hp) / float(max_hp)
	if hp_percent > 0.7:
		return Color.GREEN
	elif hp_percent > 0.3:
		return Color.YELLOW
	else:
		return Color.RED

func _input(event):
	# –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
	if is_dragging and ghost_preview:
		if event is InputEventMouseMotion:
			var mouse_pos = get_global_mouse_position()
			ghost_preview.position = mouse_pos - ghost_preview.size / 2
			
			# –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
			var can_build = can_build_at_position(mouse_pos)
			if can_build:
				ghost_preview.color = get_building_color(drag_type)
				ghost_preview.color.a = 0.7
			else:
				ghost_preview.color = Color.RED
				ghost_preview.color.a = 0.5

func _on_spawner_drag_start(spawner_type):
	# (documentation comment)
	print("[–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å] –ù–∞—á–∞—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –º–æ–¥—É–ª—è: ", spawner_type)

func _on_spawner_drag_end(spawner_type, global_pos):
	# (documentation comment)
	print("[–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å] –ú–æ–¥—É–ª—å —Ä–∞–∑–º–µ—â–µ–Ω: ", spawner_type, " –≤ —Ç–æ—á–∫–µ ", global_pos)
	# –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	if get_parent().has_method("on_spawner_drop"):
		get_parent().on_spawner_drop(spawner_type, global_pos)

func _on_start_game_pressed():
	print("üöÄ === –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –ò–ì–†–´ ===")
	print("1. –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
	main_menu.visible = false
	print("2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
	game_panel.visible = true
	ability_panel.visible = true
	spawner_panel.visible = true
	$PlayerHUD.visible = true
	$EnemyHUD.visible = true
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	var instructions = get_node_or_null("ControlInstructions")
	if instructions:
		instructions.visible = true
		print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã")
	
	print("3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª start_battle...")
	start_battle.emit()
	print("4. –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

func _on_exit_pressed():
	print("üö™ –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã")
	get_tree().quit()

func show_main_menu():
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏/–ø–æ–±–µ–¥–µ)
	main_menu.visible = true
	game_panel.visible = false
	ability_panel.visible = false
	spawner_panel.visible = false
	$PlayerHUD.visible = false
	$EnemyHUD.visible = false

func improve_button_style(button: Button, color: Color):
	# –£–ª—É—á—à–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫
	if not button:
		return
		
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –º–æ–¥—É–ª—è—Ü–∏–∏
	button.modulate = color
	
	# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
	button.add_theme_font_size_override("font_size", 18)
	
	# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ (–∏–∑–±–µ–≥–∞–µ–º lambda capture)
	var original_color = color
	var hover_color = color.lightened(0.3)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ lambda
	if not button.mouse_entered.is_connected(_on_button_hover):
		button.mouse_entered.connect(_on_button_hover.bind(button, hover_color))
	if not button.mouse_exited.is_connected(_on_button_unhover):
		button.mouse_exited.connect(_on_button_unhover.bind(button, original_color))

func _on_button_hover(button: Button, hover_color: Color):
	button.modulate = hover_color

func _on_button_unhover(button: Button, original_color: Color):
	button.modulate = original_color

func add_control_instructions():
	# –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	var instructions = Label.new()
	instructions.name = "ControlInstructions"
	instructions.text = """üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:
üñ±Ô∏è –ü–ö–ú + –¥—Ä–∞–≥ = –∫–∞–º–µ—Ä–∞
üéÆ –°–∫—Ä–æ–ª–ª = –∑—É–º
üèÉ DRAG & DROP = —Å–ø–∞–≤–Ω!
1Ô∏è‚É£ –ó–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É
2Ô∏è‚É£ –ü–µ—Ä–µ—Ç–∞—â–∏ –Ω–∞ –∫–∞—Ä—Ç—É
3Ô∏è‚É£ –û—Ç–ø—É—Å—Ç–∏ = —Å–ø–∞–≤–Ω!

üî• –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ = –∫–ª–∏–∫ –∫–Ω–æ–ø–∫–∏"""
	
	instructions.anchors_preset = Control.PRESET_TOP_RIGHT
	instructions.position = Vector2(-350, 10)
	instructions.size = Vector2(340, 220)
	instructions.add_theme_font_size_override("font_size", 20)  # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä
	instructions.add_theme_color_override("font_color", Color.YELLOW)  # –Ø—Ä—á–µ
	instructions.add_theme_color_override("font_shadow_color", Color.BLACK)
	instructions.add_theme_constant_override("shadow_offset_x", 3)
	instructions.add_theme_constant_override("shadow_offset_y", 3)
	instructions.visible = false  # –°–∫—Ä—ã–≤–∞–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
	
	add_child(instructions)

func show_game_interface():
	# –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	$MainMenu.visible = false
	$Panel.visible = true
	$AbilityPanel.visible = true
	$PlayerHUD.visible = true
	$EnemyHUD.visible = true
	$SpawnerPanel.visible = true
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	var instructions = get_node_or_null("ControlInstructions")
	if instructions:
		instructions.visible = true
	
	print("üéÆ –ò–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

func create_race_ability_button():
	# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	if not has_node("AbilityPanel/AbilityContainer"):
		return
	
	var ability_container = $AbilityPanel/AbilityContainer
	
	# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≠–ú–ò-–∏–º–ø—É–ª—å—Å–∞
	var emp_button = Button.new()
	emp_button.name = "EMPButton"
	emp_button.text = "‚ö° –≠–ú–ò-–ò–ú–ü–£–õ–¨–°\nüí• –û—Ç–∫–ª—é—á–∞–µ—Ç –∑–¥–∞–Ω–∏—è"
	emp_button.size = Vector2(140, 60)
	emp_button.add_theme_font_size_override("font_size", 16)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	emp_button.pressed.connect(_on_emp_pulse_pressed)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	ability_container.add_child(emp_button)
	
	# –°—Ç–∏–ª–∏–∑—É–µ–º –∫–Ω–æ–ø–∫—É
	improve_button_style(emp_button, Color.PURPLE)
	
	print("‚ö° –ö–Ω–æ–ø–∫–∞ –≠–ú–ò-–∏–º–ø—É–ª—å—Å–∞ —Å–æ–∑–¥–∞–Ω–∞")

func _on_emp_pulse_pressed():
	print("‚ö° –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≠–ú–ò-–∏–º–ø—É–ª—å—Å–∞!")
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	use_ability.emit("emp_pulse", Vector3(0, 0, -10))  # –ê—Ç–∞–∫—É–µ–º –≤—Ä–∞–∂–µ—Å–∫—É—é –∑–æ–Ω—É

func create_ghost_preview(building_type: String):
	# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–¥–∞–Ω–∏—è
	ghost_preview = ColorRect.new()
	ghost_preview.size = Vector2(60, 60)
	ghost_preview.color = get_building_color(building_type)
	ghost_preview.color.a = 0.5  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
	ghost_preview.z_index = 100  # –ü–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
	
	# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–∏–ø–æ–º –∑–¥–∞–Ω–∏—è
	var label = Label.new()
	label.text = get_building_emoji(building_type)
	label.add_theme_font_size_override("font_size", 32)
	label.anchors_preset = Control.PRESET_CENTER
	ghost_preview.add_child(label)
	
	add_child(ghost_preview)
	print("üëª –°–æ–∑–¥–∞–Ω –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è ", building_type)

func destroy_ghost_preview():
	if ghost_preview:
		ghost_preview.queue_free()
		ghost_preview = null
		print("üëª –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —É–¥–∞–ª–µ–Ω")

func get_building_color(building_type: String) -> Color:
	match building_type:
		"barracks": return Color.CYAN
		"tower": return Color.ORANGE
		"training_camp": return Color.GOLD
		"magic_academy": return Color.MAGENTA
		"mech_factory": return Color.STEEL_BLUE
		"drone_factory": return Color.LIGHT_BLUE
		_: return Color.WHITE

func get_building_emoji(building_type: String) -> String:
	match building_type:
		"barracks": return "üè∞"
		"tower": return "üóº"
		"training_camp": return "üéñÔ∏è"
		"magic_academy": return "üîÆ"
		"mech_factory": return "ü§ñ"
		"drone_factory": return "üõ∏"
		_: return "üèóÔ∏è"

func can_build_at_position(screen_pos: Vector2) -> bool:
	# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–µ —ç–∫—Ä–∞–Ω–∞ (–∏–≥—Ä–æ–∫)
	var screen_size = get_viewport().get_visible_rect().size
	return screen_pos.y > screen_size.y * 0.5

func _on_mech_factory_pressed():
	print("ü§ñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ú–ï–• –ó–ê–í–û–î –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")

func _on_drone_factory_pressed():
	print("üõ∏ –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–∂–º–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É –î–†–û–ù –§–ê–ë–†–ò–ö–ê –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")

func _on_mech_factory_button_input(event):
	# Drag&drop –¥–ª—è –º–µ—Ö –∑–∞–≤–æ–¥–∞
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var mech_button = get_node("Panel/MainButtonContainer/MechFactoryButton")
		if event.pressed:
			drag_type = "mech_factory"
			is_dragging = true
			drag_start_pos = event.position
			mech_button.modulate = Color.YELLOW
			create_ghost_preview("mech_factory")
			print("ü§ñ –ù–∞—á–∞–ª–æ drag –º–µ—Ö –∑–∞–≤–æ–¥–∞ - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			if is_dragging and drag_type == "mech_factory":
				print("ü§ñ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag –º–µ—Ö –∑–∞–≤–æ–¥–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				build_structure_drag.emit(event.position)
			is_dragging = false
			drag_type = ""
			destroy_ghost_preview()
			mech_button.modulate = Color.STEEL_BLUE

func _on_drone_factory_button_input(event):
	# Drag&drop –¥–ª—è –¥—Ä–æ–Ω —Ñ–∞–±—Ä–∏–∫–∏
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var drone_button = get_node("Panel/MainButtonContainer/DroneFactoryButton")
		if event.pressed:
			drag_type = "drone_factory"
			is_dragging = true
			drag_start_pos = event.position
			drone_button.modulate = Color.YELLOW
			create_ghost_preview("drone_factory")
			print("üõ∏ –ù–∞—á–∞–ª–æ drag –¥—Ä–æ–Ω —Ñ–∞–±—Ä–∏–∫–∏ - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			if is_dragging and drag_type == "drone_factory":
				print("üõ∏ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag –¥—Ä–æ–Ω —Ñ–∞–±—Ä–∏–∫–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				build_structure_drag.emit(event.position)
			is_dragging = false
			drag_type = ""
			destroy_ghost_preview()
			drone_button.modulate = Color.LIGHT_BLUE

func connect_new_building_inputs():
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º drag&drop –¥–ª—è –Ω–æ–≤—ã—Ö –∑–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
	var mech_button = get_node_or_null("Panel/MainButtonContainer/MechFactoryButton")
	var drone_button = get_node_or_null("Panel/MainButtonContainer/DroneFactoryButton")
	
	if mech_button:
		mech_button.gui_input.connect(_on_mech_factory_button_input)
		print("ü§ñ –ú–µ—Ö –∑–∞–≤–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ drag&drop")
	
	if drone_button:
		drone_button.gui_input.connect(_on_drone_factory_button_input)
		print("üõ∏ –î—Ä–æ–Ω —Ñ–∞–±—Ä–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ drag&drop")
