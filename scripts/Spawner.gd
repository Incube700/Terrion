class_name Spawner
extends Node3D

@export var team: String = "player"
@export var lane_idx: int = 0
@export var unit_type: String = "soldier"
@export var spawner_type: String = "spawner" # 'spawner', 'tower', 'barracks'
@export var spawn_interval: float = 5.0
@export var max_units: int = 10

# –î–æ–±–∞–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–ø–∞–≤–Ω–µ—Ä—É
@export var health: int = 200
@export var max_health: int = 200

@onready var spawn_timer: Timer = $SpawnTimer
@onready var mesh_instance: MeshInstance3D = $MeshInstance3D
@onready var mesh_barrack1: MeshInstance3D = $MeshBarrack1
@onready var mesh_barrack2: MeshInstance3D = $MeshBarrack2
@onready var mesh_barrack3: MeshInstance3D = $MeshBarrack3
@onready var mesh_barrack4: MeshInstance3D = $MeshBarrack4

var battle_manager = null

func find_battle_manager():
	var current = get_parent()
	while current:
		if current.has_method("spawn_unit_at_pos"):
			return current
		current = current.get_parent()
	var root = get_tree().current_scene
	if root and root.has_method("spawn_unit_at_pos"):
		return root
	print("‚ö†Ô∏è BattleManager –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–ø–∞–≤–Ω–µ—Ä–∞ ", name, ". –ü—É—Ç—å –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω.")
	return null

func _ready():
	# –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ BattleManager
	battle_manager = find_battle_manager()
	
	# –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–µ–π
	add_to_group("spawners")
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ —Ç–∏–ø—É —Å–ø–∞–≤–Ω–µ—Ä–∞
	match spawner_type:
		"tower":
			health = 1200         # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 4 —Ä–∞–∑–∞ –¥–ª—è —Ç–∞–∫—Ç–∏–∫–∏
			max_health = 1200
		"barracks":
			health = 800          # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 3.2 —Ä–∞–∑–∞ –¥–ª—è —Ç–∞–∫—Ç–∏–∫–∏
			max_health = 800
		"collector_facility":
			health = 600          # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 4 —Ä–∞–∑–∞ –¥–ª—è —Ç–∞–∫—Ç–∏–∫–∏
			max_health = 600
		"spawner":
			health = 800          # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 4 —Ä–∞–∑–∞ –¥–ª—è —Ç–∞–∫—Ç–∏–∫–∏
			max_health = 800
		_:
			health = 800          # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 4 —Ä–∞–∑–∞ –¥–ª—è —Ç–∞–∫—Ç–∏–∫–∏
			max_health = 800
	
	# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–ø–∞–≤–Ω–µ—Ä–∞
	setup_appearance()
	
	# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Å–ø–∞–≤–Ω–∞
	if spawn_timer:
		spawn_timer.timeout.connect(_on_spawn_timer_timeout)
		
		# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ø–∞–≤–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
		match spawner_type:
			"spawner":
				spawn_timer.wait_time = 4.0  # –ë–∞–∑–æ–≤—ã–π —Å–ø–∞–≤–Ω–µ—Ä
			"barracks":
				spawn_timer.wait_time = 3.0  # –ë—ã—Å—Ç—Ä–µ–µ —Å–ø–∞–≤–Ω–∏—Ç
			"tower":
				spawn_timer.wait_time = 6.0  # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ —Å–∏–ª—å–Ω–µ–µ
			"collector_facility":
				spawn_timer.wait_time = 8.0  # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ, –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã –¥–æ—Ä–æ–≥–∏–µ
			_:
				spawn_timer.wait_time = 4.0
	
	# –°–æ–∑–¥–∞–µ–º 3D HP –±–∞—Ä –¥–ª—è –∑–¥–∞–Ω–∏—è
	create_building_health_bar()

func setup_appearance():
	if spawner_type == "tower":
		var cyl = CylinderMesh.new()
		cyl.top_radius = 0.7
		cyl.bottom_radius = 0.7
		cyl.height = 2.0
		mesh_instance.mesh = cyl
		mesh_instance.scale = Vector3(1, 1.5, 1)
		mesh_instance.material_override = StandardMaterial3D.new()
		
		# –¶–≤–µ—Ç –±–∞—à–Ω–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã
		if team == "player":
			mesh_instance.material_override.albedo_color = Color(0.2, 0.6, 1, 1)  # –°–∏–Ω–∏–π
		else:
			mesh_instance.material_override.albedo_color = Color(1, 0.2, 0.2, 1)  # –ö—Ä–∞—Å–Ω—ã–π
			
		hide_barracks_meshes()
		
	elif spawner_type == "barracks":
		mesh_instance.visible = false
		show_barracks_meshes()
		
		for m in [mesh_barrack1, mesh_barrack2, mesh_barrack3, mesh_barrack4]:
			if m:
				m.material_override = StandardMaterial3D.new()
				if team == "player":
					m.material_override.albedo_color = Color(0.3, 0.5, 0.8, 1)  # –°–∏–Ω–µ–≤–∞—Ç—ã–π
				else:
					m.material_override.albedo_color = Color(0.8, 0.3, 0.3, 1)  # –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π
	
	elif spawner_type == "collector_facility":
		# –ö–æ–º–ø–ª–µ–∫—Å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤ - –æ—Å–æ–±–∞—è —Ñ–æ—Ä–º–∞
		var sphere = SphereMesh.new()
		sphere.radius = 0.8
		sphere.height = 1.6
		mesh_instance.mesh = sphere
		mesh_instance.material_override = StandardMaterial3D.new()
		
		# –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
		if team == "player":
			mesh_instance.material_override.albedo_color = Color(0.2, 1.0, 0.2, 1)  # –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
		else:
			mesh_instance.material_override.albedo_color = Color(0.8, 0.8, 0.2, 1)  # –ñ–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π
		
		# –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
		mesh_instance.material_override.emission_enabled = true
		mesh_instance.material_override.emission = Color(0.1, 0.5, 0.1)
		
		hide_barracks_meshes()
		
	else:  # spawner
		var box = BoxMesh.new()
		box.size = Vector3(1, 1, 1)
		mesh_instance.mesh = box
		mesh_instance.material_override = StandardMaterial3D.new()
		
		# –¶–≤–µ—Ç —Å–ø–∞–≤–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã
		if team == "player":
			mesh_instance.material_override.albedo_color = Color(0.2, 0.8, 0.8, 1)  # –ë–∏—Ä—é–∑–æ–≤—ã–π
		else:
			mesh_instance.material_override.albedo_color = Color(0.8, 0.2, 0.8, 1)  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
			
		hide_barracks_meshes()

func hide_barracks_meshes():
	if mesh_barrack1: mesh_barrack1.visible = false
	if mesh_barrack2: mesh_barrack2.visible = false
	if mesh_barrack3: mesh_barrack3.visible = false
	if mesh_barrack4: mesh_barrack4.visible = false

func show_barracks_meshes():
	if mesh_barrack1: mesh_barrack1.visible = true
	if mesh_barrack2: mesh_barrack2.visible = true
	if mesh_barrack3: mesh_barrack3.visible = true
	if mesh_barrack4: mesh_barrack4.visible = true

func _on_spawn_timer_timeout():
	if not battle_manager:
		return
		
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª–∞—Å—å –ª–∏ –±–∏—Ç–≤–∞
	if not battle_manager.battle_started:
		return
	
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —é–Ω–∏—Ç–∞ –¥–ª—è —Å–ø–∞–≤–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–ø–∞–≤–Ω–µ—Ä–∞
	var spawn_unit_type = get_spawn_unit_type()
	var cost = battle_manager.get_unit_cost(spawn_unit_type)
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –∫–æ–º–∞–Ω–¥—ã
	var team_energy = battle_manager.player_energy if team == "player" else battle_manager.enemy_energy
	if team_energy < cost:
		print("–°–ø–∞–≤–Ω–µ—Ä ", team, ": –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è ", spawn_unit_type)
		return
	
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ø–∞–≤–Ω–∞ —Ä—è–¥–æ–º —Å–æ —Å–ø–∞–≤–Ω–µ—Ä–æ–º
	var spawn_pos = get_spawn_position()
	
	# –°–ø–∞–≤–Ω–∏–º —é–Ω–∏—Ç–∞
	battle_manager.spawn_unit_at_pos(team, spawn_pos, spawn_unit_type)
	
	# –°–Ω–∏–º–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
	if team == "player":
		battle_manager.player_energy -= cost
	else:
		battle_manager.enemy_energy -= cost
	
	# –û–±–Ω–æ–≤–ª—è–µ–º UI
	battle_manager.update_ui()
	
	print("–°–ø–∞–≤–Ω–µ—Ä ", team, " —Å–æ–∑–¥–∞–ª ", spawn_unit_type, " –∑–∞ ", cost, " —ç–Ω–µ—Ä–≥–∏–∏")

func get_spawn_unit_type() -> String:
	match spawner_type:
		"tower":
			# –ë–∞—à–Ω–∏ —Å–ø–∞–≤–Ω—è—Ç –¥—Ä–æ–Ω–æ–≤ (–≤–æ–∑–¥—É—à–Ω—ã–µ —é–Ω–∏—Ç—ã)
			return "drone"
		"barracks":
			# –ë–∞—Ä–∞–∫–∏ —Å–ø–∞–≤–Ω—è—Ç —Å–æ–ª–¥–∞—Ç
			return "soldier"
		"collector_facility":
			# –ö–æ–º–ø–ª–µ–∫—Å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å–ø–∞–≤–Ω–∏—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
			return "collector"
		"spawner":
			# –ë–∞–∑–æ–≤—ã–µ —Å–ø–∞–≤–Ω–µ—Ä—ã —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞—é—Ç —Ç–∏–ø
			var types = ["soldier", "soldier", "tank"]  # –ë–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ —Å–æ–ª–¥–∞—Ç
			return types[randi() % types.size()]
		_:
			return "soldier"

func get_spawn_position() -> Vector3:
	# –°–ø–∞–≤–Ω–∏–º —é–Ω–∏—Ç–∞ —Ä—è–¥–æ–º —Å–æ —Å–ø–∞–≤–Ω–µ—Ä–æ–º, –Ω–æ –Ω–µ –ø—Ä—è–º–æ –Ω–∞ –Ω—ë–º
	var offset_x = randf_range(-1.5, 1.5)
	var offset_z = randf_range(-1.5, 1.5)
	
	# –î–ª—è –∏–≥—Ä–æ–∫–∞ - —Å–ø–∞–≤–Ω–∏–º —á—É—Ç—å –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É
	if team == "player":
		offset_z += 1.0  # –°–¥–≤–∏–≥–∞–µ–º –∫ —Ü–µ–Ω—Ç—Ä—É –ø–æ–ª—è
	else:
		offset_z -= 1.0  # –°–¥–≤–∏–≥–∞–µ–º –∫ —Ü–µ–Ω—Ç—Ä—É –ø–æ–ª—è
	
	return global_position + Vector3(offset_x, 0, offset_z)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–∞–≤–Ω–µ—Ä–µ (–¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞)
func get_spawner_info() -> Dictionary:
	return {
		"team": team,
		"type": spawner_type,
		"position": global_position,
		"unit_type": get_spawn_unit_type(),
		"spawn_time": spawn_timer.wait_time if spawn_timer else 4.0
	}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è —Å–ø–∞–≤–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç –∞—Ç–∞–∫)
func destroy_spawner():
	print("üí• –°–ø–∞–≤–Ω–µ—Ä ", team, " ", spawner_type, " —É–Ω–∏—á—Ç–æ–∂–µ–Ω!")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è —Å–ø–∞–≤–Ω–µ—Ä–∞
	if battle_manager:
		battle_manager.call_deferred("check_victory_conditions")
	
	queue_free()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞ (—é–Ω–∏—Ç—ã –º–æ–≥—É—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∑–¥–∞–Ω–∏—è)
func take_damage(amount: int):
	health -= amount
	update_building_health_bar()  # –û–±–Ω–æ–≤–ª—è–µ–º 3D HP –±–∞—Ä –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
	print("üèóÔ∏è ", spawner_type, " –∫–æ–º–∞–Ω–¥—ã ", team, " –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω: ", amount, " HP: ", health, "/", max_health)
	
	# –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —É—Ä–æ–Ω–∞ (–º–∏–≥–∞–Ω–∏–µ –∫—Ä–∞—Å–Ω—ã–º)
	if mesh_instance:
		var original_color = mesh_instance.material_override.albedo_color if mesh_instance.material_override else Color.WHITE
		if mesh_instance.material_override:
			mesh_instance.material_override.albedo_color = Color.RED
		await get_tree().create_timer(0.2).timeout
		if mesh_instance and mesh_instance.material_override:
			mesh_instance.material_override.albedo_color = original_color
	
	# –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –Ω—É–ª–µ–≤–æ–º –∑–¥–æ—Ä–æ–≤—å–µ
	if health <= 0:
		destroy_spawner()

func create_building_health_bar():
	# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HP –±–∞—Ä–∞ –∑–¥–∞–Ω–∏—è
	var health_container = Node3D.new()
	health_container.name = "BuildingHealthBarContainer"
	health_container.position = Vector3(0, 3.5, 0)  # –í—ã—à–µ —á–µ–º —É —é–Ω–∏—Ç–æ–≤
	add_child(health_container)
	
	# –§–æ–Ω HP –±–∞—Ä–∞ (—Ç–µ–º–Ω—ã–π)
	var background = MeshInstance3D.new()
	var bg_mesh = BoxMesh.new()
	bg_mesh.size = Vector3(3.0, 0.4, 0.15)  # –ë–æ–ª—å—à–µ —á–µ–º —É —é–Ω–∏—Ç–æ–≤
	background.mesh = bg_mesh
	background.material_override = StandardMaterial3D.new()
	background.material_override.albedo_color = Color(0.1, 0.1, 0.1, 0.9)
	background.material_override.flags_transparent = true
	background.name = "BuildingHealthBarBackground"
	health_container.add_child(background)
	
	# HP –±–∞—Ä (—Ü–≤–µ—Ç–Ω–æ–π)
	var health_bar_mesh = MeshInstance3D.new()
	var hb_mesh = BoxMesh.new()
	hb_mesh.size = Vector3(3.0, 0.35, 0.08)
	health_bar_mesh.mesh = hb_mesh
	health_bar_mesh.material_override = StandardMaterial3D.new()
	health_bar_mesh.material_override.albedo_color = Color.GREEN
	health_bar_mesh.material_override.emission_enabled = true
	health_bar_mesh.material_override.emission = Color.GREEN * 0.4
	health_bar_mesh.name = "BuildingHealthBar3D"
	health_bar_mesh.position = Vector3(0, 0, 0.04)  # –ß—É—Ç—å –≤–ø–µ—Ä–µ–¥–∏ —Ñ–æ–Ω–∞
	health_container.add_child(health_bar_mesh)
	
	# –¢–µ–∫—Å—Ç HP (Label3D)
	var health_label = Label3D.new()
	health_label.text = str(health) + "/" + str(max_health)
	health_label.font_size = 48  # –ú–µ–Ω—å—à–µ —á–µ–º —É —é–Ω–∏—Ç–æ–≤
	health_label.position = Vector3(0, 0.6, 0)
	health_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	health_label.modulate = Color.WHITE
	health_label.outline_size = 3
	health_label.outline_modulate = Color.BLACK
	health_label.name = "BuildingHealthLabel3D"
	health_container.add_child(health_label)
	
	# –ò–∫–æ–Ω–∫–∞ —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è
	var type_label = Label3D.new()
	var type_icon = get_building_icon()
	type_label.text = type_icon
	type_label.font_size = 32
	type_label.position = Vector3(0, 1.0, 0)
	type_label.billboard = BaseMaterial3D.BILLBOARD_ENABLED
	type_label.modulate = Color.YELLOW
	type_label.outline_size = 2
	type_label.outline_modulate = Color.BLACK
	type_label.name = "BuildingTypeLabel3D"
	health_container.add_child(type_label)
	
	# Label3D —É–∂–µ –∏–º–µ—é—Ç —Å–≤–æ–π billboard, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω

func get_building_icon() -> String:
	match spawner_type:
		"tower": return "üóº"
		"barracks": return "üè∞"
		"collector_facility": return "‚öôÔ∏è"
		"spawner": return "üè≠"
		_: return "üè¢"

func update_building_health_bar():
	var health_container = get_node_or_null("BuildingHealthBarContainer")
	if not health_container:
		return
		
	var health_bar_3d = health_container.get_node_or_null("BuildingHealthBar3D")
	var health_label_3d = health_container.get_node_or_null("BuildingHealthLabel3D")
	
	if health_bar_3d and health_label_3d:
		# –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä HP –±–∞—Ä–∞
		var health_percent = float(health) / float(max_health)
		var new_scale_x = health_percent
		health_bar_3d.scale.x = new_scale_x
		
		# –°–¥–≤–∏–≥–∞–µ–º HP –±–∞—Ä –≤–ª–µ–≤–æ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏
		var offset_x = -(1.0 - new_scale_x) * 1.5  # 1.5 - –ø–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã –±–∞—Ä–∞ –∑–¥–∞–Ω–∏—è
		health_bar_3d.position.x = offset_x
		
		# –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–¥–æ—Ä–æ–≤—å—è
		if health_percent > 0.7:
			health_bar_3d.material_override.albedo_color = Color.GREEN
			health_bar_3d.material_override.emission = Color.GREEN * 0.4
		elif health_percent > 0.4:
			health_bar_3d.material_override.albedo_color = Color.YELLOW
			health_bar_3d.material_override.emission = Color.YELLOW * 0.4
		elif health_percent > 0.2:
			health_bar_3d.material_override.albedo_color = Color.ORANGE
			health_bar_3d.material_override.emission = Color.ORANGE * 0.4
		else:
			health_bar_3d.material_override.albedo_color = Color.RED
			health_bar_3d.material_override.emission = Color.RED * 0.4
		
		# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
		health_label_3d.text = str(health) + "/" + str(max_health)
		health_label_3d.modulate = Color.WHITE
 
