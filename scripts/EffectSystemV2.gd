class_name EffectSystemV2
extends GameSystem

# EffectSystemV2 ‚Äî —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è TERRION
# –ù–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç GameSystem –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

# –ü—É–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
var explosion_pool: Array[GPUParticles3D] = []
var hit_pool: Array[GPUParticles3D] = []
var spawn_pool: Array[GPUParticles3D] = []

var max_pool_size: int = 20
var active_effects: Array[GPUParticles3D] = []

func _init():
	system_name = "EffectSystem"

func initialize_system():
	super.initialize_system()
	
	# –°–æ–∑–¥–∞–µ–º –ø—É–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
	create_effect_pools()
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ EventBus
	if has_node("/root/EventBus"):
		var event_bus = get_node("/root/EventBus")
		event_bus.unit_spawned.connect(_on_unit_spawned)
		event_bus.unit_killed.connect(_on_unit_killed)
		event_bus.building_constructed.connect(_on_building_constructed)
		event_bus.ability_used.connect(_on_ability_used)
	
	print("‚ú® EffectSystemV2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø—É–ª–∞–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")

func create_effect_pools():
	# (documentation comment)
	for i in range(max_pool_size):
		# –ü—É–ª –≤–∑—Ä—ã–≤–æ–≤
		var explosion = create_explosion_particle()
		explosion.emitting = false
		explosion.visible = false
		explosion_pool.append(explosion)
		add_child(explosion)
		
		# –ü—É–ª –ø–æ–ø–∞–¥–∞–Ω–∏–π
		var hit = create_hit_particle()
		hit.emitting = false
		hit.visible = false
		hit_pool.append(hit)
		add_child(hit)
		
		# –ü—É–ª —Å–ø–∞–≤–Ω–∞
		var spawn = create_spawn_particle()
		spawn.emitting = false
		spawn.visible = false
		spawn_pool.append(spawn)
		add_child(spawn)

func get_pooled_effect(pool: Array[GPUParticles3D]) -> GPUParticles3D:
	# (documentation comment)
	for effect in pool:
		if not effect.emitting:
			return effect
	
	# –ï—Å–ª–∏ –≤—Å–µ –∑–∞–Ω—è—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º)
	return pool[0] if pool.size() > 0 else null

func play_explosion_effect(position: Vector3, team: String = "neutral"):
	safe_execute(func(): _play_explosion_effect(position, team), 
				"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞")

func _play_explosion_effect(position: Vector3, team: String):
	var explosion = get_pooled_effect(explosion_pool)
	if not explosion:
		return
	
	explosion.global_position = position
	explosion.visible = true
	
	# –¶–≤–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ
	var color = Color.ORANGE
	if team == "player":
		color = Color.CYAN
	elif team == "enemy":
		color = Color.RED
	
	set_particle_color(explosion, color)
	explosion.restart()
	
	# –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
	get_tree().create_timer(2.0).timeout.connect(func(): hide_effect(explosion))

func play_hit_effect(position: Vector3, damage: int):
	safe_execute(func(): _play_hit_effect(position, damage),
				"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è")

func _play_hit_effect(position: Vector3, damage: int):
	var hit = get_pooled_effect(hit_pool)
	if not hit:
		return
	
	hit.global_position = position
	hit.visible = true
	
	# –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–Ω–∞
	var intensity = clamp(damage / 50.0, 0.3, 2.0)
	hit.amount = int(20 * intensity)
	
	hit.restart()
	get_tree().create_timer(1.0).timeout.connect(func(): hide_effect(hit))

func play_spawn_effect(position: Vector3, team: String):
	safe_execute(func(): _play_spawn_effect(position, team),
				"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç —Å–ø–∞–≤–Ω–∞")

func _play_spawn_effect(position: Vector3, team: String):
	var spawn = get_pooled_effect(spawn_pool)
	if not spawn:
		return
	
	spawn.global_position = position
	spawn.visible = true
	
	var color = Color.WHITE
	if team == "player":
		color = Color.CYAN
	elif team == "enemy":
		color = Color.RED
	
	set_particle_color(spawn, color)
	spawn.restart()
	get_tree().create_timer(1.0).timeout.connect(func(): hide_effect(spawn))

func hide_effect(effect: GPUParticles3D):
	# (documentation comment)
	if effect:
		effect.emitting = false
		effect.visible = false

func set_particle_color(particles: GPUParticles3D, color: Color):
	# (documentation comment)
	if particles.process_material and particles.process_material is ParticleProcessMaterial:
		particles.process_material.color = color

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —á–∞—Å—Ç–∏—Ü
func create_explosion_particle() -> GPUParticles3D:
	var particles = GPUParticles3D.new()
	var material = ParticleProcessMaterial.new()
	
	material.direction = Vector3(0, 1, 0)
	material.initial_velocity_min = 5.0
	material.initial_velocity_max = 15.0
	material.gravity = Vector3(0, -9.8, 0)
	material.scale_min = 0.1
	material.scale_max = 0.3
	material.color = Color.ORANGE
	
	particles.process_material = material
	particles.amount = 50
	particles.lifetime = 1.5
	particles.explosiveness = 1.0
	
	var mesh = SphereMesh.new()
	mesh.radius = 0.1
	mesh.height = 0.2
	particles.draw_pass_1 = mesh
	
	return particles

func create_hit_particle() -> GPUParticles3D:
	var particles = GPUParticles3D.new()
	var material = ParticleProcessMaterial.new()
	
	material.direction = Vector3(0, 1, 0)
	material.initial_velocity_min = 2.0
	material.initial_velocity_max = 8.0
	material.gravity = Vector3(0, -5.0, 0)
	material.scale_min = 0.05
	material.scale_max = 0.15
	material.color = Color.YELLOW
	
	particles.process_material = material
	particles.amount = 20
	particles.lifetime = 0.8
	particles.explosiveness = 1.0
	
	var mesh = SphereMesh.new()
	mesh.radius = 0.05
	mesh.height = 0.1
	particles.draw_pass_1 = mesh
	
	return particles

func create_spawn_particle() -> GPUParticles3D:
	var particles = GPUParticles3D.new()
	var material = ParticleProcessMaterial.new()
	
	material.direction = Vector3(0, 1, 0)
	material.initial_velocity_min = 3.0
	material.initial_velocity_max = 10.0
	material.gravity = Vector3(0, -3.0, 0)
	material.scale_min = 0.1
	material.scale_max = 0.25
	material.color = Color.WHITE
	
	particles.process_material = material
	particles.amount = 25
	particles.lifetime = 1.0
	particles.explosiveness = 1.0
	
	var mesh = SphereMesh.new()
	mesh.radius = 0.1
	mesh.height = 0.2
	particles.draw_pass_1 = mesh
	
	return particles

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π EventBus
func _on_unit_spawned(_team: String, _unit_type: String, position: Vector3):
	play_spawn_effect(position, _team)

func _on_unit_killed(_team: String, _unit_type: String, position: Vector3):
	play_explosion_effect(position, _team)

func _on_building_constructed(_team: String, _building_type: String, position: Vector3):
	play_spawn_effect(position, _team)

func _on_ability_used(team: String, ability_name: String, position: Vector3):
	# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	match ability_name:
		"fireball":
			play_explosion_effect(position, team)
		"heal_wave":
			play_spawn_effect(position, "neutral")
		_:
			play_hit_effect(position, 25)

func cleanup_system():
	# (documentation comment)
	super.cleanup_system()
	
	# –û—á–∏—â–∞–µ–º –ø—É–ª—ã
	for pool in [explosion_pool, hit_pool, spawn_pool]:
		for effect in pool:
			if is_instance_valid(effect):
				effect.queue_free()
		pool.clear()
	
	active_effects.clear()
	print("üßπ EffectSystemV2 –æ—á–∏—â–µ–Ω–∞") 