extends CanvasLayer

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–∏—Ä–∞ TERRION - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π UI —Å –∏–∫–æ–Ω–∫–∞–º–∏
# –í—Å–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ —Å–µ—Ç–∫–µ –±–µ–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏–π

signal start_battle
signal build_structure_drag(screen_pos)
signal use_ability(ability_name: String, position: Vector3)
signal summon_hero()
signal rally_units()
signal retreat_units()
signal upgrade_units()
signal use_nuke()

var drag_type = ""
var is_dragging = false
var drag_start_pos = Vector2.ZERO
var ghost_preview = null

@onready var main_menu = $MainMenu
@onready var game_ui = $GameUI

func _ready():
	print("üñ•Ô∏è –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–∏—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
	
	# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	var start_game_button = get_node("MainMenu/MenuContainer/StartGameButton")
	var exit_button = get_node("MainMenu/MenuContainer/ExitButton")
	
	if start_game_button:
		start_game_button.pressed.connect(_on_start_game_pressed)
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
	
	if exit_button:
		exit_button.pressed.connect(_on_exit_pressed)
		print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–í—ã—Ö–æ–¥' –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
	setup_building_buttons()
	setup_ability_buttons()
	setup_special_buttons()
	
	print("‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

func setup_building_buttons():
	# –ö–Ω–æ–ø–∫–∏ –∑–¥–∞–Ω–∏–π —Å drag&drop
	var barracks_button = get_node("GameUI/BottomPanel/BottomContainer/BuildingRow/BarracksButton")
	var collector_button = get_node("GameUI/BottomPanel/BottomContainer/BuildingRow/CollectorButton")
	var tower_button = get_node("GameUI/BottomPanel/BottomContainer/BuildingRow/TowerButton")
	var training_button = get_node("GameUI/BottomPanel/BottomContainer/BuildingRow/TrainingButton")
	var academy_button = get_node("GameUI/BottomPanel/BottomContainer/BuildingRow/AcademyButton")
	
	if barracks_button:
		barracks_button.gui_input.connect(_on_barracks_button_input)
	if collector_button:
		collector_button.gui_input.connect(_on_collector_button_input)
	if tower_button:
		tower_button.gui_input.connect(_on_tower_button_input)
	if training_button:
		training_button.gui_input.connect(_on_training_button_input)
	if academy_button:
		academy_button.gui_input.connect(_on_academy_button_input)
	
	print("‚úÖ –ö–Ω–æ–ø–∫–∏ –∑–¥–∞–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

func setup_ability_buttons():
	# –ö–Ω–æ–ø–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
	var fireball_button = get_node("GameUI/BottomPanel/BottomContainer/AbilityRow/FireballButton")
	var heal_button = get_node("GameUI/BottomPanel/BottomContainer/AbilityRow/HealButton")
	var shield_button = get_node("GameUI/BottomPanel/BottomContainer/AbilityRow/ShieldButton")
	var lightning_button = get_node("GameUI/BottomPanel/BottomContainer/AbilityRow/LightningButton")
	var hero_button = get_node("GameUI/BottomPanel/BottomContainer/AbilityRow/HeroButton")
	
	if fireball_button:
		fireball_button.pressed.connect(_on_fireball_ability)
	if heal_button:
		heal_button.pressed.connect(_on_heal_ability)
	if shield_button:
		shield_button.pressed.connect(_on_shield_ability)
	if lightning_button:
		lightning_button.pressed.connect(_on_lightning_ability)
	if hero_button:
		hero_button.pressed.connect(_on_hero_summon_pressed)
	
	print("‚úÖ –ö–Ω–æ–ø–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

func setup_special_buttons():
	# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
	var rally_button = get_node("GameUI/BottomPanel/BottomContainer/SpecialRow/RallyButton")
	var retreat_button = get_node("GameUI/BottomPanel/BottomContainer/SpecialRow/RetreatButton")
	var upgrade_button = get_node("GameUI/BottomPanel/BottomContainer/SpecialRow/UpgradeButton")
	var nuke_button = get_node("GameUI/BottomPanel/BottomContainer/SpecialRow/NukeButton")
	var menu_button = get_node("GameUI/BottomPanel/BottomContainer/SpecialRow/MenuButton")
	
	if rally_button:
		rally_button.pressed.connect(_on_rally_pressed)
	if retreat_button:
		retreat_button.pressed.connect(_on_retreat_pressed)
	if upgrade_button:
		upgrade_button.pressed.connect(_on_upgrade_pressed)
	if nuke_button:
		nuke_button.pressed.connect(_on_nuke_pressed)
	if menu_button:
		menu_button.pressed.connect(_on_menu_pressed)
	
	print("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

# Drag&drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–¥–∞–Ω–∏–π
func _on_barracks_button_input(event):
	_handle_building_drag(event, "barracks", get_node("GameUI/BottomPanel/BottomContainer/BuildingRow/BarracksButton"))

func _on_collector_button_input(event):
	_handle_building_drag(event, "collector_facility", get_node("GameUI/BottomPanel/BottomContainer/BuildingRow/CollectorButton"))

func _on_tower_button_input(event):
	_handle_building_drag(event, "tower", get_node("GameUI/BottomPanel/BottomContainer/BuildingRow/TowerButton"))

func _on_training_button_input(event):
	_handle_building_drag(event, "training_camp", get_node("GameUI/BottomPanel/BottomContainer/BuildingRow/TrainingButton"))

func _on_academy_button_input(event):
	_handle_building_drag(event, "magic_academy", get_node("GameUI/BottomPanel/BottomContainer/BuildingRow/AcademyButton"))

func _handle_building_drag(event, building_type: String, button: Button):
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		if event.pressed:
			# –ù–∞—á–∞–ª–æ drag-–æ–ø–µ—Ä–∞—Ü–∏–∏
			drag_type = building_type
			is_dragging = true
			drag_start_pos = event.position
			button.modulate = Color.YELLOW  # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
			create_ghost_preview(building_type)
			print("üèóÔ∏è –ù–∞—á–∞–ª–æ drag ", building_type, " - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É")
		else:
			# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag - —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∑–¥–∞–Ω–∏—è
			if is_dragging and drag_type == building_type:
				print("üèóÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ drag ", building_type, " –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", event.position)
				build_structure_drag.emit(event.position)
			is_dragging = false
			drag_type = ""
			destroy_ghost_preview()
			button.modulate = Color.WHITE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
func _on_fireball_ability():
	print("üî• –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä!")
	use_ability.emit("fireball", Vector3(0, 0, -10))

func _on_heal_ability():
	print("üíö –õ–µ—á–µ–Ω–∏–µ —Å–æ—é–∑–Ω–∏–∫–æ–≤!")
	use_ability.emit("heal_wave", Vector3(0, 0, 10))

func _on_shield_ability():
	print("üõ°Ô∏è –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —â–∏—Ç!")
	use_ability.emit("shield_barrier", Vector3(0, 0, 10))

func _on_lightning_ability():
	print("‚ö° –ò–æ–Ω–Ω–∞—è –±—É—Ä—è!")
	use_ability.emit("lightning_storm", Vector3(0, 0, -10))

func _on_hero_summon_pressed():
	print("ü¶∏ –ü—Ä–∏–∑—ã–≤ –≥–µ—Ä–æ—è!")
	summon_hero.emit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
func _on_rally_pressed():
	print("üéØ –°–±–æ—Ä –≤–æ–π—Å–∫!")
	rally_units.emit()

func _on_retreat_pressed():
	print("üèÉ –û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ!")
	retreat_units.emit()

func _on_upgrade_pressed():
	print("‚¨ÜÔ∏è –£–ª—É—á—à–µ–Ω–∏–µ —é–Ω–∏—Ç–æ–≤!")
	upgrade_units.emit()

func _on_nuke_pressed():
	print("‚ò¢Ô∏è –Ø–¥–µ—Ä–Ω—ã–π —É–¥–∞—Ä!")
	use_nuke.emit()

func _on_menu_pressed():
	print("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é!")
	show_main_menu()

func update_info(player_hp, player_energy, enemy_hp, enemy_energy, player_crystals = 0, enemy_crystals = 0):
	# –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
	var player_info = get_node("GameUI/TopPanel/TopContainer/PlayerInfo")
	var enemy_info = get_node("GameUI/TopPanel/TopContainer/EnemyInfo")
	
	if player_info:
		player_info.text = "üü¶ –ò–ì–†–û–ö | ‚ö°%d | üíé%d | ‚ù§Ô∏è%d" % [player_energy, player_crystals, player_hp]
		player_info.modulate = Color(0.7, 0.9, 1.0)
	
	if enemy_info:
		enemy_info.text = "üü• –í–†–ê–ì | ‚ö°%d | üíé%d | ‚ù§Ô∏è%d" % [enemy_energy, enemy_crystals, enemy_hp]
		enemy_info.modulate = Color(1.0, 0.7, 0.7)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
	update_button_availability(player_energy, player_crystals)

func update_button_availability(energy: int, crystals: int):
	# –ó–¥–∞–Ω–∏—è
	update_single_button("GameUI/BottomPanel/BottomContainer/BuildingRow/BarracksButton", energy >= 80)
	update_single_button("GameUI/BottomPanel/BottomContainer/BuildingRow/CollectorButton", energy >= 90 and crystals >= 15)
	update_single_button("GameUI/BottomPanel/BottomContainer/BuildingRow/TowerButton", energy >= 60)
	update_single_button("GameUI/BottomPanel/BottomContainer/BuildingRow/TrainingButton", energy >= 120 and crystals >= 20)
	update_single_button("GameUI/BottomPanel/BottomContainer/BuildingRow/AcademyButton", energy >= 100 and crystals >= 30)
	
	# –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
	update_single_button("GameUI/BottomPanel/BottomContainer/AbilityRow/FireballButton", energy >= 40 and crystals >= 15)
	update_single_button("GameUI/BottomPanel/BottomContainer/AbilityRow/HealButton", energy >= 30 and crystals >= 10)
	update_single_button("GameUI/BottomPanel/BottomContainer/AbilityRow/ShieldButton", energy >= 50 and crystals >= 20)
	update_single_button("GameUI/BottomPanel/BottomContainer/AbilityRow/LightningButton", energy >= 60 and crystals >= 25)
	
	# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
	update_single_button("GameUI/BottomPanel/BottomContainer/SpecialRow/UpgradeButton", energy >= 150 and crystals >= 50)
	update_single_button("GameUI/BottomPanel/BottomContainer/SpecialRow/NukeButton", energy >= 200 and crystals >= 100)

func update_single_button(button_path: String, can_afford: bool):
	if has_node(button_path):
		var button = get_node(button_path)
		if can_afford:
			button.modulate = Color(1.0, 1.0, 1.0, 1.0)
		else:
			button.modulate = Color(0.5, 0.5, 0.5, 0.7)
		button.disabled = not can_afford

func enable_hero_summon():
	# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∑—ã–≤–∞ –≥–µ—Ä–æ—è
	var hero_button = get_node("GameUI/BottomPanel/BottomContainer/AbilityRow/HeroButton")
	if hero_button:
		hero_button.disabled = false
		hero_button.modulate = Color(1.0, 1.0, 1.0, 1.0)
		hero_button.text = "ü¶∏\n–ì–ï–†–û–ô\n‚è∞ –ì–æ—Ç–æ–≤!"
		print("ü¶∏ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∑—ã–≤–∞ –≥–µ—Ä–æ—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")

func _input(event):
	# –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
	if is_dragging and ghost_preview:
		if event is InputEventMouseMotion:
			var mouse_pos = get_viewport().get_mouse_position()
			ghost_preview.position = mouse_pos - ghost_preview.size / 2
			
			# –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
			var can_build = can_build_at_position(mouse_pos)
			if can_build:
				ghost_preview.color = get_building_color(drag_type)
				ghost_preview.color.a = 0.7
			else:
				ghost_preview.color = Color.RED
				ghost_preview.color.a = 0.5

func create_ghost_preview(building_type: String):
	# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–¥–∞–Ω–∏—è
	ghost_preview = ColorRect.new()
	ghost_preview.size = Vector2(60, 60)
	ghost_preview.color = get_building_color(building_type)
	ghost_preview.color.a = 0.5
	ghost_preview.z_index = 100
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∑–¥–∞–Ω–∏—è
	var label = Label.new()
	label.text = get_building_emoji(building_type)
	label.add_theme_font_size_override("font_size", 32)
	label.anchors_preset = Control.PRESET_CENTER
	ghost_preview.add_child(label)
	
	add_child(ghost_preview)
	print("üëª –°–æ–∑–¥–∞–Ω –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è ", building_type)

func destroy_ghost_preview():
	if ghost_preview:
		ghost_preview.queue_free()
		ghost_preview = null

func get_building_color(building_type: String) -> Color:
	match building_type:
		"barracks": return Color.CYAN
		"tower": return Color.ORANGE
		"training_camp": return Color.GOLD
		"magic_academy": return Color.MAGENTA
		"collector_facility": return Color.GREEN
		_: return Color.WHITE

func get_building_emoji(building_type: String) -> String:
	match building_type:
		"barracks": return "üè∞"
		"tower": return "üóº"
		"training_camp": return "üéñÔ∏è"
		"magic_academy": return "üîÆ"
		"collector_facility": return "üèÉ"
		_: return "üèóÔ∏è"

func can_build_at_position(screen_pos: Vector2) -> bool:
	# –ú–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–µ —ç–∫—Ä–∞–Ω–∞ (–∏–≥—Ä–æ–∫)
	var screen_size = get_viewport().get_visible_rect().size
	return screen_pos.y > screen_size.y * 0.5

func _on_start_game_pressed():
	print("üöÄ === –ù–ê–ß–ê–õ–û –ò–ì–†–´ –° –ö–û–ú–ü–ê–ö–¢–ù–´–ú UI ===")
	main_menu.visible = false
	game_ui.visible = true
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
	var instructions = get_node("GameUI/Instructions")
	if instructions:
		instructions.visible = true
	
	start_battle.emit()
	print("üéÆ –ò–≥—Ä–∞ —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º UI –∑–∞–ø—É—â–µ–Ω–∞!")

func _on_exit_pressed():
	print("üö™ –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã")
	get_tree().quit()

func show_main_menu():
	# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	main_menu.visible = true
	game_ui.visible = false
