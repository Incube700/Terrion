class_name Unit
extends CharacterBody3D

@export var team: String = "player"
@export var unit_type: String = "soldier" # soldier, tank, drone
@export var speed: float = 100.0
@export var health: int = 100
@export var max_health: int = 100
@export var damage: int = 20
@export var target_pos: Vector3
var battle_manager = null

var attack_range: float = 3.0
var attack_cooldown: float = 1.0
var attack_timer: float = 0.0
var target: Node = null

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
var target_territory = null
var is_capturing = false
var capture_progress = 0.0
var has_transformed = false

@onready var attack_area: Area3D = null
@onready var health_bar: Label = null

func _ready():
	# –î–æ–±–∞–≤–ª—è–µ–º —é–Ω–∏—Ç –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–µ–π
	add_to_group("units")
	
	# –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–¥—ã
	if has_node("AttackArea"):
		attack_area = get_node("AttackArea")
	if has_node("HealthBar"):
		health_bar = get_node("HealthBar")
	
	# –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ MeshInstance3D
	if has_node("MeshInstance3D_Capsule"): get_node("MeshInstance3D_Capsule").visible = false
	if has_node("MeshInstance3D_Cube"): get_node("MeshInstance3D_Cube").visible = false
	if has_node("MeshInstance3D_Sphere"): get_node("MeshInstance3D_Sphere").visible = false
	if has_node("MeshInstance3D_Cylinder"): get_node("MeshInstance3D_Cylinder").visible = false

	# –í–∫–ª—é—á–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ–æ—Ä–º—É –ø–æ —Ç–∏–ø—É —é–Ω–∏—Ç–∞
	var current_mesh = null
	if unit_type == "soldier" and has_node("MeshInstance3D_Capsule"):
		current_mesh = get_node("MeshInstance3D_Capsule")
		if current_mesh:
			current_mesh.visible = true
	elif unit_type == "tank" and has_node("MeshInstance3D_Cube"):
		current_mesh = get_node("MeshInstance3D_Cube")
		if current_mesh:
			current_mesh.visible = true
	elif unit_type == "drone" and has_node("MeshInstance3D_Sphere"):
		current_mesh = get_node("MeshInstance3D_Sphere")
		if current_mesh:
			current_mesh.visible = true
	elif unit_type == "collector" and has_node("MeshInstance3D_Cylinder"):
		current_mesh = get_node("MeshInstance3D_Cylinder")
		if current_mesh:
			current_mesh.visible = true
	else:
		if has_node("MeshInstance3D_Capsule"):
			current_mesh = get_node("MeshInstance3D_Capsule")
			if current_mesh:
				current_mesh.visible = true

	# –¢–∏–ø –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ó–ê–ú–ï–î–õ–ï–ù–ù–ê–Ø –°–ö–û–†–û–°–¢–¨ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–º)
	if unit_type == "soldier":
		speed = 30           # –ó–∞–º–µ–¥–ª–∏–ª –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
		health = 100
		max_health = 100
		damage = 25
	elif unit_type == "tank":
		speed = 20           # –ó–∞–º–µ–¥–ª–∏–ª —Å 80 –¥–æ 20
		health = 250
		max_health = 250
		damage = 35
	elif unit_type == "drone":
		speed = 40           # –ó–∞–º–µ–¥–ª–∏–ª —Å 200 –¥–æ 40
		health = 80
		max_health = 80
		damage = 15
	elif unit_type == "elite_soldier":
		speed = 35           # –ó–∞–º–µ–¥–ª–∏–ª —Å 170 –¥–æ 35
		health = 140
		max_health = 140
		damage = 40
	elif unit_type == "crystal_mage":
		speed = 25           # –ó–∞–º–µ–¥–ª–∏–ª —Å 120 –¥–æ 25
		health = 90
		max_health = 90
		damage = 45
		attack_range = 5.0
	elif unit_type == "heavy_tank":
		speed = 15           # –ó–∞–º–µ–¥–ª–∏–ª —Å 60 –¥–æ 15
		health = 450
		max_health = 450
		damage = 60
	elif unit_type == "collector":
		speed = 35           # –ó–∞–º–µ–¥–ª–∏–ª —Å 140 –¥–æ 35
		health = 100
		max_health = 100
		damage = 0           # –ù–µ –∞—Ç–∞–∫—É—é—Ç
	# –¶–≤–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ (–∂—ë—Å—Ç–∫–æ: –∏–≥—Ä–æ–∫ ‚Äî —Å–∏–Ω–∏–π, –≤—Ä–∞–≥ ‚Äî –∫—Ä–∞—Å–Ω—ã–π)
	if current_mesh:
		current_mesh.material_override = StandardMaterial3D.new()
		if team == "player":
			current_mesh.material_override.albedo_color = Color(0.2, 0.6, 1, 1)
		else:
			current_mesh.material_override.albedo_color = Color(1, 0.2, 0.2, 1)
	# –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º AttackArea
	if attack_area:
		attack_area.body_entered.connect(_on_attack_area_body_entered)
		attack_area.body_exited.connect(_on_attack_area_body_exited)
	# –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º HealthBar
	if health_bar and health_bar is Label:
		update_health_display()

func _physics_process(_delta):
	if health <= 0:
		queue_free()
		return
	
	# –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
	if unit_type == "collector":
		handle_collector_behavior(_delta)
		return
		
	if target_pos and global_position.distance_to(target_pos) < 1.5:
		if battle_manager:
			battle_manager.unit_reached_base(self)
		queue_free()
		return
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ö–≤–∞—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤
	if battle_manager and battle_manager.territory_system:
		battle_manager.territory_system.check_territory_capture(global_position, team)
	
	attack_timer += _delta
	if target and is_instance_valid(target):
		var dist = global_position.distance_to(target.global_position)
		if dist > attack_range:
			move_towards_target()
		else:
			if attack_timer > attack_cooldown:
				attack()
				attack_timer = 0.0
	else:
		move_towards_target()
		find_new_target()

func move_towards_target():
	if target_pos:
		var dir = (target_pos - global_position).normalized()
		velocity = dir * speed
		move_and_slide()

func _on_attack_area_body_entered(body):
	if body != self and body.has_method("take_damage") and body.team != team:
		target = body

func _on_attack_area_body_exited(body):
	if target == body:
		target = null

func find_new_target():
	# –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
	var enemies = get_tree().get_nodes_in_group("units")
	var closest_enemy = null
	var closest_distance = 999999.0
	
	for enemy in enemies:
		if enemy.team != team and enemy.health > 0:
			var distance = global_position.distance_to(enemy.global_position)
			if distance < closest_distance and distance < 15.0:  # –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ 15 –µ–¥–∏–Ω–∏—Ü
				closest_enemy = enemy
				closest_distance = distance
	
	if closest_enemy:
		target = closest_enemy
		print(team, " ", unit_type, " –Ω–∞—à–µ–ª —Ü–µ–ª—å: ", closest_enemy.team, " ", closest_enemy.unit_type)

func attack():
	if target and target.has_method("take_damage"):
		target.take_damage(damage)
		print(team, " ", unit_type, " –∞—Ç–∞–∫—É–µ—Ç ", target.team, " ", target.unit_type, " —É—Ä–æ–Ω: ", damage)
		
		# –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∞—Ç–∞–∫–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
		if battle_manager and battle_manager.effect_system:
			battle_manager.effect_system.create_hit_effect(target.global_position, damage)
		
		# –ó–≤—É–∫ –∞—Ç–∞–∫–∏
		if battle_manager and battle_manager.audio_system:
			battle_manager.audio_system.play_unit_attack_sound(global_position)
		
		# –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∞—Ç–∞–∫–∏ –Ω–∞ —Å–∞–º–æ–º —é–Ω–∏—Ç–µ
		var current_mesh = get_current_mesh()
		if current_mesh and current_mesh.material_override:
			current_mesh.material_override.albedo_color = Color.WHITE
			await get_tree().create_timer(0.1).timeout
			# –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ü–≤–µ—Ç
			if team == "player":
				current_mesh.material_override.albedo_color = Color(0.2, 0.6, 1, 1)
			else:
				current_mesh.material_override.albedo_color = Color(1, 0.2, 0.2, 1)

func take_damage(amount: int):
	health -= amount
	update_health_display()
	
	print(team, " ", unit_type, " –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω: ", amount, " HP: ", health)
	
	# –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
	var current_mesh = get_current_mesh()
	if current_mesh and current_mesh.material_override:
		current_mesh.material_override.albedo_color = Color.RED
		await get_tree().create_timer(0.2).timeout
		# –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ü–≤–µ—Ç
		if team == "player":
			current_mesh.material_override.albedo_color = Color(0.2, 0.6, 1, 1)
		else:
			current_mesh.material_override.albedo_color = Color(1, 0.2, 0.2, 1)
	
	if health <= 0:
		print(team, " ", unit_type, " —É–Ω–∏—á—Ç–æ–∂–µ–Ω!")
		
		# –≠—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
		if battle_manager and battle_manager.effect_system:
			battle_manager.effect_system.create_explosion_effect(global_position, team)
		
		# –ó–≤—É–∫ —Å–º–µ—Ä—Ç–∏
		if battle_manager and battle_manager.audio_system:
			battle_manager.audio_system.play_unit_death_sound(global_position)
		
		# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏ —é–Ω–∏—Ç–∞
		if battle_manager and battle_manager.notification_system:
			battle_manager.notification_system.show_unit_killed(unit_type, team)
		
		# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
		if battle_manager and battle_manager.statistics_system:
			battle_manager.statistics_system.register_unit_killed(team, unit_type)
		
		queue_free()

func update_health_display():
	if health_bar:
		if health_bar is Label:
			if unit_type == "collector" and is_capturing:
				# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞—Ö–≤–∞—Ç–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
				var progress_percent = int(capture_progress * 100 / 5.0)  # 5 —Å–µ–∫—É–Ω–¥ = 100%
				health_bar.text = "üè∞ " + str(progress_percent) + "%"
				health_bar.modulate = Color.ORANGE
			else:
				# –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å —ç–º–æ–¥–∑–∏
				var health_percent = float(health) / float(max_health)
				var health_emoji = get_health_emoji(health_percent)
				health_bar.text = health_emoji + " " + str(health) + "/" + str(max_health)
				
				# –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è
				if health_percent > 0.7:
					health_bar.modulate = Color.GREEN
				elif health_percent > 0.3:
					health_bar.modulate = Color.YELLOW
				else:
					health_bar.modulate = Color.RED

func get_health_emoji(health_percent: float) -> String:
	# (documentation comment)
	if health_percent > 0.8:
		return "üíö"
	elif health_percent > 0.6:
		return "üíõ"
	elif health_percent > 0.3:
		return "üß°"
	else:
		return "‚ù§Ô∏è"

func handle_collector_behavior(_delta):
	# –ï—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä —É–∂–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ —Ç—É—Ä–µ–ª—å
	if has_transformed:
		# –í–µ–¥–µ–º —Å–µ–±—è –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–Ω–∞—è —Ç—É—Ä–µ–ª—å
		speed = 0
		attack_timer += _delta
		find_new_target()
		if target and is_instance_valid(target):
			if attack_timer > attack_cooldown:
				attack()
				attack_timer = 0.0
		return
	
	# –ï—Å–ª–∏ –º—ã –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
	if is_capturing and target_territory:
		capture_progress += _delta
		update_health_display()
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∑–∞—Ö–≤–∞—Ç
		if capture_progress >= 5.0:  # 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
			complete_territory_capture()
		
		# –ú–æ–∂–µ–º –∑–∞—â–∏—â–∞—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è –∑–∞—Ö–≤–∞—Ç–∞
		attack_timer += _delta
		find_new_target()
		if target and is_instance_valid(target):
			if attack_timer > attack_cooldown:
				attack()
				attack_timer = 0.0
		return
	
	# –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
	if not target_territory:
		find_target_territory()
	
	# –î–≤–∏–≥–∞–µ–º—Å—è –∫ —Ü–µ–ª–µ–≤–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
	if target_territory:
		var territory_pos = target_territory.position
		var distance = global_position.distance_to(territory_pos)
		
		if distance < target_territory.control_radius:
			# –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç
			start_territory_capture()
		else:
			# –î–≤–∏–∂–µ–º—Å—è –∫ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
			var dir = (territory_pos - global_position).normalized()
			velocity = dir * speed
			move_and_slide()
	else:
		# –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–∏, –¥–≤–∏–≥–∞–µ–º—Å—è –∫ –≤—Ä–∞–∂–µ—Å–∫–æ–π –±–∞–∑–µ
		if target_pos:
			move_towards_target()

func find_target_territory():
	if not battle_manager or not battle_manager.territory_system:
		return
		
	var territories = battle_manager.territory_system.get_territory_info()
	var best_territory = null
	var closest_distance = 999999.0
	
	for territory in territories:
		# –ò—â–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∏–ª–∏ –≤—Ä–∞–∂–µ—Å–∫–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
		if territory.owner == "neutral" or territory.owner != team:
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –Ω–∞ —ç—Ç–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
			if not territory.has("assigned_collector"):
				var distance = global_position.distance_to(territory.position)
				if distance < closest_distance:
					closest_distance = distance
					best_territory = territory
	
	if best_territory:
		target_territory = best_territory
		# –ü–æ–º–µ—á–∞–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –∫–∞–∫ –∑–∞–Ω—è—Ç—É—é
		target_territory["assigned_collector"] = self
		print("üéØ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä ", team, " –Ω–∞—Ü–µ–ª–∏–ª—Å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é ", target_territory.id)

func start_territory_capture():
	is_capturing = true
	capture_progress = 0.0
	speed = 0  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
	print("‚è≥ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä ", team, " –Ω–∞—á–∞–ª –∑–∞—Ö–≤–∞—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ ", target_territory.id)

func complete_territory_capture():
	if not target_territory or not battle_manager or not battle_manager.territory_system:
		return
		
	# –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
	battle_manager.territory_system.force_capture_territory(target_territory.id, team)
	
	# –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ç—É—Ä–µ–ª—å
	transform_to_turret()
	
	print("üè∞ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä ", team, " –∑–∞—Ö–≤–∞—Ç–∏–ª —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é ", target_territory.id, " –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ —Ç—É—Ä–µ–ª—å!")

func transform_to_turret():
	has_transformed = true
	is_capturing = false
	speed = 0
	
	# –ú–µ–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –Ω–∞ —Ç—É—Ä–µ–ª—å
	if has_node("MeshInstance3D_Cylinder"):
		var mesh = get_node("MeshInstance3D_Cylinder")
		mesh.visible = false
	
	# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–µ—à —Ç—É—Ä–µ–ª–∏
	var turret_mesh = MeshInstance3D.new()
	var cyl = CylinderMesh.new()
	cyl.top_radius = 0.6
	cyl.bottom_radius = 0.6
	cyl.height = 1.5
	turret_mesh.mesh = cyl
	turret_mesh.position = Vector3(0, 0.75, 0)
	
	# –¶–≤–µ—Ç —Ç—É—Ä–µ–ª–∏
	turret_mesh.material_override = StandardMaterial3D.new()
	if team == "player":
		turret_mesh.material_override.albedo_color = Color(0.2, 0.6, 1, 1)
	else:
		turret_mesh.material_override.albedo_color = Color(1, 0.2, 0.2, 1)
	
	# –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
	turret_mesh.material_override.emission_enabled = true
	if team == "player":
		turret_mesh.material_override.emission = Color(0.1, 0.3, 0.5)
	else:
		turret_mesh.material_override.emission = Color(0.5, 0.1, 0.1)
	
	add_child(turret_mesh)
	
	# –£–ª—É—á—à–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–µ–ª–∏
	damage = 40  # –ë–æ–ª—å—à–µ —É—Ä–æ–Ω–∞
	attack_range = 6.0  # –ë–æ–ª—å—à–µ –¥–∞–ª—å–Ω–æ—Å—Ç—å
	attack_cooldown = 0.8  # –ë—ã—Å—Ç—Ä–µ–µ —Å—Ç—Ä–µ–ª—è–µ—Ç
	health = 200  # –ë–æ–ª—å—à–µ –∑–¥–æ—Ä–æ–≤—å—è
	max_health = 200
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —é–Ω–∏—Ç–∞
	unit_type = "turret"
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã
	remove_from_group("units")
	add_to_group("turrets")
	
	update_health_display()

func get_current_mesh() -> MeshInstance3D:
	# (documentation comment)
	if unit_type == "soldier" and has_node("MeshInstance3D_Capsule"):
		return get_node("MeshInstance3D_Capsule")
	elif unit_type == "tank" and has_node("MeshInstance3D_Cube"):
		return get_node("MeshInstance3D_Cube")
	elif unit_type == "drone" and has_node("MeshInstance3D_Sphere"):
		return get_node("MeshInstance3D_Sphere")
	elif unit_type == "collector" and has_node("MeshInstance3D_Cylinder"):
		return get_node("MeshInstance3D_Cylinder")
	elif has_node("MeshInstance3D_Capsule"):
		return get_node("MeshInstance3D_Capsule")
	return null
 
 
 
